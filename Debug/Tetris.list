
Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af3c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019d0  0800b124  0800b124  0001b124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800caf4  0800caf4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800caf4  0800caf4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800caf4  0800caf4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800caf4  0800caf4  0001caf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800caf8  0800caf8  0001caf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800cafc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  20000078  0800cb74  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  0800cb74  000206bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e74  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f1b  00000000  00000000  00031f15  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f98  00000000  00000000  00034e30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e18  00000000  00000000  00035dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019115  00000000  00000000  00036be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f1f2  00000000  00000000  0004fcf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081eee  00000000  00000000  0005eee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0dd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004828  00000000  00000000  000e0e50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000078 	.word	0x20000078
 8000204:	00000000 	.word	0x00000000
 8000208:	0800b10c 	.word	0x0800b10c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000007c 	.word	0x2000007c
 8000224:	0800b10c 	.word	0x0800b10c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__aeabi_d2uiz>:
 80009d4:	004a      	lsls	r2, r1, #1
 80009d6:	d211      	bcs.n	80009fc <__aeabi_d2uiz+0x28>
 80009d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009dc:	d211      	bcs.n	8000a02 <__aeabi_d2uiz+0x2e>
 80009de:	d50d      	bpl.n	80009fc <__aeabi_d2uiz+0x28>
 80009e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e8:	d40e      	bmi.n	8000a08 <__aeabi_d2uiz+0x34>
 80009ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009f6:	fa23 f002 	lsr.w	r0, r3, r2
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a06:	d102      	bne.n	8000a0e <__aeabi_d2uiz+0x3a>
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	4770      	bx	lr
 8000a0e:	f04f 0000 	mov.w	r0, #0
 8000a12:	4770      	bx	lr

08000a14 <button_init>:
Button_t *k_key0;
Button_t *k_key1;

uint32_t button_scan_interval = 10; // ms

void button_init() {
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
//  KEY_Init();

  // init buttons
  r_up = &button_list[0];
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <button_init+0x70>)
 8000a1c:	4a1a      	ldr	r2, [pc, #104]	; (8000a88 <button_init+0x74>)
 8000a1e:	601a      	str	r2, [r3, #0]
  r_down = &button_list[1];
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <button_init+0x78>)
 8000a22:	4a1b      	ldr	r2, [pc, #108]	; (8000a90 <button_init+0x7c>)
 8000a24:	601a      	str	r2, [r3, #0]
  r_left = &button_list[2];
 8000a26:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <button_init+0x80>)
 8000a28:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <button_init+0x84>)
 8000a2a:	601a      	str	r2, [r3, #0]
  r_right = &button_list[3];
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <button_init+0x88>)
 8000a2e:	4a1c      	ldr	r2, [pc, #112]	; (8000aa0 <button_init+0x8c>)
 8000a30:	601a      	str	r2, [r3, #0]
  r_confirm = &button_list[4];
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <button_init+0x90>)
 8000a34:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <button_init+0x94>)
 8000a36:	601a      	str	r2, [r3, #0]
  r_return = &button_list[5];
 8000a38:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <button_init+0x98>)
 8000a3a:	4a1d      	ldr	r2, [pc, #116]	; (8000ab0 <button_init+0x9c>)
 8000a3c:	601a      	str	r2, [r3, #0]
  k_wakeup = &button_list[6];
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <button_init+0xa0>)
 8000a40:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <button_init+0xa4>)
 8000a42:	601a      	str	r2, [r3, #0]
  k_key0 = &button_list[7];
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <button_init+0xa8>)
 8000a46:	4a1e      	ldr	r2, [pc, #120]	; (8000ac0 <button_init+0xac>)
 8000a48:	601a      	str	r2, [r3, #0]
  k_key1 = &button_list[8];
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <button_init+0xb0>)
 8000a4c:	4a1e      	ldr	r2, [pc, #120]	; (8000ac8 <button_init+0xb4>)
 8000a4e:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i<BUTTON_LIST_LEN; i++){
 8000a50:	2300      	movs	r3, #0
 8000a52:	71fb      	strb	r3, [r7, #7]
 8000a54:	e00e      	b.n	8000a74 <button_init+0x60>
    button_list[i] = (Button_t){0,0,0,0};
 8000a56:	79fa      	ldrb	r2, [r7, #7]
 8000a58:	490b      	ldr	r1, [pc, #44]	; (8000a88 <button_init+0x74>)
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	4413      	add	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	440b      	add	r3, r1
 8000a64:	461a      	mov	r2, r3
 8000a66:	2300      	movs	r3, #0
 8000a68:	6013      	str	r3, [r2, #0]
 8000a6a:	6053      	str	r3, [r2, #4]
 8000a6c:	6093      	str	r3, [r2, #8]
  for(uint8_t i=0; i<BUTTON_LIST_LEN; i++){
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	3301      	adds	r3, #1
 8000a72:	71fb      	strb	r3, [r7, #7]
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	2b08      	cmp	r3, #8
 8000a78:	d9ed      	bls.n	8000a56 <button_init+0x42>
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	200000b0 	.word	0x200000b0
 8000a88:	200000cc 	.word	0x200000cc
 8000a8c:	200000ac 	.word	0x200000ac
 8000a90:	200000d8 	.word	0x200000d8
 8000a94:	200000c8 	.word	0x200000c8
 8000a98:	200000e4 	.word	0x200000e4
 8000a9c:	200000c0 	.word	0x200000c0
 8000aa0:	200000f0 	.word	0x200000f0
 8000aa4:	200000c4 	.word	0x200000c4
 8000aa8:	200000fc 	.word	0x200000fc
 8000aac:	20000138 	.word	0x20000138
 8000ab0:	20000108 	.word	0x20000108
 8000ab4:	200000b8 	.word	0x200000b8
 8000ab8:	20000114 	.word	0x20000114
 8000abc:	200000b4 	.word	0x200000b4
 8000ac0:	20000120 	.word	0x20000120
 8000ac4:	200000bc 	.word	0x200000bc
 8000ac8:	2000012c 	.word	0x2000012c

08000acc <button_task>:

void button_task() {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
  for(uint8_t i=0; i<BUTTON_LIST_LEN; i++){
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	73fb      	strb	r3, [r7, #15]
 8000ad6:	e01d      	b.n	8000b14 <button_task+0x48>
    button_list[i].last_status = button_list[i].status;
 8000ad8:	7bf9      	ldrb	r1, [r7, #15]
 8000ada:	7bfa      	ldrb	r2, [r7, #15]
 8000adc:	4853      	ldr	r0, [pc, #332]	; (8000c2c <button_task+0x160>)
 8000ade:	460b      	mov	r3, r1
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	440b      	add	r3, r1
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4403      	add	r3, r0
 8000ae8:	7818      	ldrb	r0, [r3, #0]
 8000aea:	4950      	ldr	r1, [pc, #320]	; (8000c2c <button_task+0x160>)
 8000aec:	4613      	mov	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	440b      	add	r3, r1
 8000af6:	3301      	adds	r3, #1
 8000af8:	4602      	mov	r2, r0
 8000afa:	701a      	strb	r2, [r3, #0]
    button_list[i].status = 0;
 8000afc:	7bfa      	ldrb	r2, [r7, #15]
 8000afe:	494b      	ldr	r1, [pc, #300]	; (8000c2c <button_task+0x160>)
 8000b00:	4613      	mov	r3, r2
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	4413      	add	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	440b      	add	r3, r1
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=0; i<BUTTON_LIST_LEN; i++){
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	3301      	adds	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b08      	cmp	r3, #8
 8000b18:	d9de      	bls.n	8000ad8 <button_task+0xc>

  // scan normal key
  static uint8_t key0_last = 0;
  static uint8_t key1_last = 0;
  static uint8_t wakeup_last = 0;
  uint8_t key0_now = KEY0?0:1;
 8000b1a:	2120      	movs	r1, #32
 8000b1c:	4844      	ldr	r0, [pc, #272]	; (8000c30 <button_task+0x164>)
 8000b1e:	f007 fd6b 	bl	80085f8 <HAL_GPIO_ReadPin>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf0c      	ite	eq
 8000b28:	2301      	moveq	r3, #1
 8000b2a:	2300      	movne	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	737b      	strb	r3, [r7, #13]
  uint8_t key1_now = KEY1?0:1;
 8000b30:	2120      	movs	r1, #32
 8000b32:	4840      	ldr	r0, [pc, #256]	; (8000c34 <button_task+0x168>)
 8000b34:	f007 fd60 	bl	80085f8 <HAL_GPIO_ReadPin>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	bf0c      	ite	eq
 8000b3e:	2301      	moveq	r3, #1
 8000b40:	2300      	movne	r3, #0
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	733b      	strb	r3, [r7, #12]
  uint8_t wakeup_now = WK_UP;
 8000b46:	2101      	movs	r1, #1
 8000b48:	483a      	ldr	r0, [pc, #232]	; (8000c34 <button_task+0x168>)
 8000b4a:	f007 fd55 	bl	80085f8 <HAL_GPIO_ReadPin>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	72fb      	strb	r3, [r7, #11]

  if(key0_now == key0_last){k_key0->status = key0_now;}
 8000b52:	4b39      	ldr	r3, [pc, #228]	; (8000c38 <button_task+0x16c>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	7b7a      	ldrb	r2, [r7, #13]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d104      	bne.n	8000b66 <button_task+0x9a>
 8000b5c:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <button_task+0x170>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	7b7a      	ldrb	r2, [r7, #13]
 8000b62:	701a      	strb	r2, [r3, #0]
 8000b64:	e005      	b.n	8000b72 <button_task+0xa6>
  else{k_key0->status = k_key0->last_status;}
 8000b66:	4b35      	ldr	r3, [pc, #212]	; (8000c3c <button_task+0x170>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	4b34      	ldr	r3, [pc, #208]	; (8000c3c <button_task+0x170>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	7852      	ldrb	r2, [r2, #1]
 8000b70:	701a      	strb	r2, [r3, #0]

  if(key1_now == key1_last){k_key1->status = key1_now;}
 8000b72:	4b33      	ldr	r3, [pc, #204]	; (8000c40 <button_task+0x174>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	7b3a      	ldrb	r2, [r7, #12]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d104      	bne.n	8000b86 <button_task+0xba>
 8000b7c:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <button_task+0x178>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	7b3a      	ldrb	r2, [r7, #12]
 8000b82:	701a      	strb	r2, [r3, #0]
 8000b84:	e005      	b.n	8000b92 <button_task+0xc6>
  else{k_key1->status = k_key1->last_status;}
 8000b86:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <button_task+0x178>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <button_task+0x178>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	7852      	ldrb	r2, [r2, #1]
 8000b90:	701a      	strb	r2, [r3, #0]

  if(wakeup_now == wakeup_last){k_wakeup->status = wakeup_now;}
 8000b92:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <button_task+0x17c>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	7afa      	ldrb	r2, [r7, #11]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d104      	bne.n	8000ba6 <button_task+0xda>
 8000b9c:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <button_task+0x180>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	7afa      	ldrb	r2, [r7, #11]
 8000ba2:	701a      	strb	r2, [r3, #0]
 8000ba4:	e005      	b.n	8000bb2 <button_task+0xe6>
  else{k_wakeup->status = k_wakeup->last_status;}
 8000ba6:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <button_task+0x180>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <button_task+0x180>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	7852      	ldrb	r2, [r2, #1]
 8000bb0:	701a      	strb	r2, [r3, #0]

  key0_last = key0_now;
 8000bb2:	4a21      	ldr	r2, [pc, #132]	; (8000c38 <button_task+0x16c>)
 8000bb4:	7b7b      	ldrb	r3, [r7, #13]
 8000bb6:	7013      	strb	r3, [r2, #0]
  key1_last = key1_now;
 8000bb8:	4a21      	ldr	r2, [pc, #132]	; (8000c40 <button_task+0x174>)
 8000bba:	7b3b      	ldrb	r3, [r7, #12]
 8000bbc:	7013      	strb	r3, [r2, #0]
  wakeup_last = wakeup_now;
 8000bbe:	4a22      	ldr	r2, [pc, #136]	; (8000c48 <button_task+0x17c>)
 8000bc0:	7afb      	ldrb	r3, [r7, #11]
 8000bc2:	7013      	strb	r3, [r2, #0]

  // execute function
  for(uint8_t i=0; i<BUTTON_LIST_LEN; i++){
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73bb      	strb	r3, [r7, #14]
 8000bc8:	e029      	b.n	8000c1e <button_task+0x152>
    Button_t *b = button_list + i;
 8000bca:	7bba      	ldrb	r2, [r7, #14]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	4413      	add	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <button_task+0x160>)
 8000bd8:	4413      	add	r3, r2
 8000bda:	607b      	str	r3, [r7, #4]
    if(b->status == 1 && b->last_status == 0){
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d10a      	bne.n	8000bfa <button_task+0x12e>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	785b      	ldrb	r3, [r3, #1]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d106      	bne.n	8000bfa <button_task+0x12e>
      if(b->press_fun){b->press_fun();}
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d002      	beq.n	8000bfa <button_task+0x12e>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	4798      	blx	r3
    }
    if(b->status == 0 && b->last_status == 1){
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d10a      	bne.n	8000c18 <button_task+0x14c>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	785b      	ldrb	r3, [r3, #1]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d106      	bne.n	8000c18 <button_task+0x14c>
      if(b->release_fun){b->release_fun();}
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d002      	beq.n	8000c18 <button_task+0x14c>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	4798      	blx	r3
  for(uint8_t i=0; i<BUTTON_LIST_LEN; i++){
 8000c18:	7bbb      	ldrb	r3, [r7, #14]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	73bb      	strb	r3, [r7, #14]
 8000c1e:	7bbb      	ldrb	r3, [r7, #14]
 8000c20:	2b08      	cmp	r3, #8
 8000c22:	d9d2      	bls.n	8000bca <button_task+0xfe>
    }
  }
}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	200000cc 	.word	0x200000cc
 8000c30:	40011000 	.word	0x40011000
 8000c34:	40010800 	.word	0x40010800
 8000c38:	20000094 	.word	0x20000094
 8000c3c:	200000b4 	.word	0x200000b4
 8000c40:	20000095 	.word	0x20000095
 8000c44:	200000bc 	.word	0x200000bc
 8000c48:	20000096 	.word	0x20000096
 8000c4c:	200000b8 	.word	0x200000b8

08000c50 <tet_move_left>:

Hiscore_t hiscore;
uint32_t tet_fall_interval; //ms
uint32_t fall_task_stamp;

void tet_move_left(){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  if(left_shift_check()){
 8000c54:	f006 fad0 	bl	80071f8 <left_shift_check>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00e      	beq.n	8000c7c <tet_move_left+0x2c>
    draw_tetromino(1);
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f006 fef8 	bl	8007a54 <draw_tetromino>
    tetromino.x -= 1;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <tet_move_left+0x30>)
 8000c66:	f993 3000 	ldrsb.w	r3, [r3]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	b25a      	sxtb	r2, r3
 8000c72:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <tet_move_left+0x30>)
 8000c74:	701a      	strb	r2, [r3, #0]
    draw_tetromino(0);
 8000c76:	2000      	movs	r0, #0
 8000c78:	f006 feec 	bl	8007a54 <draw_tetromino>
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2000062c 	.word	0x2000062c

08000c84 <tet_move_right>:

void tet_move_right(){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  if(right_shift_check()){
 8000c88:	f006 fb16 	bl	80072b8 <right_shift_check>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00e      	beq.n	8000cb0 <tet_move_right+0x2c>
    draw_tetromino(1);
 8000c92:	2001      	movs	r0, #1
 8000c94:	f006 fede 	bl	8007a54 <draw_tetromino>
    tetromino.x += 1;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <tet_move_right+0x30>)
 8000c9a:	f993 3000 	ldrsb.w	r3, [r3]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	b25a      	sxtb	r2, r3
 8000ca6:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <tet_move_right+0x30>)
 8000ca8:	701a      	strb	r2, [r3, #0]
    draw_tetromino(0);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f006 fed2 	bl	8007a54 <draw_tetromino>
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	2000062c 	.word	0x2000062c

08000cb8 <tet_fall_speedup>:

void tet_fall_speedup(){
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  tet_fall_interval = 150;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <tet_fall_speedup+0x14>)
 8000cbe:	2296      	movs	r2, #150	; 0x96
 8000cc0:	601a      	str	r2, [r3, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	2000013c 	.word	0x2000013c

08000cd0 <tet_fall_normal>:

void tet_fall_normal(){
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  tet_fall_interval = 500;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <tet_fall_normal+0x14>)
 8000cd6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cda:	601a      	str	r2, [r3, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	2000013c 	.word	0x2000013c

08000ce8 <tet_rotation>:

void tet_rotation(){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  if(rotation_check()){
 8000cec:	f006 fba4 	bl	8007438 <rotation_check>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d012      	beq.n	8000d1c <tet_rotation+0x34>
    draw_tetromino(1);
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f006 feac 	bl	8007a54 <draw_tetromino>
    tetromino.rotation = (tetromino.rotation + 1)%4;
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <tet_rotation+0x38>)
 8000cfe:	78db      	ldrb	r3, [r3, #3]
 8000d00:	3301      	adds	r3, #1
 8000d02:	425a      	negs	r2, r3
 8000d04:	f003 0303 	and.w	r3, r3, #3
 8000d08:	f002 0203 	and.w	r2, r2, #3
 8000d0c:	bf58      	it	pl
 8000d0e:	4253      	negpl	r3, r2
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <tet_rotation+0x38>)
 8000d14:	70da      	strb	r2, [r3, #3]
    draw_tetromino(0);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f006 fe9c 	bl	8007a54 <draw_tetromino>
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2000062c 	.word	0x2000062c

08000d24 <game_fail_check>:

uint8_t game_fail_check() {
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
  int8_t a, b;
	uint8_t i;
	Image_t* it = &tetimg_list[tetromino.shape];
 8000d2a:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <game_fail_check+0xa4>)
 8000d2c:	789b      	ldrb	r3, [r3, #2]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4613      	mov	r3, r2
 8000d32:	011b      	lsls	r3, r3, #4
 8000d34:	4413      	add	r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	4a24      	ldr	r2, [pc, #144]	; (8000dcc <game_fail_check+0xa8>)
 8000d3a:	4413      	add	r3, r2
 8000d3c:	60bb      	str	r3, [r7, #8]
	for(i=0;i<4;i++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e037      	b.n	8000db4 <game_fail_check+0x90>
	{
	  a = it->x[tetromino.rotation][i]+tetromino.x;
 8000d44:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <game_fail_check+0xa4>)
 8000d46:	78db      	ldrb	r3, [r3, #3]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	0092      	lsls	r2, r2, #2
 8000d50:	440a      	add	r2, r1
 8000d52:	4413      	add	r3, r2
 8000d54:	f993 3000 	ldrsb.w	r3, [r3]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <game_fail_check+0xa4>)
 8000d5c:	f993 3000 	ldrsb.w	r3, [r3]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	4413      	add	r3, r2
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	71fb      	strb	r3, [r7, #7]
	  b = it->y[tetromino.rotation][i]+tetromino.y;
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <game_fail_check+0xa4>)
 8000d6a:	78db      	ldrb	r3, [r3, #3]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	0092      	lsls	r2, r2, #2
 8000d74:	440a      	add	r2, r1
 8000d76:	4413      	add	r3, r2
 8000d78:	3310      	adds	r3, #16
 8000d7a:	f993 3000 	ldrsb.w	r3, [r3]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <game_fail_check+0xa4>)
 8000d82:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	4413      	add	r3, r2
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	71bb      	strb	r3, [r7, #6]
	  if(!grid[b][a].isEmpty) {return 1;}
 8000d8e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000d92:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8000d96:	480e      	ldr	r0, [pc, #56]	; (8000dd0 <game_fail_check+0xac>)
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	440b      	add	r3, r1
 8000da2:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <game_fail_check+0x8a>
 8000daa:	2301      	movs	r3, #1
 8000dac:	e006      	b.n	8000dbc <game_fail_check+0x98>
	for(i=0;i<4;i++)
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	3301      	adds	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	d9c4      	bls.n	8000d44 <game_fail_check+0x20>
  }
  return 0;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	2000062c 	.word	0x2000062c
 8000dcc:	2000053c 	.word	0x2000053c
 8000dd0:	20000150 	.word	0x20000150

08000dd4 <fall_down_task>:

void fall_down_task() {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  if(down_shift_check()){
 8000dda:	f006 facd 	bl	8007378 <down_shift_check>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d00f      	beq.n	8000e04 <fall_down_task+0x30>
    draw_tetromino(1);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f006 fe35 	bl	8007a54 <draw_tetromino>
    tetromino.y -= 1;
 8000dea:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <fall_down_task+0xb0>)
 8000dec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	3b01      	subs	r3, #1
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	b25a      	sxtb	r2, r3
 8000df8:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <fall_down_task+0xb0>)
 8000dfa:	705a      	strb	r2, [r3, #1]
    draw_tetromino(0);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f006 fe29 	bl	8007a54 <draw_tetromino>
      // game over
      add_rank(hiscore);
      game_reset();
    }
  }
}
 8000e02:	e03b      	b.n	8000e7c <fall_down_task+0xa8>
    flush_tetromino();
 8000e04:	f006 fb8a 	bl	800751c <flush_tetromino>
    uint8_t row_num = grid_scan();
 8000e08:	f000 f8ec 	bl	8000fe4 <grid_scan>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	71fb      	strb	r3, [r7, #7]
    if(row_num){
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d013      	beq.n	8000e3e <fall_down_task+0x6a>
      hiscore.score += row_num*10;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <fall_down_task+0xb4>)
 8000e18:	895a      	ldrh	r2, [r3, #10]
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	4619      	mov	r1, r3
 8000e20:	0089      	lsls	r1, r1, #2
 8000e22:	440b      	add	r3, r1
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	4413      	add	r3, r2
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <fall_down_task+0xb4>)
 8000e2e:	815a      	strh	r2, [r3, #10]
      update_score(hiscore.score);
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <fall_down_task+0xb4>)
 8000e32:	895b      	ldrh	r3, [r3, #10]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f006 feb3 	bl	8007ba0 <update_score>
      grid_render();
 8000e3a:	f006 fdc7 	bl	80079cc <grid_render>
    draw_next_tetromino(1);
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f006 fe58 	bl	8007af4 <draw_next_tetromino>
    tetromino_reset();
 8000e44:	f006 fbc8 	bl	80075d8 <tetromino_reset>
    if(!game_fail_check()){
 8000e48:	f7ff ff6c 	bl	8000d24 <game_fail_check>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d106      	bne.n	8000e60 <fall_down_task+0x8c>
      draw_tetromino(0);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f006 fdfe 	bl	8007a54 <draw_tetromino>
      draw_next_tetromino(0);
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f006 fe4b 	bl	8007af4 <draw_next_tetromino>
}
 8000e5e:	e00d      	b.n	8000e7c <fall_down_task+0xa8>
      add_rank(hiscore);
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <fall_down_task+0xb4>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	2000      	movs	r0, #0
 8000e66:	4610      	mov	r0, r2
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	2200      	movs	r2, #0
 8000e72:	461a      	mov	r2, r3
 8000e74:	f005 ff04 	bl	8006c80 <add_rank>
      game_reset();
 8000e78:	f000 f808 	bl	8000e8c <game_reset>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000062c 	.word	0x2000062c
 8000e88:	20000144 	.word	0x20000144

08000e8c <game_reset>:

void game_reset() {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  // entity
  grid_init();
 8000e90:	f000 f920 	bl	80010d4 <grid_init>
  sub_grid_init();
 8000e94:	f000 f946 	bl	8001124 <sub_grid_init>
  tetromino_init();
 8000e98:	f006 fbd2 	bl	8007640 <tetromino_init>
  hiscore.score = 0;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <game_reset+0x3c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	815a      	strh	r2, [r3, #10]
  tet_fall_normal();
 8000ea2:	f7ff ff15 	bl	8000cd0 <tet_fall_normal>
  // display
  LCD_Clear(WHITE);
 8000ea6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000eaa:	f005 fbb3 	bl	8006614 <LCD_Clear>
  draw_bg();
 8000eae:	f006 fcf9 	bl	80078a4 <draw_bg>
  draw_name(hiscore.name);
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <game_reset+0x3c>)
 8000eb4:	f006 fe62 	bl	8007b7c <draw_name>
  draw_tetromino(0);
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f006 fdcb 	bl	8007a54 <draw_tetromino>
  draw_next_tetromino(0);
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f006 fe18 	bl	8007af4 <draw_next_tetromino>
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000144 	.word	0x20000144

08000ecc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	f107 0310 	add.w	r3, r7, #16
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee0:	4b3c      	ldr	r3, [pc, #240]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a3b      	ldr	r2, [pc, #236]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000ee6:	f043 0320 	orr.w	r3, r3, #32
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b39      	ldr	r3, [pc, #228]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0320 	and.w	r3, r3, #32
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef8:	4b36      	ldr	r3, [pc, #216]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a35      	ldr	r2, [pc, #212]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b33      	ldr	r3, [pc, #204]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f10:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a2f      	ldr	r2, [pc, #188]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000f16:	f043 0310 	orr.w	r3, r3, #16
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <MX_GPIO_Init+0x108>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0310 	and.w	r3, r3, #16
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2e:	482a      	ldr	r0, [pc, #168]	; (8000fd8 <MX_GPIO_Init+0x10c>)
 8000f30:	f007 fb79 	bl	8008626 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f34:	2301      	movs	r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f38:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <MX_GPIO_Init+0x110>)
 8000f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	4619      	mov	r1, r3
 8000f46:	4824      	ldr	r0, [pc, #144]	; (8000fd8 <MX_GPIO_Init+0x10c>)
 8000f48:	f007 f9ec 	bl	8008324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f4c:	2320      	movs	r3, #32
 8000f4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f50:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <MX_GPIO_Init+0x110>)
 8000f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4820      	ldr	r0, [pc, #128]	; (8000fe0 <MX_GPIO_Init+0x114>)
 8000f60:	f007 f9e0 	bl	8008324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2302      	movs	r3, #2
 8000f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4816      	ldr	r0, [pc, #88]	; (8000fd8 <MX_GPIO_Init+0x10c>)
 8000f7e:	f007 f9d1 	bl	8008324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_GPIO_Init+0x110>)
 8000f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	4619      	mov	r1, r3
 8000f96:	4810      	ldr	r0, [pc, #64]	; (8000fd8 <MX_GPIO_Init+0x10c>)
 8000f98:	f007 f9c4 	bl	8008324 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2006      	movs	r0, #6
 8000fa2:	f007 f880 	bl	80080a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fa6:	2006      	movs	r0, #6
 8000fa8:	f007 f899 	bl	80080de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2017      	movs	r0, #23
 8000fb2:	f007 f878 	bl	80080a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fb6:	2017      	movs	r0, #23
 8000fb8:	f007 f891 	bl	80080de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2028      	movs	r0, #40	; 0x28
 8000fc2:	f007 f870 	bl	80080a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fc6:	2028      	movs	r0, #40	; 0x28
 8000fc8:	f007 f889 	bl	80080de <HAL_NVIC_EnableIRQ>

}
 8000fcc:	bf00      	nop
 8000fce:	3720      	adds	r7, #32
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40010800 	.word	0x40010800
 8000fdc:	10110000 	.word	0x10110000
 8000fe0:	40011000 	.word	0x40011000

08000fe4 <grid_scan>:
cell_t sub_grid[4][4];

uint8_t max_height = 0;

uint8_t grid_scan()
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  int8_t x, y;
  // u8 cnt = 0;
  uint8_t row_num = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	717b      	strb	r3, [r7, #5]
  // cell_t cell;
  //scan up->down
  for (y = GRID_HEIGHT; y >= 0; y--)
 8000fee:	2314      	movs	r3, #20
 8000ff0:	71bb      	strb	r3, [r7, #6]
 8000ff2:	e02d      	b.n	8001050 <grid_scan+0x6c>
    // if (cnt == 10)
    // {
    //     clear_row(y);
    //     row_num ++;
    // }
    for (x = 0; x < GRID_WIDTH; x++){
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	e01e      	b.n	8001038 <grid_scan+0x54>
      if(grid[y][x].isEmpty) {break;}
 8000ffa:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000ffe:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001002:	4818      	ldr	r0, [pc, #96]	; (8001064 <grid_scan+0x80>)
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	440b      	add	r3, r1
 800100e:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d115      	bne.n	8001042 <grid_scan+0x5e>
      if(x == GRID_WIDTH-1){
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	2b09      	cmp	r3, #9
 800101c:	d106      	bne.n	800102c <grid_scan+0x48>
        clear_row(y);
 800101e:	79bb      	ldrb	r3, [r7, #6]
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f821 	bl	8001068 <clear_row>
        row_num ++;
 8001026:	797b      	ldrb	r3, [r7, #5]
 8001028:	3301      	adds	r3, #1
 800102a:	717b      	strb	r3, [r7, #5]
    for (x = 0; x < GRID_WIDTH; x++){
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	3301      	adds	r3, #1
 8001034:	b2db      	uxtb	r3, r3
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b09      	cmp	r3, #9
 800103e:	dddc      	ble.n	8000ffa <grid_scan+0x16>
 8001040:	e000      	b.n	8001044 <grid_scan+0x60>
      if(grid[y][x].isEmpty) {break;}
 8001042:	bf00      	nop
  for (y = GRID_HEIGHT; y >= 0; y--)
 8001044:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	3b01      	subs	r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	71bb      	strb	r3, [r7, #6]
 8001050:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001054:	2b00      	cmp	r3, #0
 8001056:	dacd      	bge.n	8000ff4 <grid_scan+0x10>
      }
    }
  }
  return row_num;
 8001058:	797b      	ldrb	r3, [r7, #5]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000150 	.word	0x20000150

08001068 <clear_row>:

void clear_row(uint8_t line)
{
 8001068:	b4b0      	push	{r4, r5, r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	uint8_t x, y;
    //shift down->up
    for (y = line; y < GRID_HEIGHT; y++)
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	73bb      	strb	r3, [r7, #14]
 8001076:	e022      	b.n	80010be <clear_row+0x56>
    {
        for (x = 0; x < GRID_WIDTH; x++)
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e019      	b.n	80010b2 <clear_row+0x4a>
        {
            // cell = grid[y + 1][x];
            // grid[y][x].isEmpty = cell.isEmpty;
            // grid[y][x].color = cell.color;
            grid[y][x] = grid[y+1][x];
 800107e:	7bbb      	ldrb	r3, [r7, #14]
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	7bf8      	ldrb	r0, [r7, #15]
 8001084:	7bb9      	ldrb	r1, [r7, #14]
 8001086:	7bfc      	ldrb	r4, [r7, #15]
 8001088:	4d11      	ldr	r5, [pc, #68]	; (80010d0 <clear_row+0x68>)
 800108a:	460b      	mov	r3, r1
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	440b      	add	r3, r1
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	1919      	adds	r1, r3, r4
 8001094:	4c0e      	ldr	r4, [pc, #56]	; (80010d0 <clear_row+0x68>)
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	181a      	adds	r2, r3, r0
 80010a0:	008b      	lsls	r3, r1, #2
 80010a2:	442b      	add	r3, r5
 80010a4:	0092      	lsls	r2, r2, #2
 80010a6:	4422      	add	r2, r4
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	601a      	str	r2, [r3, #0]
        for (x = 0; x < GRID_WIDTH; x++)
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	3301      	adds	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	2b09      	cmp	r3, #9
 80010b6:	d9e2      	bls.n	800107e <clear_row+0x16>
    for (y = line; y < GRID_HEIGHT; y++)
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
 80010ba:	3301      	adds	r3, #1
 80010bc:	73bb      	strb	r3, [r7, #14]
 80010be:	7bbb      	ldrb	r3, [r7, #14]
 80010c0:	2b13      	cmp	r3, #19
 80010c2:	d9d9      	bls.n	8001078 <clear_row+0x10>
        }
    }
    // empty_row(max_height);
    // max_height--;
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bcb0      	pop	{r4, r5, r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000150 	.word	0x20000150

080010d4 <grid_init>:
    for (x = 0; x < 10; x++)
        grid[line][x].isEmpty = 1;
}

void grid_init()
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
	uint8_t x, y;
    //scan up->down
    for (y = 0; y < GRID_HEIGHT; y++)
 80010da:	2300      	movs	r3, #0
 80010dc:	71bb      	strb	r3, [r7, #6]
 80010de:	e016      	b.n	800110e <grid_init+0x3a>
        for (x = 0; x < GRID_WIDTH; x++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	e00d      	b.n	8001102 <grid_init+0x2e>
            grid[y][x].isEmpty = 1;
 80010e6:	79ba      	ldrb	r2, [r7, #6]
 80010e8:	79f9      	ldrb	r1, [r7, #7]
 80010ea:	480d      	ldr	r0, [pc, #52]	; (8001120 <grid_init+0x4c>)
 80010ec:	4613      	mov	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	440b      	add	r3, r1
 80010f6:	2201      	movs	r2, #1
 80010f8:	f800 2023 	strb.w	r2, [r0, r3, lsl #2]
        for (x = 0; x < GRID_WIDTH; x++)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	3301      	adds	r3, #1
 8001100:	71fb      	strb	r3, [r7, #7]
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b09      	cmp	r3, #9
 8001106:	d9ee      	bls.n	80010e6 <grid_init+0x12>
    for (y = 0; y < GRID_HEIGHT; y++)
 8001108:	79bb      	ldrb	r3, [r7, #6]
 800110a:	3301      	adds	r3, #1
 800110c:	71bb      	strb	r3, [r7, #6]
 800110e:	79bb      	ldrb	r3, [r7, #6]
 8001110:	2b13      	cmp	r3, #19
 8001112:	d9e5      	bls.n	80010e0 <grid_init+0xc>
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000150 	.word	0x20000150

08001124 <sub_grid_init>:

void sub_grid_init()
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
	uint8_t x, y;
    for (y = 0; y < 4; y++)
 800112a:	2300      	movs	r3, #0
 800112c:	71bb      	strb	r3, [r7, #6]
 800112e:	e013      	b.n	8001158 <sub_grid_init+0x34>
        for (x = 0; x < 4; x++)
 8001130:	2300      	movs	r3, #0
 8001132:	71fb      	strb	r3, [r7, #7]
 8001134:	e00a      	b.n	800114c <sub_grid_init+0x28>
            sub_grid[y][x].isEmpty=1;
 8001136:	79ba      	ldrb	r2, [r7, #6]
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	490b      	ldr	r1, [pc, #44]	; (8001168 <sub_grid_init+0x44>)
 800113c:	0092      	lsls	r2, r2, #2
 800113e:	4413      	add	r3, r2
 8001140:	2201      	movs	r2, #1
 8001142:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
        for (x = 0; x < 4; x++)
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	3301      	adds	r3, #1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d9f1      	bls.n	8001136 <sub_grid_init+0x12>
    for (y = 0; y < 4; y++)
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	3301      	adds	r3, #1
 8001156:	71bb      	strb	r3, [r7, #6]
 8001158:	79bb      	ldrb	r3, [r7, #6]
 800115a:	2b03      	cmp	r3, #3
 800115c:	d9e8      	bls.n	8001130 <sub_grid_init+0xc>
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	20000470 	.word	0x20000470

0800116c <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <LCD_WR_REG+0x40>)
 8001178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800117c:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <LCD_WR_REG+0x40>)
 8001180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001184:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8001186:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <LCD_WR_REG+0x44>)
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <LCD_WR_REG+0x40>)
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <LCD_WR_REG+0x40>)
 8001194:	2280      	movs	r2, #128	; 0x80
 8001196:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <LCD_WR_REG+0x40>)
 800119a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800119e:	611a      	str	r2, [r3, #16]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40011000 	.word	0x40011000
 80011b0:	40010c00 	.word	0x40010c00

080011b4 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <LCD_WR_DATAX+0x40>)
 80011c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c4:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <LCD_WR_DATAX+0x40>)
 80011c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011cc:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <LCD_WR_DATAX+0x44>)
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <LCD_WR_DATAX+0x40>)
 80011d6:	2280      	movs	r2, #128	; 0x80
 80011d8:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <LCD_WR_DATAX+0x40>)
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <LCD_WR_DATAX+0x40>)
 80011e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e6:	611a      	str	r2, [r3, #16]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40011000 	.word	0x40011000
 80011f8:	40010c00 	.word	0x40010c00

080011fc <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8001202:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <LCD_RD_DATA+0x7c>)
 8001204:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8001208:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <LCD_RD_DATA+0x7c>)
 800120c:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8001210:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <LCD_RD_DATA+0x7c>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <LCD_RD_DATA+0x80>)
 800121a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800121e:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <LCD_RD_DATA+0x80>)
 8001222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001226:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <LCD_RD_DATA+0x80>)
 800122a:	2240      	movs	r2, #64	; 0x40
 800122c:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <LCD_RD_DATA+0x84>)
 8001230:	889b      	ldrh	r3, [r3, #4]
 8001232:	f648 1289 	movw	r2, #35209	; 0x8989
 8001236:	4293      	cmp	r3, r2
 8001238:	d102      	bne.n	8001240 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 800123a:	2001      	movs	r0, #1
 800123c:	f006 fe3a 	bl	8007eb4 <HAL_Delay>
	t = DATAIN
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <LCD_RD_DATA+0x7c>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <LCD_RD_DATA+0x80>)
 8001248:	2240      	movs	r2, #64	; 0x40
 800124a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <LCD_RD_DATA+0x80>)
 800124e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001252:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <LCD_RD_DATA+0x7c>)
 8001256:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800125a:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <LCD_RD_DATA+0x7c>)
 800125e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001262:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <LCD_RD_DATA+0x7c>)
 8001266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800126a:	60da      	str	r2, [r3, #12]
	return t;
 800126c:	88fb      	ldrh	r3, [r7, #6]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40010c00 	.word	0x40010c00
 800127c:	40011000 	.word	0x40011000
 8001280:	200004b0 	.word	0x200004b0

08001284 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	460a      	mov	r2, r1
 800128e:	80fb      	strh	r3, [r7, #6]
 8001290:	4613      	mov	r3, r2
 8001292:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8001294:	88fb      	ldrh	r3, [r7, #6]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff68 	bl	800116c <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <LCD_WriteReg+0x4c>)
 800129e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <LCD_WriteReg+0x4c>)
 80012a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012aa:	615a      	str	r2, [r3, #20]
 80012ac:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <LCD_WriteReg+0x50>)
 80012ae:	88bb      	ldrh	r3, [r7, #4]
 80012b0:	60d3      	str	r3, [r2, #12]
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <LCD_WriteReg+0x4c>)
 80012b4:	2280      	movs	r2, #128	; 0x80
 80012b6:	615a      	str	r2, [r3, #20]
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <LCD_WriteReg+0x4c>)
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	611a      	str	r2, [r3, #16]
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <LCD_WriteReg+0x4c>)
 80012c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c4:	611a      	str	r2, [r3, #16]
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40011000 	.word	0x40011000
 80012d4:	40010c00 	.word	0x40010c00

080012d8 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff41 	bl	800116c <LCD_WR_REG>
	return LCD_RD_DATA();
 80012ea:	f7ff ff87 	bl	80011fc <LCD_RD_DATA>
 80012ee:	4603      	mov	r3, r0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <LCD_WriteRAM_Prepare+0x14>)
 80012fe:	891b      	ldrh	r3, [r3, #8]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff33 	bl	800116c <LCD_WR_REG>
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200004b0 	.word	0x200004b0

08001310 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	460a      	mov	r2, r1
 800131a:	80fb      	strh	r3, [r7, #6]
 800131c:	4613      	mov	r3, r2
 800131e:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001320:	4b73      	ldr	r3, [pc, #460]	; (80014f0 <LCD_SetCursor+0x1e0>)
 8001322:	889b      	ldrh	r3, [r3, #4]
 8001324:	f249 3241 	movw	r2, #37697	; 0x9341
 8001328:	4293      	cmp	r3, r2
 800132a:	d005      	beq.n	8001338 <LCD_SetCursor+0x28>
 800132c:	4b70      	ldr	r3, [pc, #448]	; (80014f0 <LCD_SetCursor+0x1e0>)
 800132e:	889b      	ldrh	r3, [r3, #4]
 8001330:	f245 3210 	movw	r2, #21264	; 0x5310
 8001334:	4293      	cmp	r3, r2
 8001336:	d164      	bne.n	8001402 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8001338:	4b6d      	ldr	r3, [pc, #436]	; (80014f0 <LCD_SetCursor+0x1e0>)
 800133a:	895b      	ldrh	r3, [r3, #10]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff15 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8001342:	4b6c      	ldr	r3, [pc, #432]	; (80014f4 <LCD_SetCursor+0x1e4>)
 8001344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001348:	611a      	str	r2, [r3, #16]
 800134a:	4b6a      	ldr	r3, [pc, #424]	; (80014f4 <LCD_SetCursor+0x1e4>)
 800134c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001350:	615a      	str	r2, [r3, #20]
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	b29a      	uxth	r2, r3
 8001358:	4b67      	ldr	r3, [pc, #412]	; (80014f8 <LCD_SetCursor+0x1e8>)
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	4b65      	ldr	r3, [pc, #404]	; (80014f4 <LCD_SetCursor+0x1e4>)
 800135e:	2280      	movs	r2, #128	; 0x80
 8001360:	615a      	str	r2, [r3, #20]
 8001362:	4b64      	ldr	r3, [pc, #400]	; (80014f4 <LCD_SetCursor+0x1e4>)
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	611a      	str	r2, [r3, #16]
 8001368:	4b62      	ldr	r3, [pc, #392]	; (80014f4 <LCD_SetCursor+0x1e4>)
 800136a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8001370:	4b60      	ldr	r3, [pc, #384]	; (80014f4 <LCD_SetCursor+0x1e4>)
 8001372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001376:	611a      	str	r2, [r3, #16]
 8001378:	4b5e      	ldr	r3, [pc, #376]	; (80014f4 <LCD_SetCursor+0x1e4>)
 800137a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800137e:	615a      	str	r2, [r3, #20]
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	4a5d      	ldr	r2, [pc, #372]	; (80014f8 <LCD_SetCursor+0x1e8>)
 8001384:	b2db      	uxtb	r3, r3
 8001386:	60d3      	str	r3, [r2, #12]
 8001388:	4b5a      	ldr	r3, [pc, #360]	; (80014f4 <LCD_SetCursor+0x1e4>)
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	615a      	str	r2, [r3, #20]
 800138e:	4b59      	ldr	r3, [pc, #356]	; (80014f4 <LCD_SetCursor+0x1e4>)
 8001390:	2280      	movs	r2, #128	; 0x80
 8001392:	611a      	str	r2, [r3, #16]
 8001394:	4b57      	ldr	r3, [pc, #348]	; (80014f4 <LCD_SetCursor+0x1e4>)
 8001396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800139a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800139c:	4b54      	ldr	r3, [pc, #336]	; (80014f0 <LCD_SetCursor+0x1e0>)
 800139e:	899b      	ldrh	r3, [r3, #12]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fee3 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80013a6:	4b53      	ldr	r3, [pc, #332]	; (80014f4 <LCD_SetCursor+0x1e4>)
 80013a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ac:	611a      	str	r2, [r3, #16]
 80013ae:	4b51      	ldr	r3, [pc, #324]	; (80014f4 <LCD_SetCursor+0x1e4>)
 80013b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b4:	615a      	str	r2, [r3, #20]
 80013b6:	88bb      	ldrh	r3, [r7, #4]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b4e      	ldr	r3, [pc, #312]	; (80014f8 <LCD_SetCursor+0x1e8>)
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	4b4c      	ldr	r3, [pc, #304]	; (80014f4 <LCD_SetCursor+0x1e4>)
 80013c2:	2280      	movs	r2, #128	; 0x80
 80013c4:	615a      	str	r2, [r3, #20]
 80013c6:	4b4b      	ldr	r3, [pc, #300]	; (80014f4 <LCD_SetCursor+0x1e4>)
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	611a      	str	r2, [r3, #16]
 80013cc:	4b49      	ldr	r3, [pc, #292]	; (80014f4 <LCD_SetCursor+0x1e4>)
 80013ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 80013d4:	4b47      	ldr	r3, [pc, #284]	; (80014f4 <LCD_SetCursor+0x1e4>)
 80013d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	4b45      	ldr	r3, [pc, #276]	; (80014f4 <LCD_SetCursor+0x1e4>)
 80013de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e2:	615a      	str	r2, [r3, #20]
 80013e4:	88bb      	ldrh	r3, [r7, #4]
 80013e6:	4a44      	ldr	r2, [pc, #272]	; (80014f8 <LCD_SetCursor+0x1e8>)
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	60d3      	str	r3, [r2, #12]
 80013ec:	4b41      	ldr	r3, [pc, #260]	; (80014f4 <LCD_SetCursor+0x1e4>)
 80013ee:	2280      	movs	r2, #128	; 0x80
 80013f0:	615a      	str	r2, [r3, #20]
 80013f2:	4b40      	ldr	r3, [pc, #256]	; (80014f4 <LCD_SetCursor+0x1e4>)
 80013f4:	2280      	movs	r2, #128	; 0x80
 80013f6:	611a      	str	r2, [r3, #16]
 80013f8:	4b3e      	ldr	r3, [pc, #248]	; (80014f4 <LCD_SetCursor+0x1e4>)
 80013fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013fe:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8001400:	e248      	b.n	8001894 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8001402:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <LCD_SetCursor+0x1e0>)
 8001404:	889b      	ldrh	r3, [r3, #4]
 8001406:	f646 0204 	movw	r2, #26628	; 0x6804
 800140a:	4293      	cmp	r3, r2
 800140c:	d176      	bne.n	80014fc <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 800140e:	4b38      	ldr	r3, [pc, #224]	; (80014f0 <LCD_SetCursor+0x1e0>)
 8001410:	799b      	ldrb	r3, [r3, #6]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d106      	bne.n	8001424 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8001416:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <LCD_SetCursor+0x1e0>)
 8001418:	881a      	ldrh	r2, [r3, #0]
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	b29b      	uxth	r3, r3
 8001420:	3b01      	subs	r3, #1
 8001422:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001424:	4b32      	ldr	r3, [pc, #200]	; (80014f0 <LCD_SetCursor+0x1e0>)
 8001426:	895b      	ldrh	r3, [r3, #10]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fe9f 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 800142e:	4b31      	ldr	r3, [pc, #196]	; (80014f4 <LCD_SetCursor+0x1e4>)
 8001430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001434:	611a      	str	r2, [r3, #16]
 8001436:	4b2f      	ldr	r3, [pc, #188]	; (80014f4 <LCD_SetCursor+0x1e4>)
 8001438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800143c:	615a      	str	r2, [r3, #20]
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	0a1b      	lsrs	r3, r3, #8
 8001442:	b29a      	uxth	r2, r3
 8001444:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <LCD_SetCursor+0x1e8>)
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <LCD_SetCursor+0x1e4>)
 800144a:	2280      	movs	r2, #128	; 0x80
 800144c:	615a      	str	r2, [r3, #20]
 800144e:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <LCD_SetCursor+0x1e4>)
 8001450:	2280      	movs	r2, #128	; 0x80
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <LCD_SetCursor+0x1e4>)
 8001456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 800145c:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <LCD_SetCursor+0x1e4>)
 800145e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001462:	611a      	str	r2, [r3, #16]
 8001464:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <LCD_SetCursor+0x1e4>)
 8001466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146a:	615a      	str	r2, [r3, #20]
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	4a22      	ldr	r2, [pc, #136]	; (80014f8 <LCD_SetCursor+0x1e8>)
 8001470:	b2db      	uxtb	r3, r3
 8001472:	60d3      	str	r3, [r2, #12]
 8001474:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <LCD_SetCursor+0x1e4>)
 8001476:	2280      	movs	r2, #128	; 0x80
 8001478:	615a      	str	r2, [r3, #20]
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <LCD_SetCursor+0x1e4>)
 800147c:	2280      	movs	r2, #128	; 0x80
 800147e:	611a      	str	r2, [r3, #16]
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <LCD_SetCursor+0x1e4>)
 8001482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001486:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <LCD_SetCursor+0x1e0>)
 800148a:	899b      	ldrh	r3, [r3, #12]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fe6d 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <LCD_SetCursor+0x1e4>)
 8001494:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <LCD_SetCursor+0x1e4>)
 800149c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a0:	615a      	str	r2, [r3, #20]
 80014a2:	88bb      	ldrh	r3, [r7, #4]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <LCD_SetCursor+0x1e8>)
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <LCD_SetCursor+0x1e4>)
 80014ae:	2280      	movs	r2, #128	; 0x80
 80014b0:	615a      	str	r2, [r3, #20]
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <LCD_SetCursor+0x1e4>)
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	611a      	str	r2, [r3, #16]
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <LCD_SetCursor+0x1e4>)
 80014ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014be:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <LCD_SetCursor+0x1e4>)
 80014c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c6:	611a      	str	r2, [r3, #16]
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <LCD_SetCursor+0x1e4>)
 80014ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ce:	615a      	str	r2, [r3, #20]
 80014d0:	88bb      	ldrh	r3, [r7, #4]
 80014d2:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <LCD_SetCursor+0x1e8>)
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	60d3      	str	r3, [r2, #12]
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <LCD_SetCursor+0x1e4>)
 80014da:	2280      	movs	r2, #128	; 0x80
 80014dc:	615a      	str	r2, [r3, #20]
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <LCD_SetCursor+0x1e4>)
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	611a      	str	r2, [r3, #16]
 80014e4:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <LCD_SetCursor+0x1e4>)
 80014e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ea:	611a      	str	r2, [r3, #16]
}
 80014ec:	e1d2      	b.n	8001894 <LCD_SetCursor+0x584>
 80014ee:	bf00      	nop
 80014f0:	200004b0 	.word	0x200004b0
 80014f4:	40011000 	.word	0x40011000
 80014f8:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 80014fc:	4b99      	ldr	r3, [pc, #612]	; (8001764 <LCD_SetCursor+0x454>)
 80014fe:	889b      	ldrh	r3, [r3, #4]
 8001500:	f641 1263 	movw	r2, #6499	; 0x1963
 8001504:	4293      	cmp	r3, r2
 8001506:	f040 8133 	bne.w	8001770 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 800150a:	4b96      	ldr	r3, [pc, #600]	; (8001764 <LCD_SetCursor+0x454>)
 800150c:	799b      	ldrb	r3, [r3, #6]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d163      	bne.n	80015da <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8001512:	4b94      	ldr	r3, [pc, #592]	; (8001764 <LCD_SetCursor+0x454>)
 8001514:	881a      	ldrh	r2, [r3, #0]
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	b29b      	uxth	r3, r3
 800151c:	3b01      	subs	r3, #1
 800151e:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8001520:	4b90      	ldr	r3, [pc, #576]	; (8001764 <LCD_SetCursor+0x454>)
 8001522:	895b      	ldrh	r3, [r3, #10]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fe21 	bl	800116c <LCD_WR_REG>
			LCD_WR_DATA(0);
 800152a:	4b8f      	ldr	r3, [pc, #572]	; (8001768 <LCD_SetCursor+0x458>)
 800152c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	4b8d      	ldr	r3, [pc, #564]	; (8001768 <LCD_SetCursor+0x458>)
 8001534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001538:	615a      	str	r2, [r3, #20]
 800153a:	4b8c      	ldr	r3, [pc, #560]	; (800176c <LCD_SetCursor+0x45c>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	4b89      	ldr	r3, [pc, #548]	; (8001768 <LCD_SetCursor+0x458>)
 8001542:	2280      	movs	r2, #128	; 0x80
 8001544:	615a      	str	r2, [r3, #20]
 8001546:	4b88      	ldr	r3, [pc, #544]	; (8001768 <LCD_SetCursor+0x458>)
 8001548:	2280      	movs	r2, #128	; 0x80
 800154a:	611a      	str	r2, [r3, #16]
 800154c:	4b86      	ldr	r3, [pc, #536]	; (8001768 <LCD_SetCursor+0x458>)
 800154e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001552:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001554:	4b84      	ldr	r3, [pc, #528]	; (8001768 <LCD_SetCursor+0x458>)
 8001556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800155a:	611a      	str	r2, [r3, #16]
 800155c:	4b82      	ldr	r3, [pc, #520]	; (8001768 <LCD_SetCursor+0x458>)
 800155e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001562:	615a      	str	r2, [r3, #20]
 8001564:	4b81      	ldr	r3, [pc, #516]	; (800176c <LCD_SetCursor+0x45c>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	4b7f      	ldr	r3, [pc, #508]	; (8001768 <LCD_SetCursor+0x458>)
 800156c:	2280      	movs	r2, #128	; 0x80
 800156e:	615a      	str	r2, [r3, #20]
 8001570:	4b7d      	ldr	r3, [pc, #500]	; (8001768 <LCD_SetCursor+0x458>)
 8001572:	2280      	movs	r2, #128	; 0x80
 8001574:	611a      	str	r2, [r3, #16]
 8001576:	4b7c      	ldr	r3, [pc, #496]	; (8001768 <LCD_SetCursor+0x458>)
 8001578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 800157e:	4b7a      	ldr	r3, [pc, #488]	; (8001768 <LCD_SetCursor+0x458>)
 8001580:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001584:	611a      	str	r2, [r3, #16]
 8001586:	4b78      	ldr	r3, [pc, #480]	; (8001768 <LCD_SetCursor+0x458>)
 8001588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800158c:	615a      	str	r2, [r3, #20]
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b75      	ldr	r3, [pc, #468]	; (800176c <LCD_SetCursor+0x45c>)
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	4b73      	ldr	r3, [pc, #460]	; (8001768 <LCD_SetCursor+0x458>)
 800159a:	2280      	movs	r2, #128	; 0x80
 800159c:	615a      	str	r2, [r3, #20]
 800159e:	4b72      	ldr	r3, [pc, #456]	; (8001768 <LCD_SetCursor+0x458>)
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	611a      	str	r2, [r3, #16]
 80015a4:	4b70      	ldr	r3, [pc, #448]	; (8001768 <LCD_SetCursor+0x458>)
 80015a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015aa:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 80015ac:	4b6e      	ldr	r3, [pc, #440]	; (8001768 <LCD_SetCursor+0x458>)
 80015ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	4b6c      	ldr	r3, [pc, #432]	; (8001768 <LCD_SetCursor+0x458>)
 80015b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ba:	615a      	str	r2, [r3, #20]
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	4a6b      	ldr	r2, [pc, #428]	; (800176c <LCD_SetCursor+0x45c>)
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	60d3      	str	r3, [r2, #12]
 80015c4:	4b68      	ldr	r3, [pc, #416]	; (8001768 <LCD_SetCursor+0x458>)
 80015c6:	2280      	movs	r2, #128	; 0x80
 80015c8:	615a      	str	r2, [r3, #20]
 80015ca:	4b67      	ldr	r3, [pc, #412]	; (8001768 <LCD_SetCursor+0x458>)
 80015cc:	2280      	movs	r2, #128	; 0x80
 80015ce:	611a      	str	r2, [r3, #16]
 80015d0:	4b65      	ldr	r3, [pc, #404]	; (8001768 <LCD_SetCursor+0x458>)
 80015d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d6:	611a      	str	r2, [r3, #16]
 80015d8:	e061      	b.n	800169e <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 80015da:	4b62      	ldr	r3, [pc, #392]	; (8001764 <LCD_SetCursor+0x454>)
 80015dc:	895b      	ldrh	r3, [r3, #10]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fdc4 	bl	800116c <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 80015e4:	4b60      	ldr	r3, [pc, #384]	; (8001768 <LCD_SetCursor+0x458>)
 80015e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	4b5e      	ldr	r3, [pc, #376]	; (8001768 <LCD_SetCursor+0x458>)
 80015ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f2:	615a      	str	r2, [r3, #20]
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	0a1b      	lsrs	r3, r3, #8
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b5c      	ldr	r3, [pc, #368]	; (800176c <LCD_SetCursor+0x45c>)
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	4b5a      	ldr	r3, [pc, #360]	; (8001768 <LCD_SetCursor+0x458>)
 8001600:	2280      	movs	r2, #128	; 0x80
 8001602:	615a      	str	r2, [r3, #20]
 8001604:	4b58      	ldr	r3, [pc, #352]	; (8001768 <LCD_SetCursor+0x458>)
 8001606:	2280      	movs	r2, #128	; 0x80
 8001608:	611a      	str	r2, [r3, #16]
 800160a:	4b57      	ldr	r3, [pc, #348]	; (8001768 <LCD_SetCursor+0x458>)
 800160c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001610:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8001612:	4b55      	ldr	r3, [pc, #340]	; (8001768 <LCD_SetCursor+0x458>)
 8001614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001618:	611a      	str	r2, [r3, #16]
 800161a:	4b53      	ldr	r3, [pc, #332]	; (8001768 <LCD_SetCursor+0x458>)
 800161c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001620:	615a      	str	r2, [r3, #20]
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	4a51      	ldr	r2, [pc, #324]	; (800176c <LCD_SetCursor+0x45c>)
 8001626:	b2db      	uxtb	r3, r3
 8001628:	60d3      	str	r3, [r2, #12]
 800162a:	4b4f      	ldr	r3, [pc, #316]	; (8001768 <LCD_SetCursor+0x458>)
 800162c:	2280      	movs	r2, #128	; 0x80
 800162e:	615a      	str	r2, [r3, #20]
 8001630:	4b4d      	ldr	r3, [pc, #308]	; (8001768 <LCD_SetCursor+0x458>)
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	611a      	str	r2, [r3, #16]
 8001636:	4b4c      	ldr	r3, [pc, #304]	; (8001768 <LCD_SetCursor+0x458>)
 8001638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800163e:	4b4a      	ldr	r3, [pc, #296]	; (8001768 <LCD_SetCursor+0x458>)
 8001640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001644:	611a      	str	r2, [r3, #16]
 8001646:	4b48      	ldr	r3, [pc, #288]	; (8001768 <LCD_SetCursor+0x458>)
 8001648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800164c:	615a      	str	r2, [r3, #20]
 800164e:	4b45      	ldr	r3, [pc, #276]	; (8001764 <LCD_SetCursor+0x454>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	3b01      	subs	r3, #1
 8001654:	121a      	asrs	r2, r3, #8
 8001656:	4b45      	ldr	r3, [pc, #276]	; (800176c <LCD_SetCursor+0x45c>)
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	4b43      	ldr	r3, [pc, #268]	; (8001768 <LCD_SetCursor+0x458>)
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	615a      	str	r2, [r3, #20]
 8001660:	4b41      	ldr	r3, [pc, #260]	; (8001768 <LCD_SetCursor+0x458>)
 8001662:	2280      	movs	r2, #128	; 0x80
 8001664:	611a      	str	r2, [r3, #16]
 8001666:	4b40      	ldr	r3, [pc, #256]	; (8001768 <LCD_SetCursor+0x458>)
 8001668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800166c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800166e:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <LCD_SetCursor+0x458>)
 8001670:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001674:	611a      	str	r2, [r3, #16]
 8001676:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <LCD_SetCursor+0x458>)
 8001678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167c:	615a      	str	r2, [r3, #20]
 800167e:	4b39      	ldr	r3, [pc, #228]	; (8001764 <LCD_SetCursor+0x454>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	3b01      	subs	r3, #1
 8001684:	4a39      	ldr	r2, [pc, #228]	; (800176c <LCD_SetCursor+0x45c>)
 8001686:	b2db      	uxtb	r3, r3
 8001688:	60d3      	str	r3, [r2, #12]
 800168a:	4b37      	ldr	r3, [pc, #220]	; (8001768 <LCD_SetCursor+0x458>)
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	615a      	str	r2, [r3, #20]
 8001690:	4b35      	ldr	r3, [pc, #212]	; (8001768 <LCD_SetCursor+0x458>)
 8001692:	2280      	movs	r2, #128	; 0x80
 8001694:	611a      	str	r2, [r3, #16]
 8001696:	4b34      	ldr	r3, [pc, #208]	; (8001768 <LCD_SetCursor+0x458>)
 8001698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800169e:	4b31      	ldr	r3, [pc, #196]	; (8001764 <LCD_SetCursor+0x454>)
 80016a0:	899b      	ldrh	r3, [r3, #12]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fd62 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80016a8:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <LCD_SetCursor+0x458>)
 80016aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ae:	611a      	str	r2, [r3, #16]
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <LCD_SetCursor+0x458>)
 80016b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b6:	615a      	str	r2, [r3, #20]
 80016b8:	88bb      	ldrh	r3, [r7, #4]
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	b29a      	uxth	r2, r3
 80016be:	4b2b      	ldr	r3, [pc, #172]	; (800176c <LCD_SetCursor+0x45c>)
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	4b29      	ldr	r3, [pc, #164]	; (8001768 <LCD_SetCursor+0x458>)
 80016c4:	2280      	movs	r2, #128	; 0x80
 80016c6:	615a      	str	r2, [r3, #20]
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <LCD_SetCursor+0x458>)
 80016ca:	2280      	movs	r2, #128	; 0x80
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	4b26      	ldr	r3, [pc, #152]	; (8001768 <LCD_SetCursor+0x458>)
 80016d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 80016d6:	4b24      	ldr	r3, [pc, #144]	; (8001768 <LCD_SetCursor+0x458>)
 80016d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016dc:	611a      	str	r2, [r3, #16]
 80016de:	4b22      	ldr	r3, [pc, #136]	; (8001768 <LCD_SetCursor+0x458>)
 80016e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e4:	615a      	str	r2, [r3, #20]
 80016e6:	88bb      	ldrh	r3, [r7, #4]
 80016e8:	4a20      	ldr	r2, [pc, #128]	; (800176c <LCD_SetCursor+0x45c>)
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	60d3      	str	r3, [r2, #12]
 80016ee:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <LCD_SetCursor+0x458>)
 80016f0:	2280      	movs	r2, #128	; 0x80
 80016f2:	615a      	str	r2, [r3, #20]
 80016f4:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <LCD_SetCursor+0x458>)
 80016f6:	2280      	movs	r2, #128	; 0x80
 80016f8:	611a      	str	r2, [r3, #16]
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <LCD_SetCursor+0x458>)
 80016fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001700:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <LCD_SetCursor+0x458>)
 8001704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001708:	611a      	str	r2, [r3, #16]
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <LCD_SetCursor+0x458>)
 800170c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001710:	615a      	str	r2, [r3, #20]
 8001712:	4b14      	ldr	r3, [pc, #80]	; (8001764 <LCD_SetCursor+0x454>)
 8001714:	885b      	ldrh	r3, [r3, #2]
 8001716:	3b01      	subs	r3, #1
 8001718:	121a      	asrs	r2, r3, #8
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <LCD_SetCursor+0x45c>)
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <LCD_SetCursor+0x458>)
 8001720:	2280      	movs	r2, #128	; 0x80
 8001722:	615a      	str	r2, [r3, #20]
 8001724:	4b10      	ldr	r3, [pc, #64]	; (8001768 <LCD_SetCursor+0x458>)
 8001726:	2280      	movs	r2, #128	; 0x80
 8001728:	611a      	str	r2, [r3, #16]
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <LCD_SetCursor+0x458>)
 800172c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001730:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <LCD_SetCursor+0x458>)
 8001734:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001738:	611a      	str	r2, [r3, #16]
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <LCD_SetCursor+0x458>)
 800173c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001740:	615a      	str	r2, [r3, #20]
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <LCD_SetCursor+0x454>)
 8001744:	885b      	ldrh	r3, [r3, #2]
 8001746:	3b01      	subs	r3, #1
 8001748:	4a08      	ldr	r2, [pc, #32]	; (800176c <LCD_SetCursor+0x45c>)
 800174a:	b2db      	uxtb	r3, r3
 800174c:	60d3      	str	r3, [r2, #12]
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <LCD_SetCursor+0x458>)
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	615a      	str	r2, [r3, #20]
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <LCD_SetCursor+0x458>)
 8001756:	2280      	movs	r2, #128	; 0x80
 8001758:	611a      	str	r2, [r3, #16]
 800175a:	4b03      	ldr	r3, [pc, #12]	; (8001768 <LCD_SetCursor+0x458>)
 800175c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001760:	611a      	str	r2, [r3, #16]
}
 8001762:	e097      	b.n	8001894 <LCD_SetCursor+0x584>
 8001764:	200004b0 	.word	0x200004b0
 8001768:	40011000 	.word	0x40011000
 800176c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8001770:	4b4a      	ldr	r3, [pc, #296]	; (800189c <LCD_SetCursor+0x58c>)
 8001772:	889b      	ldrh	r3, [r3, #4]
 8001774:	f245 5210 	movw	r2, #21776	; 0x5510
 8001778:	4293      	cmp	r3, r2
 800177a:	d172      	bne.n	8001862 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 800177c:	4b47      	ldr	r3, [pc, #284]	; (800189c <LCD_SetCursor+0x58c>)
 800177e:	895b      	ldrh	r3, [r3, #10]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fcf3 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8001786:	4b46      	ldr	r3, [pc, #280]	; (80018a0 <LCD_SetCursor+0x590>)
 8001788:	f44f 7280 	mov.w	r2, #256	; 0x100
 800178c:	611a      	str	r2, [r3, #16]
 800178e:	4b44      	ldr	r3, [pc, #272]	; (80018a0 <LCD_SetCursor+0x590>)
 8001790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001794:	615a      	str	r2, [r3, #20]
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	b29a      	uxth	r2, r3
 800179c:	4b41      	ldr	r3, [pc, #260]	; (80018a4 <LCD_SetCursor+0x594>)
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	4b3f      	ldr	r3, [pc, #252]	; (80018a0 <LCD_SetCursor+0x590>)
 80017a2:	2280      	movs	r2, #128	; 0x80
 80017a4:	615a      	str	r2, [r3, #20]
 80017a6:	4b3e      	ldr	r3, [pc, #248]	; (80018a0 <LCD_SetCursor+0x590>)
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	611a      	str	r2, [r3, #16]
 80017ac:	4b3c      	ldr	r3, [pc, #240]	; (80018a0 <LCD_SetCursor+0x590>)
 80017ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b2:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 80017b4:	4b39      	ldr	r3, [pc, #228]	; (800189c <LCD_SetCursor+0x58c>)
 80017b6:	895b      	ldrh	r3, [r3, #10]
 80017b8:	3301      	adds	r3, #1
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fcd5 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 80017c2:	4b37      	ldr	r3, [pc, #220]	; (80018a0 <LCD_SetCursor+0x590>)
 80017c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c8:	611a      	str	r2, [r3, #16]
 80017ca:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <LCD_SetCursor+0x590>)
 80017cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d0:	615a      	str	r2, [r3, #20]
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	4a33      	ldr	r2, [pc, #204]	; (80018a4 <LCD_SetCursor+0x594>)
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	60d3      	str	r3, [r2, #12]
 80017da:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <LCD_SetCursor+0x590>)
 80017dc:	2280      	movs	r2, #128	; 0x80
 80017de:	615a      	str	r2, [r3, #20]
 80017e0:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <LCD_SetCursor+0x590>)
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	611a      	str	r2, [r3, #16]
 80017e6:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <LCD_SetCursor+0x590>)
 80017e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ec:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80017ee:	4b2b      	ldr	r3, [pc, #172]	; (800189c <LCD_SetCursor+0x58c>)
 80017f0:	899b      	ldrh	r3, [r3, #12]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fcba 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80017f8:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <LCD_SetCursor+0x590>)
 80017fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017fe:	611a      	str	r2, [r3, #16]
 8001800:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <LCD_SetCursor+0x590>)
 8001802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001806:	615a      	str	r2, [r3, #20]
 8001808:	88bb      	ldrh	r3, [r7, #4]
 800180a:	0a1b      	lsrs	r3, r3, #8
 800180c:	b29a      	uxth	r2, r3
 800180e:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <LCD_SetCursor+0x594>)
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <LCD_SetCursor+0x590>)
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	615a      	str	r2, [r3, #20]
 8001818:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <LCD_SetCursor+0x590>)
 800181a:	2280      	movs	r2, #128	; 0x80
 800181c:	611a      	str	r2, [r3, #16]
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <LCD_SetCursor+0x590>)
 8001820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001824:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001826:	4b1d      	ldr	r3, [pc, #116]	; (800189c <LCD_SetCursor+0x58c>)
 8001828:	899b      	ldrh	r3, [r3, #12]
 800182a:	3301      	adds	r3, #1
 800182c:	b29b      	uxth	r3, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fc9c 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8001834:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <LCD_SetCursor+0x590>)
 8001836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800183a:	611a      	str	r2, [r3, #16]
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <LCD_SetCursor+0x590>)
 800183e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001842:	615a      	str	r2, [r3, #20]
 8001844:	88bb      	ldrh	r3, [r7, #4]
 8001846:	4a17      	ldr	r2, [pc, #92]	; (80018a4 <LCD_SetCursor+0x594>)
 8001848:	b2db      	uxtb	r3, r3
 800184a:	60d3      	str	r3, [r2, #12]
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <LCD_SetCursor+0x590>)
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	615a      	str	r2, [r3, #20]
 8001852:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <LCD_SetCursor+0x590>)
 8001854:	2280      	movs	r2, #128	; 0x80
 8001856:	611a      	str	r2, [r3, #16]
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <LCD_SetCursor+0x590>)
 800185a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800185e:	611a      	str	r2, [r3, #16]
}
 8001860:	e018      	b.n	8001894 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <LCD_SetCursor+0x58c>)
 8001864:	799b      	ldrb	r3, [r3, #6]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d106      	bne.n	8001878 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <LCD_SetCursor+0x58c>)
 800186c:	881a      	ldrh	r2, [r3, #0]
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	b29b      	uxth	r3, r3
 8001874:	3b01      	subs	r3, #1
 8001876:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <LCD_SetCursor+0x58c>)
 800187a:	895b      	ldrh	r3, [r3, #10]
 800187c:	88fa      	ldrh	r2, [r7, #6]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fcff 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <LCD_SetCursor+0x58c>)
 8001888:	899b      	ldrh	r3, [r3, #12]
 800188a:	88ba      	ldrh	r2, [r7, #4]
 800188c:	4611      	mov	r1, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fcf8 	bl	8001284 <LCD_WriteReg>
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200004b0 	.word	0x200004b0
 80018a0:	40011000 	.word	0x40011000
 80018a4:	40010c00 	.word	0x40010c00

080018a8 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 80018ba:	4b78      	ldr	r3, [pc, #480]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 80018bc:	799b      	ldrb	r3, [r3, #6]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d10b      	bne.n	80018da <LCD_Scan_Dir+0x32>
 80018c2:	4b76      	ldr	r3, [pc, #472]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 80018c4:	889b      	ldrh	r3, [r3, #4]
 80018c6:	f646 0204 	movw	r2, #26628	; 0x6804
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d005      	beq.n	80018da <LCD_Scan_Dir+0x32>
 80018ce:	4b73      	ldr	r3, [pc, #460]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 80018d0:	889b      	ldrh	r3, [r3, #4]
 80018d2:	f641 1263 	movw	r2, #6499	; 0x1963
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d109      	bne.n	80018ee <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 80018da:	4b70      	ldr	r3, [pc, #448]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 80018dc:	799b      	ldrb	r3, [r3, #6]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d134      	bne.n	800194c <LCD_Scan_Dir+0xa4>
 80018e2:	4b6e      	ldr	r3, [pc, #440]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 80018e4:	889b      	ldrh	r3, [r3, #4]
 80018e6:	f641 1263 	movw	r2, #6499	; 0x1963
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d12e      	bne.n	800194c <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	2b07      	cmp	r3, #7
 80018f2:	d82b      	bhi.n	800194c <LCD_Scan_Dir+0xa4>
 80018f4:	a201      	add	r2, pc, #4	; (adr r2, 80018fc <LCD_Scan_Dir+0x54>)
 80018f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fa:	bf00      	nop
 80018fc:	0800191d 	.word	0x0800191d
 8001900:	08001923 	.word	0x08001923
 8001904:	08001929 	.word	0x08001929
 8001908:	0800192f 	.word	0x0800192f
 800190c:	08001935 	.word	0x08001935
 8001910:	0800193b 	.word	0x0800193b
 8001914:	08001941 	.word	0x08001941
 8001918:	08001947 	.word	0x08001947
		{
		case 0:
			dir = 6;
 800191c:	2306      	movs	r3, #6
 800191e:	71fb      	strb	r3, [r7, #7]
			break;
 8001920:	e014      	b.n	800194c <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 8001922:	2307      	movs	r3, #7
 8001924:	71fb      	strb	r3, [r7, #7]
			break;
 8001926:	e011      	b.n	800194c <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 8001928:	2304      	movs	r3, #4
 800192a:	71fb      	strb	r3, [r7, #7]
			break;
 800192c:	e00e      	b.n	800194c <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 800192e:	2305      	movs	r3, #5
 8001930:	71fb      	strb	r3, [r7, #7]
			break;
 8001932:	e00b      	b.n	800194c <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8001934:	2301      	movs	r3, #1
 8001936:	71fb      	strb	r3, [r7, #7]
			break;
 8001938:	e008      	b.n	800194c <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	71fb      	strb	r3, [r7, #7]
			break;
 800193e:	e005      	b.n	800194c <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 8001940:	2303      	movs	r3, #3
 8001942:	71fb      	strb	r3, [r7, #7]
			break;
 8001944:	e002      	b.n	800194c <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 8001946:	2302      	movs	r3, #2
 8001948:	71fb      	strb	r3, [r7, #7]
			break;
 800194a:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 800194c:	4b53      	ldr	r3, [pc, #332]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 800194e:	889b      	ldrh	r3, [r3, #4]
 8001950:	f249 3241 	movw	r2, #37697	; 0x9341
 8001954:	4293      	cmp	r3, r2
 8001956:	d018      	beq.n	800198a <LCD_Scan_Dir+0xe2>
 8001958:	4b50      	ldr	r3, [pc, #320]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 800195a:	889b      	ldrh	r3, [r3, #4]
 800195c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001960:	4293      	cmp	r3, r2
 8001962:	d012      	beq.n	800198a <LCD_Scan_Dir+0xe2>
 8001964:	4b4d      	ldr	r3, [pc, #308]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 8001966:	889b      	ldrh	r3, [r3, #4]
 8001968:	f245 3210 	movw	r2, #21264	; 0x5310
 800196c:	4293      	cmp	r3, r2
 800196e:	d00c      	beq.n	800198a <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8001970:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 8001972:	889b      	ldrh	r3, [r3, #4]
 8001974:	f245 5210 	movw	r2, #21776	; 0x5510
 8001978:	4293      	cmp	r3, r2
 800197a:	d006      	beq.n	800198a <LCD_Scan_Dir+0xe2>
 800197c:	4b47      	ldr	r3, [pc, #284]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 800197e:	889b      	ldrh	r3, [r3, #4]
 8001980:	f641 1263 	movw	r2, #6499	; 0x1963
 8001984:	4293      	cmp	r3, r2
 8001986:	f040 8250 	bne.w	8001e2a <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b07      	cmp	r3, #7
 800198e:	d836      	bhi.n	80019fe <LCD_Scan_Dir+0x156>
 8001990:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <LCD_Scan_Dir+0xf0>)
 8001992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001996:	bf00      	nop
 8001998:	080019ff 	.word	0x080019ff
 800199c:	080019b9 	.word	0x080019b9
 80019a0:	080019c3 	.word	0x080019c3
 80019a4:	080019cd 	.word	0x080019cd
 80019a8:	080019d7 	.word	0x080019d7
 80019ac:	080019e1 	.word	0x080019e1
 80019b0:	080019eb 	.word	0x080019eb
 80019b4:	080019f5 	.word	0x080019f5
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80019b8:	89fb      	ldrh	r3, [r7, #14]
 80019ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019be:	81fb      	strh	r3, [r7, #14]
			break;
 80019c0:	e01d      	b.n	80019fe <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80019c2:	89fb      	ldrh	r3, [r7, #14]
 80019c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019c8:	81fb      	strh	r3, [r7, #14]
			break;
 80019ca:	e018      	b.n	80019fe <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80019cc:	89fb      	ldrh	r3, [r7, #14]
 80019ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019d2:	81fb      	strh	r3, [r7, #14]
			break;
 80019d4:	e013      	b.n	80019fe <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80019d6:	89fb      	ldrh	r3, [r7, #14]
 80019d8:	f043 0320 	orr.w	r3, r3, #32
 80019dc:	81fb      	strh	r3, [r7, #14]
			break;
 80019de:	e00e      	b.n	80019fe <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 80019e0:	89fb      	ldrh	r3, [r7, #14]
 80019e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019e6:	81fb      	strh	r3, [r7, #14]
			break;
 80019e8:	e009      	b.n	80019fe <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80019ea:	89fb      	ldrh	r3, [r7, #14]
 80019ec:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80019f0:	81fb      	strh	r3, [r7, #14]
			break;
 80019f2:	e004      	b.n	80019fe <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 80019f4:	89fb      	ldrh	r3, [r7, #14]
 80019f6:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80019fa:	81fb      	strh	r3, [r7, #14]
			break;
 80019fc:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 80019fe:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 8001a00:	889b      	ldrh	r3, [r3, #4]
 8001a02:	f245 5210 	movw	r2, #21776	; 0x5510
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d103      	bne.n	8001a12 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 8001a0a:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8001a0e:	81bb      	strh	r3, [r7, #12]
 8001a10:	e001      	b.n	8001a16 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 8001a12:	2336      	movs	r3, #54	; 0x36
 8001a14:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 8001a16:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 8001a18:	889b      	ldrh	r3, [r3, #4]
 8001a1a:	f245 3210 	movw	r2, #21264	; 0x5310
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d00f      	beq.n	8001a42 <LCD_Scan_Dir+0x19a>
 8001a22:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 8001a24:	889b      	ldrh	r3, [r3, #4]
 8001a26:	f245 5210 	movw	r2, #21776	; 0x5510
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d009      	beq.n	8001a42 <LCD_Scan_Dir+0x19a>
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 8001a30:	889b      	ldrh	r3, [r3, #4]
 8001a32:	f641 1263 	movw	r2, #6499	; 0x1963
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d003      	beq.n	8001a42 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 8001a3a:	89fb      	ldrh	r3, [r7, #14]
 8001a3c:	f043 0308 	orr.w	r3, r3, #8
 8001a40:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 8001a44:	889b      	ldrh	r3, [r3, #4]
 8001a46:	f646 0204 	movw	r2, #26628	; 0x6804
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d103      	bne.n	8001a56 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 8001a4e:	89fb      	ldrh	r3, [r7, #14]
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001a56:	89fa      	ldrh	r2, [r7, #14]
 8001a58:	89bb      	ldrh	r3, [r7, #12]
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fc11 	bl	8001284 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 8001a64:	889b      	ldrh	r3, [r3, #4]
 8001a66:	f641 1263 	movw	r2, #6499	; 0x1963
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d028      	beq.n	8001ac0 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 8001a6e:	89fb      	ldrh	r3, [r7, #14]
 8001a70:	f003 0320 	and.w	r3, r3, #32
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d013      	beq.n	8001aa0 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 8001a7a:	881a      	ldrh	r2, [r3, #0]
 8001a7c:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 8001a7e:	885b      	ldrh	r3, [r3, #2]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d21d      	bcs.n	8001ac0 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 8001a8c:	885a      	ldrh	r2, [r3, #2]
 8001a8e:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 8001a90:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8001a92:	4a02      	ldr	r2, [pc, #8]	; (8001a9c <LCD_Scan_Dir+0x1f4>)
 8001a94:	897b      	ldrh	r3, [r7, #10]
 8001a96:	8053      	strh	r3, [r2, #2]
 8001a98:	e012      	b.n	8001ac0 <LCD_Scan_Dir+0x218>
 8001a9a:	bf00      	nop
 8001a9c:	200004b0 	.word	0x200004b0
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8001aa0:	4b7f      	ldr	r3, [pc, #508]	; (8001ca0 <LCD_Scan_Dir+0x3f8>)
 8001aa2:	881a      	ldrh	r2, [r3, #0]
 8001aa4:	4b7e      	ldr	r3, [pc, #504]	; (8001ca0 <LCD_Scan_Dir+0x3f8>)
 8001aa6:	885b      	ldrh	r3, [r3, #2]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d909      	bls.n	8001ac0 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001aac:	4b7c      	ldr	r3, [pc, #496]	; (8001ca0 <LCD_Scan_Dir+0x3f8>)
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001ab2:	4b7b      	ldr	r3, [pc, #492]	; (8001ca0 <LCD_Scan_Dir+0x3f8>)
 8001ab4:	885a      	ldrh	r2, [r3, #2]
 8001ab6:	4b7a      	ldr	r3, [pc, #488]	; (8001ca0 <LCD_Scan_Dir+0x3f8>)
 8001ab8:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8001aba:	4a79      	ldr	r2, [pc, #484]	; (8001ca0 <LCD_Scan_Dir+0x3f8>)
 8001abc:	897b      	ldrh	r3, [r7, #10]
 8001abe:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8001ac0:	4b77      	ldr	r3, [pc, #476]	; (8001ca0 <LCD_Scan_Dir+0x3f8>)
 8001ac2:	889b      	ldrh	r3, [r3, #4]
 8001ac4:	f245 5210 	movw	r2, #21776	; 0x5510
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	f040 80ef 	bne.w	8001cac <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 8001ace:	4b74      	ldr	r3, [pc, #464]	; (8001ca0 <LCD_Scan_Dir+0x3f8>)
 8001ad0:	895b      	ldrh	r3, [r3, #10]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fb4a 	bl	800116c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001ad8:	4b72      	ldr	r3, [pc, #456]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ade:	611a      	str	r2, [r3, #16]
 8001ae0:	4b70      	ldr	r3, [pc, #448]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae6:	615a      	str	r2, [r3, #20]
 8001ae8:	4b6f      	ldr	r3, [pc, #444]	; (8001ca8 <LCD_Scan_Dir+0x400>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	4b6d      	ldr	r3, [pc, #436]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001af0:	2280      	movs	r2, #128	; 0x80
 8001af2:	615a      	str	r2, [r3, #20]
 8001af4:	4b6b      	ldr	r3, [pc, #428]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	611a      	str	r2, [r3, #16]
 8001afa:	4b6a      	ldr	r3, [pc, #424]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b00:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 8001b02:	4b67      	ldr	r3, [pc, #412]	; (8001ca0 <LCD_Scan_Dir+0x3f8>)
 8001b04:	895b      	ldrh	r3, [r3, #10]
 8001b06:	3301      	adds	r3, #1
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fb2e 	bl	800116c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001b10:	4b64      	ldr	r3, [pc, #400]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b16:	611a      	str	r2, [r3, #16]
 8001b18:	4b62      	ldr	r3, [pc, #392]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b1e:	615a      	str	r2, [r3, #20]
 8001b20:	4b61      	ldr	r3, [pc, #388]	; (8001ca8 <LCD_Scan_Dir+0x400>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	4b5f      	ldr	r3, [pc, #380]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001b28:	2280      	movs	r2, #128	; 0x80
 8001b2a:	615a      	str	r2, [r3, #20]
 8001b2c:	4b5d      	ldr	r3, [pc, #372]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001b2e:	2280      	movs	r2, #128	; 0x80
 8001b30:	611a      	str	r2, [r3, #16]
 8001b32:	4b5c      	ldr	r3, [pc, #368]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b38:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 8001b3a:	4b59      	ldr	r3, [pc, #356]	; (8001ca0 <LCD_Scan_Dir+0x3f8>)
 8001b3c:	895b      	ldrh	r3, [r3, #10]
 8001b3e:	3302      	adds	r3, #2
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fb12 	bl	800116c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001b48:	4b56      	ldr	r3, [pc, #344]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b4e:	611a      	str	r2, [r3, #16]
 8001b50:	4b54      	ldr	r3, [pc, #336]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b56:	615a      	str	r2, [r3, #20]
 8001b58:	4b51      	ldr	r3, [pc, #324]	; (8001ca0 <LCD_Scan_Dir+0x3f8>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	121a      	asrs	r2, r3, #8
 8001b60:	4b51      	ldr	r3, [pc, #324]	; (8001ca8 <LCD_Scan_Dir+0x400>)
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	4b4f      	ldr	r3, [pc, #316]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001b66:	2280      	movs	r2, #128	; 0x80
 8001b68:	615a      	str	r2, [r3, #20]
 8001b6a:	4b4e      	ldr	r3, [pc, #312]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001b6c:	2280      	movs	r2, #128	; 0x80
 8001b6e:	611a      	str	r2, [r3, #16]
 8001b70:	4b4c      	ldr	r3, [pc, #304]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b76:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001b78:	4b49      	ldr	r3, [pc, #292]	; (8001ca0 <LCD_Scan_Dir+0x3f8>)
 8001b7a:	895b      	ldrh	r3, [r3, #10]
 8001b7c:	3303      	adds	r3, #3
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff faf3 	bl	800116c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001b86:	4b47      	ldr	r3, [pc, #284]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b8c:	611a      	str	r2, [r3, #16]
 8001b8e:	4b45      	ldr	r3, [pc, #276]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b94:	615a      	str	r2, [r3, #20]
 8001b96:	4b42      	ldr	r3, [pc, #264]	; (8001ca0 <LCD_Scan_Dir+0x3f8>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	4a42      	ldr	r2, [pc, #264]	; (8001ca8 <LCD_Scan_Dir+0x400>)
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	60d3      	str	r3, [r2, #12]
 8001ba2:	4b40      	ldr	r3, [pc, #256]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	615a      	str	r2, [r3, #20]
 8001ba8:	4b3e      	ldr	r3, [pc, #248]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001baa:	2280      	movs	r2, #128	; 0x80
 8001bac:	611a      	str	r2, [r3, #16]
 8001bae:	4b3d      	ldr	r3, [pc, #244]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8001bb6:	4b3a      	ldr	r3, [pc, #232]	; (8001ca0 <LCD_Scan_Dir+0x3f8>)
 8001bb8:	899b      	ldrh	r3, [r3, #12]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fad6 	bl	800116c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001bc0:	4b38      	ldr	r3, [pc, #224]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bc6:	611a      	str	r2, [r3, #16]
 8001bc8:	4b36      	ldr	r3, [pc, #216]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bce:	615a      	str	r2, [r3, #20]
 8001bd0:	4b35      	ldr	r3, [pc, #212]	; (8001ca8 <LCD_Scan_Dir+0x400>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001bd8:	2280      	movs	r2, #128	; 0x80
 8001bda:	615a      	str	r2, [r3, #20]
 8001bdc:	4b31      	ldr	r3, [pc, #196]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001bde:	2280      	movs	r2, #128	; 0x80
 8001be0:	611a      	str	r2, [r3, #16]
 8001be2:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 8001bea:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <LCD_Scan_Dir+0x3f8>)
 8001bec:	899b      	ldrh	r3, [r3, #12]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff faba 	bl	800116c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001bf8:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bfe:	611a      	str	r2, [r3, #16]
 8001c00:	4b28      	ldr	r3, [pc, #160]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c06:	615a      	str	r2, [r3, #20]
 8001c08:	4b27      	ldr	r3, [pc, #156]	; (8001ca8 <LCD_Scan_Dir+0x400>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001c10:	2280      	movs	r2, #128	; 0x80
 8001c12:	615a      	str	r2, [r3, #20]
 8001c14:	4b23      	ldr	r3, [pc, #140]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001c16:	2280      	movs	r2, #128	; 0x80
 8001c18:	611a      	str	r2, [r3, #16]
 8001c1a:	4b22      	ldr	r3, [pc, #136]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c20:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 8001c22:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <LCD_Scan_Dir+0x3f8>)
 8001c24:	899b      	ldrh	r3, [r3, #12]
 8001c26:	3302      	adds	r3, #2
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fa9e 	bl	800116c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001c30:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001c32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c36:	611a      	str	r2, [r3, #16]
 8001c38:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c3e:	615a      	str	r2, [r3, #20]
 8001c40:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <LCD_Scan_Dir+0x3f8>)
 8001c42:	885b      	ldrh	r3, [r3, #2]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	121a      	asrs	r2, r3, #8
 8001c48:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <LCD_Scan_Dir+0x400>)
 8001c4a:	60da      	str	r2, [r3, #12]
 8001c4c:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001c4e:	2280      	movs	r2, #128	; 0x80
 8001c50:	615a      	str	r2, [r3, #20]
 8001c52:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	611a      	str	r2, [r3, #16]
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c5e:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <LCD_Scan_Dir+0x3f8>)
 8001c62:	899b      	ldrh	r3, [r3, #12]
 8001c64:	3303      	adds	r3, #3
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fa7f 	bl	800116c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001c70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c74:	611a      	str	r2, [r3, #16]
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c7c:	615a      	str	r2, [r3, #20]
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <LCD_Scan_Dir+0x3f8>)
 8001c80:	885b      	ldrh	r3, [r3, #2]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <LCD_Scan_Dir+0x400>)
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	60d3      	str	r3, [r2, #12]
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	615a      	str	r2, [r3, #20]
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001c92:	2280      	movs	r2, #128	; 0x80
 8001c94:	611a      	str	r2, [r3, #16]
 8001c96:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <LCD_Scan_Dir+0x3fc>)
 8001c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9c:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001c9e:	e10a      	b.n	8001eb6 <LCD_Scan_Dir+0x60e>
 8001ca0:	200004b0 	.word	0x200004b0
 8001ca4:	40011000 	.word	0x40011000
 8001ca8:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8001cac:	4b84      	ldr	r3, [pc, #528]	; (8001ec0 <LCD_Scan_Dir+0x618>)
 8001cae:	895b      	ldrh	r3, [r3, #10]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fa5b 	bl	800116c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001cb6:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001cb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cbc:	611a      	str	r2, [r3, #16]
 8001cbe:	4b81      	ldr	r3, [pc, #516]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc4:	615a      	str	r2, [r3, #20]
 8001cc6:	4b80      	ldr	r3, [pc, #512]	; (8001ec8 <LCD_Scan_Dir+0x620>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	4b7d      	ldr	r3, [pc, #500]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	615a      	str	r2, [r3, #20]
 8001cd2:	4b7c      	ldr	r3, [pc, #496]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001cd4:	2280      	movs	r2, #128	; 0x80
 8001cd6:	611a      	str	r2, [r3, #16]
 8001cd8:	4b7a      	ldr	r3, [pc, #488]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cde:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001ce0:	4b78      	ldr	r3, [pc, #480]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ce6:	611a      	str	r2, [r3, #16]
 8001ce8:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cee:	615a      	str	r2, [r3, #20]
 8001cf0:	4b75      	ldr	r3, [pc, #468]	; (8001ec8 <LCD_Scan_Dir+0x620>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	4b73      	ldr	r3, [pc, #460]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001cf8:	2280      	movs	r2, #128	; 0x80
 8001cfa:	615a      	str	r2, [r3, #20]
 8001cfc:	4b71      	ldr	r3, [pc, #452]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001cfe:	2280      	movs	r2, #128	; 0x80
 8001d00:	611a      	str	r2, [r3, #16]
 8001d02:	4b70      	ldr	r3, [pc, #448]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d08:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001d0a:	4b6e      	ldr	r3, [pc, #440]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d10:	611a      	str	r2, [r3, #16]
 8001d12:	4b6c      	ldr	r3, [pc, #432]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d18:	615a      	str	r2, [r3, #20]
 8001d1a:	4b69      	ldr	r3, [pc, #420]	; (8001ec0 <LCD_Scan_Dir+0x618>)
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	121a      	asrs	r2, r3, #8
 8001d22:	4b69      	ldr	r3, [pc, #420]	; (8001ec8 <LCD_Scan_Dir+0x620>)
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	4b67      	ldr	r3, [pc, #412]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	615a      	str	r2, [r3, #20]
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001d2e:	2280      	movs	r2, #128	; 0x80
 8001d30:	611a      	str	r2, [r3, #16]
 8001d32:	4b64      	ldr	r3, [pc, #400]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d38:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001d3a:	4b62      	ldr	r3, [pc, #392]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d40:	611a      	str	r2, [r3, #16]
 8001d42:	4b60      	ldr	r3, [pc, #384]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d48:	615a      	str	r2, [r3, #20]
 8001d4a:	4b5d      	ldr	r3, [pc, #372]	; (8001ec0 <LCD_Scan_Dir+0x618>)
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	4a5d      	ldr	r2, [pc, #372]	; (8001ec8 <LCD_Scan_Dir+0x620>)
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	60d3      	str	r3, [r2, #12]
 8001d56:	4b5b      	ldr	r3, [pc, #364]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001d58:	2280      	movs	r2, #128	; 0x80
 8001d5a:	615a      	str	r2, [r3, #20]
 8001d5c:	4b59      	ldr	r3, [pc, #356]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001d5e:	2280      	movs	r2, #128	; 0x80
 8001d60:	611a      	str	r2, [r3, #16]
 8001d62:	4b58      	ldr	r3, [pc, #352]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d68:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8001d6a:	4b55      	ldr	r3, [pc, #340]	; (8001ec0 <LCD_Scan_Dir+0x618>)
 8001d6c:	899b      	ldrh	r3, [r3, #12]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f9fc 	bl	800116c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001d74:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d7a:	611a      	str	r2, [r3, #16]
 8001d7c:	4b51      	ldr	r3, [pc, #324]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d82:	615a      	str	r2, [r3, #20]
 8001d84:	4b50      	ldr	r3, [pc, #320]	; (8001ec8 <LCD_Scan_Dir+0x620>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	4b4e      	ldr	r3, [pc, #312]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001d8c:	2280      	movs	r2, #128	; 0x80
 8001d8e:	615a      	str	r2, [r3, #20]
 8001d90:	4b4c      	ldr	r3, [pc, #304]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001d92:	2280      	movs	r2, #128	; 0x80
 8001d94:	611a      	str	r2, [r3, #16]
 8001d96:	4b4b      	ldr	r3, [pc, #300]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d9c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001d9e:	4b49      	ldr	r3, [pc, #292]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001da4:	611a      	str	r2, [r3, #16]
 8001da6:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dac:	615a      	str	r2, [r3, #20]
 8001dae:	4b46      	ldr	r3, [pc, #280]	; (8001ec8 <LCD_Scan_Dir+0x620>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001db6:	2280      	movs	r2, #128	; 0x80
 8001db8:	615a      	str	r2, [r3, #20]
 8001dba:	4b42      	ldr	r3, [pc, #264]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001dbc:	2280      	movs	r2, #128	; 0x80
 8001dbe:	611a      	str	r2, [r3, #16]
 8001dc0:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001dca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dce:	611a      	str	r2, [r3, #16]
 8001dd0:	4b3c      	ldr	r3, [pc, #240]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd6:	615a      	str	r2, [r3, #20]
 8001dd8:	4b39      	ldr	r3, [pc, #228]	; (8001ec0 <LCD_Scan_Dir+0x618>)
 8001dda:	885b      	ldrh	r3, [r3, #2]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	121a      	asrs	r2, r3, #8
 8001de0:	4b39      	ldr	r3, [pc, #228]	; (8001ec8 <LCD_Scan_Dir+0x620>)
 8001de2:	60da      	str	r2, [r3, #12]
 8001de4:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001de6:	2280      	movs	r2, #128	; 0x80
 8001de8:	615a      	str	r2, [r3, #20]
 8001dea:	4b36      	ldr	r3, [pc, #216]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001dec:	2280      	movs	r2, #128	; 0x80
 8001dee:	611a      	str	r2, [r3, #16]
 8001df0:	4b34      	ldr	r3, [pc, #208]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001df8:	4b32      	ldr	r3, [pc, #200]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dfe:	611a      	str	r2, [r3, #16]
 8001e00:	4b30      	ldr	r3, [pc, #192]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e06:	615a      	str	r2, [r3, #20]
 8001e08:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <LCD_Scan_Dir+0x618>)
 8001e0a:	885b      	ldrh	r3, [r3, #2]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	4a2e      	ldr	r2, [pc, #184]	; (8001ec8 <LCD_Scan_Dir+0x620>)
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	60d3      	str	r3, [r2, #12]
 8001e14:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	615a      	str	r2, [r3, #20]
 8001e1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001e1c:	2280      	movs	r2, #128	; 0x80
 8001e1e:	611a      	str	r2, [r3, #16]
 8001e20:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <LCD_Scan_Dir+0x61c>)
 8001e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e26:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001e28:	e045      	b.n	8001eb6 <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	2b07      	cmp	r3, #7
 8001e2e:	d836      	bhi.n	8001e9e <LCD_Scan_Dir+0x5f6>
 8001e30:	a201      	add	r2, pc, #4	; (adr r2, 8001e38 <LCD_Scan_Dir+0x590>)
 8001e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e36:	bf00      	nop
 8001e38:	08001e59 	.word	0x08001e59
 8001e3c:	08001e63 	.word	0x08001e63
 8001e40:	08001e6d 	.word	0x08001e6d
 8001e44:	08001e9f 	.word	0x08001e9f
 8001e48:	08001e77 	.word	0x08001e77
 8001e4c:	08001e81 	.word	0x08001e81
 8001e50:	08001e8b 	.word	0x08001e8b
 8001e54:	08001e95 	.word	0x08001e95
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8001e58:	89fb      	ldrh	r3, [r7, #14]
 8001e5a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001e5e:	81fb      	strh	r3, [r7, #14]
			break;
 8001e60:	e01d      	b.n	8001e9e <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8001e62:	89fb      	ldrh	r3, [r7, #14]
 8001e64:	f043 0310 	orr.w	r3, r3, #16
 8001e68:	81fb      	strh	r3, [r7, #14]
			break;
 8001e6a:	e018      	b.n	8001e9e <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 8001e6c:	89fb      	ldrh	r3, [r7, #14]
 8001e6e:	f043 0320 	orr.w	r3, r3, #32
 8001e72:	81fb      	strh	r3, [r7, #14]
			break;
 8001e74:	e013      	b.n	8001e9e <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8001e76:	89fb      	ldrh	r3, [r7, #14]
 8001e78:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001e7c:	81fb      	strh	r3, [r7, #14]
			break;
 8001e7e:	e00e      	b.n	8001e9e <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8001e80:	89fb      	ldrh	r3, [r7, #14]
 8001e82:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001e86:	81fb      	strh	r3, [r7, #14]
			break;
 8001e88:	e009      	b.n	8001e9e <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 8001e8a:	89fb      	ldrh	r3, [r7, #14]
 8001e8c:	f043 0318 	orr.w	r3, r3, #24
 8001e90:	81fb      	strh	r3, [r7, #14]
			break;
 8001e92:	e004      	b.n	8001e9e <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 8001e94:	89fb      	ldrh	r3, [r7, #14]
 8001e96:	f043 0308 	orr.w	r3, r3, #8
 8001e9a:	81fb      	strh	r3, [r7, #14]
			break;
 8001e9c:	bf00      	nop
		}
		dirreg = 0X03;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 8001ea2:	89fb      	ldrh	r3, [r7, #14]
 8001ea4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ea8:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001eaa:	89fa      	ldrh	r2, [r7, #14]
 8001eac:	89bb      	ldrh	r3, [r7, #12]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff f9e7 	bl	8001284 <LCD_WriteReg>
	}
}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200004b0 	.word	0x200004b0
 8001ec4:	40011000 	.word	0x40011000
 8001ec8:	40010c00 	.word	0x40010c00

08001ecc <LCD_DrawPoint>:
//Draw a point with color
//x,y: coordinate

void LCD_DrawPoint(uint16_t x, uint16_t y) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	460a      	mov	r2, r1
 8001ed6:	80fb      	strh	r3, [r7, #6]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x, y);
 8001edc:	88ba      	ldrh	r2, [r7, #4]
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fa14 	bl	8001310 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();
 8001ee8:	f7ff fa06 	bl	80012f8 <LCD_WriteRAM_Prepare>
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <LCD_DrawPoint+0x54>)
 8001eee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ef2:	611a      	str	r2, [r3, #16]
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <LCD_DrawPoint+0x54>)
 8001ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001efa:	615a      	str	r2, [r3, #20]
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <LCD_DrawPoint+0x58>)
 8001efe:	881a      	ldrh	r2, [r3, #0]
 8001f00:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <LCD_DrawPoint+0x5c>)
 8001f02:	60da      	str	r2, [r3, #12]
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <LCD_DrawPoint+0x54>)
 8001f06:	2280      	movs	r2, #128	; 0x80
 8001f08:	615a      	str	r2, [r3, #20]
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <LCD_DrawPoint+0x54>)
 8001f0c:	2280      	movs	r2, #128	; 0x80
 8001f0e:	611a      	str	r2, [r3, #16]
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <LCD_DrawPoint+0x54>)
 8001f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f16:	611a      	str	r2, [r3, #16]
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40011000 	.word	0x40011000
 8001f24:	20000098 	.word	0x20000098
 8001f28:	40010c00 	.word	0x40010c00

08001f2c <LCD_Fast_DrawPoint>:
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	80fb      	strh	r3, [r7, #6]
 8001f36:	460b      	mov	r3, r1
 8001f38:	80bb      	strh	r3, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001f3e:	4b75      	ldr	r3, [pc, #468]	; (8002114 <LCD_Fast_DrawPoint+0x1e8>)
 8001f40:	889b      	ldrh	r3, [r3, #4]
 8001f42:	f249 3241 	movw	r2, #37697	; 0x9341
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d005      	beq.n	8001f56 <LCD_Fast_DrawPoint+0x2a>
 8001f4a:	4b72      	ldr	r3, [pc, #456]	; (8002114 <LCD_Fast_DrawPoint+0x1e8>)
 8001f4c:	889b      	ldrh	r3, [r3, #4]
 8001f4e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d164      	bne.n	8002020 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 8001f56:	4b6f      	ldr	r3, [pc, #444]	; (8002114 <LCD_Fast_DrawPoint+0x1e8>)
 8001f58:	895b      	ldrh	r3, [r3, #10]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff f906 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001f60:	4b6d      	ldr	r3, [pc, #436]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8001f62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f66:	611a      	str	r2, [r3, #16]
 8001f68:	4b6b      	ldr	r3, [pc, #428]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8001f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f6e:	615a      	str	r2, [r3, #20]
 8001f70:	88fb      	ldrh	r3, [r7, #6]
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	4b69      	ldr	r3, [pc, #420]	; (800211c <LCD_Fast_DrawPoint+0x1f0>)
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	4b67      	ldr	r3, [pc, #412]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8001f7c:	2280      	movs	r2, #128	; 0x80
 8001f7e:	615a      	str	r2, [r3, #20]
 8001f80:	4b65      	ldr	r3, [pc, #404]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8001f82:	2280      	movs	r2, #128	; 0x80
 8001f84:	611a      	str	r2, [r3, #16]
 8001f86:	4b64      	ldr	r3, [pc, #400]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8001f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f8c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001f8e:	4b62      	ldr	r3, [pc, #392]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8001f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f94:	611a      	str	r2, [r3, #16]
 8001f96:	4b60      	ldr	r3, [pc, #384]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8001f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f9c:	615a      	str	r2, [r3, #20]
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	4a5e      	ldr	r2, [pc, #376]	; (800211c <LCD_Fast_DrawPoint+0x1f0>)
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	60d3      	str	r3, [r2, #12]
 8001fa6:	4b5c      	ldr	r3, [pc, #368]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8001fa8:	2280      	movs	r2, #128	; 0x80
 8001faa:	615a      	str	r2, [r3, #20]
 8001fac:	4b5a      	ldr	r3, [pc, #360]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8001fae:	2280      	movs	r2, #128	; 0x80
 8001fb0:	611a      	str	r2, [r3, #16]
 8001fb2:	4b59      	ldr	r3, [pc, #356]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8001fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fb8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001fba:	4b56      	ldr	r3, [pc, #344]	; (8002114 <LCD_Fast_DrawPoint+0x1e8>)
 8001fbc:	899b      	ldrh	r3, [r3, #12]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff f8d4 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001fc4:	4b54      	ldr	r3, [pc, #336]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8001fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fca:	611a      	str	r2, [r3, #16]
 8001fcc:	4b52      	ldr	r3, [pc, #328]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8001fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd2:	615a      	str	r2, [r3, #20]
 8001fd4:	88bb      	ldrh	r3, [r7, #4]
 8001fd6:	0a1b      	lsrs	r3, r3, #8
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	4b50      	ldr	r3, [pc, #320]	; (800211c <LCD_Fast_DrawPoint+0x1f0>)
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	4b4e      	ldr	r3, [pc, #312]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8001fe0:	2280      	movs	r2, #128	; 0x80
 8001fe2:	615a      	str	r2, [r3, #20]
 8001fe4:	4b4c      	ldr	r3, [pc, #304]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8001fe6:	2280      	movs	r2, #128	; 0x80
 8001fe8:	611a      	str	r2, [r3, #16]
 8001fea:	4b4b      	ldr	r3, [pc, #300]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8001fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ff0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001ff2:	4b49      	ldr	r3, [pc, #292]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8001ff4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ff8:	611a      	str	r2, [r3, #16]
 8001ffa:	4b47      	ldr	r3, [pc, #284]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8001ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002000:	615a      	str	r2, [r3, #20]
 8002002:	88bb      	ldrh	r3, [r7, #4]
 8002004:	4a45      	ldr	r2, [pc, #276]	; (800211c <LCD_Fast_DrawPoint+0x1f0>)
 8002006:	b2db      	uxtb	r3, r3
 8002008:	60d3      	str	r3, [r2, #12]
 800200a:	4b43      	ldr	r3, [pc, #268]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 800200c:	2280      	movs	r2, #128	; 0x80
 800200e:	615a      	str	r2, [r3, #20]
 8002010:	4b41      	ldr	r3, [pc, #260]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8002012:	2280      	movs	r2, #128	; 0x80
 8002014:	611a      	str	r2, [r3, #16]
 8002016:	4b40      	ldr	r3, [pc, #256]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8002018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800201c:	611a      	str	r2, [r3, #16]
 800201e:	e1e6      	b.n	80023ee <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 8002020:	4b3c      	ldr	r3, [pc, #240]	; (8002114 <LCD_Fast_DrawPoint+0x1e8>)
 8002022:	889b      	ldrh	r3, [r3, #4]
 8002024:	f245 5210 	movw	r2, #21776	; 0x5510
 8002028:	4293      	cmp	r3, r2
 800202a:	d179      	bne.n	8002120 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 800202c:	4b39      	ldr	r3, [pc, #228]	; (8002114 <LCD_Fast_DrawPoint+0x1e8>)
 800202e:	895b      	ldrh	r3, [r3, #10]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff f89b 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8002036:	4b38      	ldr	r3, [pc, #224]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8002038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800203c:	611a      	str	r2, [r3, #16]
 800203e:	4b36      	ldr	r3, [pc, #216]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8002040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002044:	615a      	str	r2, [r3, #20]
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	b29a      	uxth	r2, r3
 800204c:	4b33      	ldr	r3, [pc, #204]	; (800211c <LCD_Fast_DrawPoint+0x1f0>)
 800204e:	60da      	str	r2, [r3, #12]
 8002050:	4b31      	ldr	r3, [pc, #196]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8002052:	2280      	movs	r2, #128	; 0x80
 8002054:	615a      	str	r2, [r3, #20]
 8002056:	4b30      	ldr	r3, [pc, #192]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8002058:	2280      	movs	r2, #128	; 0x80
 800205a:	611a      	str	r2, [r3, #16]
 800205c:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 800205e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002062:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <LCD_Fast_DrawPoint+0x1e8>)
 8002066:	895b      	ldrh	r3, [r3, #10]
 8002068:	3301      	adds	r3, #1
 800206a:	b29b      	uxth	r3, r3
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff f87d 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 8002072:	4b29      	ldr	r3, [pc, #164]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8002074:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002078:	611a      	str	r2, [r3, #16]
 800207a:	4b27      	ldr	r3, [pc, #156]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 800207c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002080:	615a      	str	r2, [r3, #20]
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	4a25      	ldr	r2, [pc, #148]	; (800211c <LCD_Fast_DrawPoint+0x1f0>)
 8002086:	b2db      	uxtb	r3, r3
 8002088:	60d3      	str	r3, [r2, #12]
 800208a:	4b23      	ldr	r3, [pc, #140]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 800208c:	2280      	movs	r2, #128	; 0x80
 800208e:	615a      	str	r2, [r3, #20]
 8002090:	4b21      	ldr	r3, [pc, #132]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	611a      	str	r2, [r3, #16]
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8002098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800209c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <LCD_Fast_DrawPoint+0x1e8>)
 80020a0:	899b      	ldrh	r3, [r3, #12]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff f862 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80020a8:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 80020aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ae:	611a      	str	r2, [r3, #16]
 80020b0:	4b19      	ldr	r3, [pc, #100]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 80020b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b6:	615a      	str	r2, [r3, #20]
 80020b8:	88bb      	ldrh	r3, [r7, #4]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	b29a      	uxth	r2, r3
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <LCD_Fast_DrawPoint+0x1f0>)
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 80020c4:	2280      	movs	r2, #128	; 0x80
 80020c6:	615a      	str	r2, [r3, #20]
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 80020ca:	2280      	movs	r2, #128	; 0x80
 80020cc:	611a      	str	r2, [r3, #16]
 80020ce:	4b12      	ldr	r3, [pc, #72]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 80020d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020d4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 80020d6:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <LCD_Fast_DrawPoint+0x1e8>)
 80020d8:	899b      	ldrh	r3, [r3, #12]
 80020da:	3301      	adds	r3, #1
 80020dc:	b29b      	uxth	r3, r3
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff f844 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 80020e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ea:	611a      	str	r2, [r3, #16]
 80020ec:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 80020ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020f2:	615a      	str	r2, [r3, #20]
 80020f4:	88bb      	ldrh	r3, [r7, #4]
 80020f6:	4a09      	ldr	r2, [pc, #36]	; (800211c <LCD_Fast_DrawPoint+0x1f0>)
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	60d3      	str	r3, [r2, #12]
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 80020fe:	2280      	movs	r2, #128	; 0x80
 8002100:	615a      	str	r2, [r3, #20]
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 8002104:	2280      	movs	r2, #128	; 0x80
 8002106:	611a      	str	r2, [r3, #16]
 8002108:	4b03      	ldr	r3, [pc, #12]	; (8002118 <LCD_Fast_DrawPoint+0x1ec>)
 800210a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800210e:	611a      	str	r2, [r3, #16]
 8002110:	e16d      	b.n	80023ee <LCD_Fast_DrawPoint+0x4c2>
 8002112:	bf00      	nop
 8002114:	200004b0 	.word	0x200004b0
 8002118:	40011000 	.word	0x40011000
 800211c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8002120:	4b68      	ldr	r3, [pc, #416]	; (80022c4 <LCD_Fast_DrawPoint+0x398>)
 8002122:	889b      	ldrh	r3, [r3, #4]
 8002124:	f641 1263 	movw	r2, #6499	; 0x1963
 8002128:	4293      	cmp	r3, r2
 800212a:	f040 80d1 	bne.w	80022d0 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 800212e:	4b65      	ldr	r3, [pc, #404]	; (80022c4 <LCD_Fast_DrawPoint+0x398>)
 8002130:	799b      	ldrb	r3, [r3, #6]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d106      	bne.n	8002144 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 8002136:	4b63      	ldr	r3, [pc, #396]	; (80022c4 <LCD_Fast_DrawPoint+0x398>)
 8002138:	881a      	ldrh	r2, [r3, #0]
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	b29b      	uxth	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8002144:	4b5f      	ldr	r3, [pc, #380]	; (80022c4 <LCD_Fast_DrawPoint+0x398>)
 8002146:	895b      	ldrh	r3, [r3, #10]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff f80f 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 800214e:	4b5e      	ldr	r3, [pc, #376]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 8002150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002154:	611a      	str	r2, [r3, #16]
 8002156:	4b5c      	ldr	r3, [pc, #368]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 8002158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800215c:	615a      	str	r2, [r3, #20]
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	b29a      	uxth	r2, r3
 8002164:	4b59      	ldr	r3, [pc, #356]	; (80022cc <LCD_Fast_DrawPoint+0x3a0>)
 8002166:	60da      	str	r2, [r3, #12]
 8002168:	4b57      	ldr	r3, [pc, #348]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 800216a:	2280      	movs	r2, #128	; 0x80
 800216c:	615a      	str	r2, [r3, #20]
 800216e:	4b56      	ldr	r3, [pc, #344]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 8002170:	2280      	movs	r2, #128	; 0x80
 8002172:	611a      	str	r2, [r3, #16]
 8002174:	4b54      	ldr	r3, [pc, #336]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 8002176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800217a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800217c:	4b52      	ldr	r3, [pc, #328]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 800217e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002182:	611a      	str	r2, [r3, #16]
 8002184:	4b50      	ldr	r3, [pc, #320]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 8002186:	f44f 7200 	mov.w	r2, #512	; 0x200
 800218a:	615a      	str	r2, [r3, #20]
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	4a4f      	ldr	r2, [pc, #316]	; (80022cc <LCD_Fast_DrawPoint+0x3a0>)
 8002190:	b2db      	uxtb	r3, r3
 8002192:	60d3      	str	r3, [r2, #12]
 8002194:	4b4c      	ldr	r3, [pc, #304]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 8002196:	2280      	movs	r2, #128	; 0x80
 8002198:	615a      	str	r2, [r3, #20]
 800219a:	4b4b      	ldr	r3, [pc, #300]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 800219c:	2280      	movs	r2, #128	; 0x80
 800219e:	611a      	str	r2, [r3, #16]
 80021a0:	4b49      	ldr	r3, [pc, #292]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 80021a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 80021a8:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 80021aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ae:	611a      	str	r2, [r3, #16]
 80021b0:	4b45      	ldr	r3, [pc, #276]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 80021b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b6:	615a      	str	r2, [r3, #20]
 80021b8:	88fb      	ldrh	r3, [r7, #6]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	b29a      	uxth	r2, r3
 80021be:	4b43      	ldr	r3, [pc, #268]	; (80022cc <LCD_Fast_DrawPoint+0x3a0>)
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	4b41      	ldr	r3, [pc, #260]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 80021c4:	2280      	movs	r2, #128	; 0x80
 80021c6:	615a      	str	r2, [r3, #20]
 80021c8:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 80021ca:	2280      	movs	r2, #128	; 0x80
 80021cc:	611a      	str	r2, [r3, #16]
 80021ce:	4b3e      	ldr	r3, [pc, #248]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 80021d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021d4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80021d6:	4b3c      	ldr	r3, [pc, #240]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 80021d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021dc:	611a      	str	r2, [r3, #16]
 80021de:	4b3a      	ldr	r3, [pc, #232]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 80021e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021e4:	615a      	str	r2, [r3, #20]
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	4a38      	ldr	r2, [pc, #224]	; (80022cc <LCD_Fast_DrawPoint+0x3a0>)
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	60d3      	str	r3, [r2, #12]
 80021ee:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 80021f0:	2280      	movs	r2, #128	; 0x80
 80021f2:	615a      	str	r2, [r3, #20]
 80021f4:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	611a      	str	r2, [r3, #16]
 80021fa:	4b33      	ldr	r3, [pc, #204]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 80021fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002200:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002202:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <LCD_Fast_DrawPoint+0x398>)
 8002204:	899b      	ldrh	r3, [r3, #12]
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe ffb0 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 800220c:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 800220e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002212:	611a      	str	r2, [r3, #16]
 8002214:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 8002216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800221a:	615a      	str	r2, [r3, #20]
 800221c:	88bb      	ldrh	r3, [r7, #4]
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	b29a      	uxth	r2, r3
 8002222:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <LCD_Fast_DrawPoint+0x3a0>)
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 8002228:	2280      	movs	r2, #128	; 0x80
 800222a:	615a      	str	r2, [r3, #20]
 800222c:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 800222e:	2280      	movs	r2, #128	; 0x80
 8002230:	611a      	str	r2, [r3, #16]
 8002232:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 8002234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002238:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 800223a:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 800223c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002240:	611a      	str	r2, [r3, #16]
 8002242:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 8002244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002248:	615a      	str	r2, [r3, #20]
 800224a:	88bb      	ldrh	r3, [r7, #4]
 800224c:	4a1f      	ldr	r2, [pc, #124]	; (80022cc <LCD_Fast_DrawPoint+0x3a0>)
 800224e:	b2db      	uxtb	r3, r3
 8002250:	60d3      	str	r3, [r2, #12]
 8002252:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 8002254:	2280      	movs	r2, #128	; 0x80
 8002256:	615a      	str	r2, [r3, #20]
 8002258:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 800225a:	2280      	movs	r2, #128	; 0x80
 800225c:	611a      	str	r2, [r3, #16]
 800225e:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 8002260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002264:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8002266:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 8002268:	f44f 7280 	mov.w	r2, #256	; 0x100
 800226c:	611a      	str	r2, [r3, #16]
 800226e:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 8002270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002274:	615a      	str	r2, [r3, #20]
 8002276:	88bb      	ldrh	r3, [r7, #4]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	b29a      	uxth	r2, r3
 800227c:	4b13      	ldr	r3, [pc, #76]	; (80022cc <LCD_Fast_DrawPoint+0x3a0>)
 800227e:	60da      	str	r2, [r3, #12]
 8002280:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 8002282:	2280      	movs	r2, #128	; 0x80
 8002284:	615a      	str	r2, [r3, #20]
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 8002288:	2280      	movs	r2, #128	; 0x80
 800228a:	611a      	str	r2, [r3, #16]
 800228c:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 800228e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002292:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 8002296:	f44f 7280 	mov.w	r2, #256	; 0x100
 800229a:	611a      	str	r2, [r3, #16]
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 800229e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022a2:	615a      	str	r2, [r3, #20]
 80022a4:	88bb      	ldrh	r3, [r7, #4]
 80022a6:	4a09      	ldr	r2, [pc, #36]	; (80022cc <LCD_Fast_DrawPoint+0x3a0>)
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	60d3      	str	r3, [r2, #12]
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 80022ae:	2280      	movs	r2, #128	; 0x80
 80022b0:	615a      	str	r2, [r3, #20]
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 80022b4:	2280      	movs	r2, #128	; 0x80
 80022b6:	611a      	str	r2, [r3, #16]
 80022b8:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <LCD_Fast_DrawPoint+0x39c>)
 80022ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022be:	611a      	str	r2, [r3, #16]
 80022c0:	e095      	b.n	80023ee <LCD_Fast_DrawPoint+0x4c2>
 80022c2:	bf00      	nop
 80022c4:	200004b0 	.word	0x200004b0
 80022c8:	40011000 	.word	0x40011000
 80022cc:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 80022d0:	4b5e      	ldr	r3, [pc, #376]	; (800244c <LCD_Fast_DrawPoint+0x520>)
 80022d2:	889b      	ldrh	r3, [r3, #4]
 80022d4:	f646 0204 	movw	r2, #26628	; 0x6804
 80022d8:	4293      	cmp	r3, r2
 80022da:	d16f      	bne.n	80023bc <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 80022dc:	4b5b      	ldr	r3, [pc, #364]	; (800244c <LCD_Fast_DrawPoint+0x520>)
 80022de:	799b      	ldrb	r3, [r3, #6]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d106      	bne.n	80022f2 <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 80022e4:	4b59      	ldr	r3, [pc, #356]	; (800244c <LCD_Fast_DrawPoint+0x520>)
 80022e6:	881a      	ldrh	r2, [r3, #0]
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80022f2:	4b56      	ldr	r3, [pc, #344]	; (800244c <LCD_Fast_DrawPoint+0x520>)
 80022f4:	895b      	ldrh	r3, [r3, #10]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe ff38 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80022fc:	4b54      	ldr	r3, [pc, #336]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 80022fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002302:	611a      	str	r2, [r3, #16]
 8002304:	4b52      	ldr	r3, [pc, #328]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 8002306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800230a:	615a      	str	r2, [r3, #20]
 800230c:	88fb      	ldrh	r3, [r7, #6]
 800230e:	0a1b      	lsrs	r3, r3, #8
 8002310:	b29a      	uxth	r2, r3
 8002312:	4b50      	ldr	r3, [pc, #320]	; (8002454 <LCD_Fast_DrawPoint+0x528>)
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	4b4e      	ldr	r3, [pc, #312]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 8002318:	2280      	movs	r2, #128	; 0x80
 800231a:	615a      	str	r2, [r3, #20]
 800231c:	4b4c      	ldr	r3, [pc, #304]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	611a      	str	r2, [r3, #16]
 8002322:	4b4b      	ldr	r3, [pc, #300]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 8002324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002328:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800232a:	4b49      	ldr	r3, [pc, #292]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 800232c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002330:	611a      	str	r2, [r3, #16]
 8002332:	4b47      	ldr	r3, [pc, #284]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 8002334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002338:	615a      	str	r2, [r3, #20]
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	4a45      	ldr	r2, [pc, #276]	; (8002454 <LCD_Fast_DrawPoint+0x528>)
 800233e:	b2db      	uxtb	r3, r3
 8002340:	60d3      	str	r3, [r2, #12]
 8002342:	4b43      	ldr	r3, [pc, #268]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 8002344:	2280      	movs	r2, #128	; 0x80
 8002346:	615a      	str	r2, [r3, #20]
 8002348:	4b41      	ldr	r3, [pc, #260]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 800234a:	2280      	movs	r2, #128	; 0x80
 800234c:	611a      	str	r2, [r3, #16]
 800234e:	4b40      	ldr	r3, [pc, #256]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 8002350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002354:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002356:	4b3d      	ldr	r3, [pc, #244]	; (800244c <LCD_Fast_DrawPoint+0x520>)
 8002358:	899b      	ldrh	r3, [r3, #12]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe ff06 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8002360:	4b3b      	ldr	r3, [pc, #236]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 8002362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002366:	611a      	str	r2, [r3, #16]
 8002368:	4b39      	ldr	r3, [pc, #228]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 800236a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800236e:	615a      	str	r2, [r3, #20]
 8002370:	88bb      	ldrh	r3, [r7, #4]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	b29a      	uxth	r2, r3
 8002376:	4b37      	ldr	r3, [pc, #220]	; (8002454 <LCD_Fast_DrawPoint+0x528>)
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	4b35      	ldr	r3, [pc, #212]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 800237c:	2280      	movs	r2, #128	; 0x80
 800237e:	615a      	str	r2, [r3, #20]
 8002380:	4b33      	ldr	r3, [pc, #204]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 8002382:	2280      	movs	r2, #128	; 0x80
 8002384:	611a      	str	r2, [r3, #16]
 8002386:	4b32      	ldr	r3, [pc, #200]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 8002388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800238c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 800238e:	4b30      	ldr	r3, [pc, #192]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 8002390:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002394:	611a      	str	r2, [r3, #16]
 8002396:	4b2e      	ldr	r3, [pc, #184]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 8002398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800239c:	615a      	str	r2, [r3, #20]
 800239e:	88bb      	ldrh	r3, [r7, #4]
 80023a0:	4a2c      	ldr	r2, [pc, #176]	; (8002454 <LCD_Fast_DrawPoint+0x528>)
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	60d3      	str	r3, [r2, #12]
 80023a6:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 80023a8:	2280      	movs	r2, #128	; 0x80
 80023aa:	615a      	str	r2, [r3, #20]
 80023ac:	4b28      	ldr	r3, [pc, #160]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 80023ae:	2280      	movs	r2, #128	; 0x80
 80023b0:	611a      	str	r2, [r3, #16]
 80023b2:	4b27      	ldr	r3, [pc, #156]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 80023b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023b8:	611a      	str	r2, [r3, #16]
 80023ba:	e018      	b.n	80023ee <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 80023bc:	4b23      	ldr	r3, [pc, #140]	; (800244c <LCD_Fast_DrawPoint+0x520>)
 80023be:	799b      	ldrb	r3, [r3, #6]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d106      	bne.n	80023d2 <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 80023c4:	4b21      	ldr	r3, [pc, #132]	; (800244c <LCD_Fast_DrawPoint+0x520>)
 80023c6:	881a      	ldrh	r2, [r3, #0]
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 80023d2:	4b1e      	ldr	r3, [pc, #120]	; (800244c <LCD_Fast_DrawPoint+0x520>)
 80023d4:	895b      	ldrh	r3, [r3, #10]
 80023d6:	88fa      	ldrh	r2, [r7, #6]
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe ff52 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 80023e0:	4b1a      	ldr	r3, [pc, #104]	; (800244c <LCD_Fast_DrawPoint+0x520>)
 80023e2:	899b      	ldrh	r3, [r3, #12]
 80023e4:	88ba      	ldrh	r2, [r7, #4]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe ff4b 	bl	8001284 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 80023ee:	4b18      	ldr	r3, [pc, #96]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 80023f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023f4:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 80023f6:	4b16      	ldr	r3, [pc, #88]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 80023f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023fc:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 80023fe:	4b13      	ldr	r3, [pc, #76]	; (800244c <LCD_Fast_DrawPoint+0x520>)
 8002400:	891a      	ldrh	r2, [r3, #8]
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <LCD_Fast_DrawPoint+0x528>)
 8002404:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 8002408:	2280      	movs	r2, #128	; 0x80
 800240a:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 800240c:	4b10      	ldr	r3, [pc, #64]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 800240e:	2280      	movs	r2, #128	; 0x80
 8002410:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8002412:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 8002414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002418:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 800241c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002420:	611a      	str	r2, [r3, #16]
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 8002424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002428:	615a      	str	r2, [r3, #20]
 800242a:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <LCD_Fast_DrawPoint+0x528>)
 800242c:	887b      	ldrh	r3, [r7, #2]
 800242e:	60d3      	str	r3, [r2, #12]
 8002430:	4b07      	ldr	r3, [pc, #28]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 8002432:	2280      	movs	r2, #128	; 0x80
 8002434:	615a      	str	r2, [r3, #20]
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 8002438:	2280      	movs	r2, #128	; 0x80
 800243a:	611a      	str	r2, [r3, #16]
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <LCD_Fast_DrawPoint+0x524>)
 800243e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002442:	611a      	str	r2, [r3, #16]
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	200004b0 	.word	0x200004b0
 8002450:	40011000 	.word	0x40011000
 8002454:	40010c00 	.word	0x40010c00

08002458 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8002458:	b590      	push	{r4, r7, lr}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8002462:	20be      	movs	r0, #190	; 0xbe
 8002464:	f7fe fe82 	bl	800116c <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8002468:	4b4b      	ldr	r3, [pc, #300]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 800246a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800246e:	611a      	str	r2, [r3, #16]
 8002470:	4b49      	ldr	r3, [pc, #292]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 8002472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002476:	615a      	str	r2, [r3, #20]
 8002478:	4b48      	ldr	r3, [pc, #288]	; (800259c <LCD_SSD_BackLightSet+0x144>)
 800247a:	2205      	movs	r2, #5
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	4b46      	ldr	r3, [pc, #280]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 8002480:	2280      	movs	r2, #128	; 0x80
 8002482:	615a      	str	r2, [r3, #20]
 8002484:	4b44      	ldr	r3, [pc, #272]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 8002486:	2280      	movs	r2, #128	; 0x80
 8002488:	611a      	str	r2, [r3, #16]
 800248a:	4b43      	ldr	r3, [pc, #268]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 800248c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002490:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8002492:	4b41      	ldr	r3, [pc, #260]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 8002494:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002498:	611a      	str	r2, [r3, #16]
 800249a:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 800249c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a0:	615a      	str	r2, [r3, #20]
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe f819 	bl	80004dc <__aeabi_i2d>
 80024aa:	a339      	add	r3, pc, #228	; (adr r3, 8002590 <LCD_SSD_BackLightSet+0x138>)
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	f7fe f87e 	bl	80005b0 <__aeabi_dmul>
 80024b4:	4603      	mov	r3, r0
 80024b6:	460c      	mov	r4, r1
 80024b8:	461a      	mov	r2, r3
 80024ba:	4623      	mov	r3, r4
 80024bc:	4c37      	ldr	r4, [pc, #220]	; (800259c <LCD_SSD_BackLightSet+0x144>)
 80024be:	4610      	mov	r0, r2
 80024c0:	4619      	mov	r1, r3
 80024c2:	f7fe fa87 	bl	80009d4 <__aeabi_d2uiz>
 80024c6:	4603      	mov	r3, r0
 80024c8:	60e3      	str	r3, [r4, #12]
 80024ca:	4b33      	ldr	r3, [pc, #204]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 80024cc:	2280      	movs	r2, #128	; 0x80
 80024ce:	615a      	str	r2, [r3, #20]
 80024d0:	4b31      	ldr	r3, [pc, #196]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 80024d2:	2280      	movs	r2, #128	; 0x80
 80024d4:	611a      	str	r2, [r3, #16]
 80024d6:	4b30      	ldr	r3, [pc, #192]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 80024d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024dc:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 80024de:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 80024e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024e4:	611a      	str	r2, [r3, #16]
 80024e6:	4b2c      	ldr	r3, [pc, #176]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 80024e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ec:	615a      	str	r2, [r3, #20]
 80024ee:	4b2b      	ldr	r3, [pc, #172]	; (800259c <LCD_SSD_BackLightSet+0x144>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	60da      	str	r2, [r3, #12]
 80024f4:	4b28      	ldr	r3, [pc, #160]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 80024f6:	2280      	movs	r2, #128	; 0x80
 80024f8:	615a      	str	r2, [r3, #20]
 80024fa:	4b27      	ldr	r3, [pc, #156]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 80024fc:	2280      	movs	r2, #128	; 0x80
 80024fe:	611a      	str	r2, [r3, #16]
 8002500:	4b25      	ldr	r3, [pc, #148]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 8002502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002506:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8002508:	4b23      	ldr	r3, [pc, #140]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 800250a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800250e:	611a      	str	r2, [r3, #16]
 8002510:	4b21      	ldr	r3, [pc, #132]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 8002512:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002516:	615a      	str	r2, [r3, #20]
 8002518:	4b20      	ldr	r3, [pc, #128]	; (800259c <LCD_SSD_BackLightSet+0x144>)
 800251a:	22ff      	movs	r2, #255	; 0xff
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	615a      	str	r2, [r3, #20]
 8002524:	4b1c      	ldr	r3, [pc, #112]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 8002526:	2280      	movs	r2, #128	; 0x80
 8002528:	611a      	str	r2, [r3, #16]
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 800252c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002530:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8002532:	4b19      	ldr	r3, [pc, #100]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 8002534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002538:	611a      	str	r2, [r3, #16]
 800253a:	4b17      	ldr	r3, [pc, #92]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 800253c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002540:	615a      	str	r2, [r3, #20]
 8002542:	4b16      	ldr	r3, [pc, #88]	; (800259c <LCD_SSD_BackLightSet+0x144>)
 8002544:	2200      	movs	r2, #0
 8002546:	60da      	str	r2, [r3, #12]
 8002548:	4b13      	ldr	r3, [pc, #76]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 800254a:	2280      	movs	r2, #128	; 0x80
 800254c:	615a      	str	r2, [r3, #20]
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 8002550:	2280      	movs	r2, #128	; 0x80
 8002552:	611a      	str	r2, [r3, #16]
 8002554:	4b10      	ldr	r3, [pc, #64]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 8002556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800255a:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 800255c:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 800255e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002562:	611a      	str	r2, [r3, #16]
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 8002566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800256a:	615a      	str	r2, [r3, #20]
 800256c:	4b0b      	ldr	r3, [pc, #44]	; (800259c <LCD_SSD_BackLightSet+0x144>)
 800256e:	2200      	movs	r2, #0
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	615a      	str	r2, [r3, #20]
 8002578:	4b07      	ldr	r3, [pc, #28]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 800257a:	2280      	movs	r2, #128	; 0x80
 800257c:	611a      	str	r2, [r3, #16]
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <LCD_SSD_BackLightSet+0x140>)
 8002580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002584:	611a      	str	r2, [r3, #16]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	bd90      	pop	{r4, r7, pc}
 800258e:	bf00      	nop
 8002590:	66666666 	.word	0x66666666
 8002594:	40046666 	.word	0x40046666
 8002598:	40011000 	.word	0x40011000
 800259c:	40010c00 	.word	0x40010c00

080025a0 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d177      	bne.n	80026a0 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 80025b0:	4b80      	ldr	r3, [pc, #512]	; (80027b4 <LCD_Display_Dir+0x214>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 80025b6:	4b7f      	ldr	r3, [pc, #508]	; (80027b4 <LCD_Display_Dir+0x214>)
 80025b8:	22f0      	movs	r2, #240	; 0xf0
 80025ba:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 80025bc:	4b7d      	ldr	r3, [pc, #500]	; (80027b4 <LCD_Display_Dir+0x214>)
 80025be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80025c2:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80025c4:	4b7b      	ldr	r3, [pc, #492]	; (80027b4 <LCD_Display_Dir+0x214>)
 80025c6:	889b      	ldrh	r3, [r3, #4]
 80025c8:	f249 3241 	movw	r2, #37697	; 0x9341
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00b      	beq.n	80025e8 <LCD_Display_Dir+0x48>
 80025d0:	4b78      	ldr	r3, [pc, #480]	; (80027b4 <LCD_Display_Dir+0x214>)
 80025d2:	889b      	ldrh	r3, [r3, #4]
 80025d4:	f646 0204 	movw	r2, #26628	; 0x6804
 80025d8:	4293      	cmp	r3, r2
 80025da:	d005      	beq.n	80025e8 <LCD_Display_Dir+0x48>
 80025dc:	4b75      	ldr	r3, [pc, #468]	; (80027b4 <LCD_Display_Dir+0x214>)
 80025de:	889b      	ldrh	r3, [r3, #4]
 80025e0:	f245 3210 	movw	r2, #21264	; 0x5310
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d11e      	bne.n	8002626 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 80025e8:	4b72      	ldr	r3, [pc, #456]	; (80027b4 <LCD_Display_Dir+0x214>)
 80025ea:	222c      	movs	r2, #44	; 0x2c
 80025ec:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 80025ee:	4b71      	ldr	r3, [pc, #452]	; (80027b4 <LCD_Display_Dir+0x214>)
 80025f0:	222a      	movs	r2, #42	; 0x2a
 80025f2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 80025f4:	4b6f      	ldr	r3, [pc, #444]	; (80027b4 <LCD_Display_Dir+0x214>)
 80025f6:	222b      	movs	r2, #43	; 0x2b
 80025f8:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80025fa:	4b6e      	ldr	r3, [pc, #440]	; (80027b4 <LCD_Display_Dir+0x214>)
 80025fc:	889b      	ldrh	r3, [r3, #4]
 80025fe:	f646 0204 	movw	r2, #26628	; 0x6804
 8002602:	4293      	cmp	r3, r2
 8002604:	d006      	beq.n	8002614 <LCD_Display_Dir+0x74>
 8002606:	4b6b      	ldr	r3, [pc, #428]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002608:	889b      	ldrh	r3, [r3, #4]
 800260a:	f245 3210 	movw	r2, #21264	; 0x5310
 800260e:	4293      	cmp	r3, r2
 8002610:	f040 80c7 	bne.w	80027a2 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8002614:	4b67      	ldr	r3, [pc, #412]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002616:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800261a:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 800261c:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <LCD_Display_Dir+0x214>)
 800261e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002622:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8002624:	e0bd      	b.n	80027a2 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8002626:	4b63      	ldr	r3, [pc, #396]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002628:	889b      	ldrh	r3, [r3, #4]
 800262a:	f245 5210 	movw	r2, #21776	; 0x5510
 800262e:	4293      	cmp	r3, r2
 8002630:	d114      	bne.n	800265c <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8002632:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002634:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8002638:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 800263a:	4b5e      	ldr	r3, [pc, #376]	; (80027b4 <LCD_Display_Dir+0x214>)
 800263c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8002640:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8002642:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002644:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8002648:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 800264a:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <LCD_Display_Dir+0x214>)
 800264c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002650:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8002652:	4b58      	ldr	r3, [pc, #352]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002654:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002658:	805a      	strh	r2, [r3, #2]
 800265a:	e0a3      	b.n	80027a4 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 800265c:	4b55      	ldr	r3, [pc, #340]	; (80027b4 <LCD_Display_Dir+0x214>)
 800265e:	889b      	ldrh	r3, [r3, #4]
 8002660:	f641 1263 	movw	r2, #6499	; 0x1963
 8002664:	4293      	cmp	r3, r2
 8002666:	d111      	bne.n	800268c <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8002668:	4b52      	ldr	r3, [pc, #328]	; (80027b4 <LCD_Display_Dir+0x214>)
 800266a:	222c      	movs	r2, #44	; 0x2c
 800266c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 800266e:	4b51      	ldr	r3, [pc, #324]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002670:	222b      	movs	r2, #43	; 0x2b
 8002672:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8002674:	4b4f      	ldr	r3, [pc, #316]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002676:	222a      	movs	r2, #42	; 0x2a
 8002678:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 800267a:	4b4e      	ldr	r3, [pc, #312]	; (80027b4 <LCD_Display_Dir+0x214>)
 800267c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002680:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8002682:	4b4c      	ldr	r3, [pc, #304]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002684:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002688:	805a      	strh	r2, [r3, #2]
 800268a:	e08b      	b.n	80027a4 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 800268c:	4b49      	ldr	r3, [pc, #292]	; (80027b4 <LCD_Display_Dir+0x214>)
 800268e:	2222      	movs	r2, #34	; 0x22
 8002690:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8002692:	4b48      	ldr	r3, [pc, #288]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002694:	2220      	movs	r2, #32
 8002696:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8002698:	4b46      	ldr	r3, [pc, #280]	; (80027b4 <LCD_Display_Dir+0x214>)
 800269a:	2221      	movs	r2, #33	; 0x21
 800269c:	819a      	strh	r2, [r3, #12]
 800269e:	e081      	b.n	80027a4 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 80026a0:	4b44      	ldr	r3, [pc, #272]	; (80027b4 <LCD_Display_Dir+0x214>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 80026a6:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <LCD_Display_Dir+0x214>)
 80026a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026ac:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 80026ae:	4b41      	ldr	r3, [pc, #260]	; (80027b4 <LCD_Display_Dir+0x214>)
 80026b0:	22f0      	movs	r2, #240	; 0xf0
 80026b2:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80026b4:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <LCD_Display_Dir+0x214>)
 80026b6:	889b      	ldrh	r3, [r3, #4]
 80026b8:	f249 3241 	movw	r2, #37697	; 0x9341
 80026bc:	4293      	cmp	r3, r2
 80026be:	d005      	beq.n	80026cc <LCD_Display_Dir+0x12c>
 80026c0:	4b3c      	ldr	r3, [pc, #240]	; (80027b4 <LCD_Display_Dir+0x214>)
 80026c2:	889b      	ldrh	r3, [r3, #4]
 80026c4:	f245 3210 	movw	r2, #21264	; 0x5310
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d109      	bne.n	80026e0 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 80026cc:	4b39      	ldr	r3, [pc, #228]	; (80027b4 <LCD_Display_Dir+0x214>)
 80026ce:	222c      	movs	r2, #44	; 0x2c
 80026d0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 80026d2:	4b38      	ldr	r3, [pc, #224]	; (80027b4 <LCD_Display_Dir+0x214>)
 80026d4:	222a      	movs	r2, #42	; 0x2a
 80026d6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 80026d8:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <LCD_Display_Dir+0x214>)
 80026da:	222b      	movs	r2, #43	; 0x2b
 80026dc:	819a      	strh	r2, [r3, #12]
 80026de:	e04b      	b.n	8002778 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 80026e0:	4b34      	ldr	r3, [pc, #208]	; (80027b4 <LCD_Display_Dir+0x214>)
 80026e2:	889b      	ldrh	r3, [r3, #4]
 80026e4:	f646 0204 	movw	r2, #26628	; 0x6804
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d109      	bne.n	8002700 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 80026ec:	4b31      	ldr	r3, [pc, #196]	; (80027b4 <LCD_Display_Dir+0x214>)
 80026ee:	222c      	movs	r2, #44	; 0x2c
 80026f0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 80026f2:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <LCD_Display_Dir+0x214>)
 80026f4:	222b      	movs	r2, #43	; 0x2b
 80026f6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 80026f8:	4b2e      	ldr	r3, [pc, #184]	; (80027b4 <LCD_Display_Dir+0x214>)
 80026fa:	222a      	movs	r2, #42	; 0x2a
 80026fc:	819a      	strh	r2, [r3, #12]
 80026fe:	e03b      	b.n	8002778 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8002700:	4b2c      	ldr	r3, [pc, #176]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002702:	889b      	ldrh	r3, [r3, #4]
 8002704:	f245 5210 	movw	r2, #21776	; 0x5510
 8002708:	4293      	cmp	r3, r2
 800270a:	d114      	bne.n	8002736 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 800270c:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <LCD_Display_Dir+0x214>)
 800270e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8002712:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002716:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 800271a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 800271c:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <LCD_Display_Dir+0x214>)
 800271e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8002722:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8002724:	4b23      	ldr	r3, [pc, #140]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002726:	f44f 7248 	mov.w	r2, #800	; 0x320
 800272a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <LCD_Display_Dir+0x214>)
 800272e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002732:	805a      	strh	r2, [r3, #2]
 8002734:	e020      	b.n	8002778 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8002736:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002738:	889b      	ldrh	r3, [r3, #4]
 800273a:	f641 1263 	movw	r2, #6499	; 0x1963
 800273e:	4293      	cmp	r3, r2
 8002740:	d111      	bne.n	8002766 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8002742:	4b1c      	ldr	r3, [pc, #112]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002744:	222c      	movs	r2, #44	; 0x2c
 8002746:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8002748:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <LCD_Display_Dir+0x214>)
 800274a:	222a      	movs	r2, #42	; 0x2a
 800274c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 800274e:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002750:	222b      	movs	r2, #43	; 0x2b
 8002752:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8002754:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002756:	f44f 7248 	mov.w	r2, #800	; 0x320
 800275a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 800275c:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <LCD_Display_Dir+0x214>)
 800275e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002762:	805a      	strh	r2, [r3, #2]
 8002764:	e008      	b.n	8002778 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8002766:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002768:	2222      	movs	r2, #34	; 0x22
 800276a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <LCD_Display_Dir+0x214>)
 800276e:	2221      	movs	r2, #33	; 0x21
 8002770:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002774:	2220      	movs	r2, #32
 8002776:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8002778:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <LCD_Display_Dir+0x214>)
 800277a:	889b      	ldrh	r3, [r3, #4]
 800277c:	f646 0204 	movw	r2, #26628	; 0x6804
 8002780:	4293      	cmp	r3, r2
 8002782:	d005      	beq.n	8002790 <LCD_Display_Dir+0x1f0>
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002786:	889b      	ldrh	r3, [r3, #4]
 8002788:	f245 3210 	movw	r2, #21264	; 0x5310
 800278c:	4293      	cmp	r3, r2
 800278e:	d109      	bne.n	80027a4 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <LCD_Display_Dir+0x214>)
 8002792:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002796:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <LCD_Display_Dir+0x214>)
 800279a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800279e:	805a      	strh	r2, [r3, #2]
 80027a0:	e000      	b.n	80027a4 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80027a2:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7ff f87f 	bl	80018a8 <LCD_Scan_Dir>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	200004b0 	.word	0x200004b0

080027b8 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 80027be:	4b90      	ldr	r3, [pc, #576]	; (8002a00 <LCD_Init+0x248>)
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	4a8f      	ldr	r2, [pc, #572]	; (8002a00 <LCD_Init+0x248>)
 80027c4:	f043 0308 	orr.w	r3, r3, #8
 80027c8:	6193      	str	r3, [r2, #24]
 80027ca:	4b8d      	ldr	r3, [pc, #564]	; (8002a00 <LCD_Init+0x248>)
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 80027d6:	4b8a      	ldr	r3, [pc, #552]	; (8002a00 <LCD_Init+0x248>)
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	4a89      	ldr	r2, [pc, #548]	; (8002a00 <LCD_Init+0x248>)
 80027dc:	f043 0310 	orr.w	r3, r3, #16
 80027e0:	6193      	str	r3, [r2, #24]
 80027e2:	4b87      	ldr	r3, [pc, #540]	; (8002a00 <LCD_Init+0x248>)
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 80027ee:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80027f2:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 80027f4:	2301      	movs	r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 80027f8:	2301      	movs	r3, #1
 80027fa:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 80027fc:	2303      	movs	r3, #3
 80027fe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8002800:	f107 0308 	add.w	r3, r7, #8
 8002804:	4619      	mov	r1, r3
 8002806:	487f      	ldr	r0, [pc, #508]	; (8002a04 <LCD_Init+0x24c>)
 8002808:	f005 fd8c 	bl	8008324 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 800280c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002810:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8002812:	f107 0308 	add.w	r3, r7, #8
 8002816:	4619      	mov	r1, r3
 8002818:	487b      	ldr	r0, [pc, #492]	; (8002a08 <LCD_Init+0x250>)
 800281a:	f005 fd83 	bl	8008324 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 800281e:	2032      	movs	r0, #50	; 0x32
 8002820:	f005 fb48 	bl	8007eb4 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8002824:	2101      	movs	r1, #1
 8002826:	2000      	movs	r0, #0
 8002828:	f7fe fd2c 	bl	8001284 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 800282c:	2032      	movs	r0, #50	; 0x32
 800282e:	f005 fb41 	bl	8007eb4 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8002832:	2000      	movs	r0, #0
 8002834:	f7fe fd50 	bl	80012d8 <LCD_ReadReg>
 8002838:	4603      	mov	r3, r0
 800283a:	461a      	mov	r2, r3
 800283c:	4b73      	ldr	r3, [pc, #460]	; (8002a0c <LCD_Init+0x254>)
 800283e:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8002840:	4b72      	ldr	r3, [pc, #456]	; (8002a0c <LCD_Init+0x254>)
 8002842:	889b      	ldrh	r3, [r3, #4]
 8002844:	2bfe      	cmp	r3, #254	; 0xfe
 8002846:	d90b      	bls.n	8002860 <LCD_Init+0xa8>
 8002848:	4b70      	ldr	r3, [pc, #448]	; (8002a0c <LCD_Init+0x254>)
 800284a:	889b      	ldrh	r3, [r3, #4]
 800284c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002850:	4293      	cmp	r3, r2
 8002852:	d005      	beq.n	8002860 <LCD_Init+0xa8>
 8002854:	4b6d      	ldr	r3, [pc, #436]	; (8002a0c <LCD_Init+0x254>)
 8002856:	889b      	ldrh	r3, [r3, #4]
 8002858:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 800285c:	f040 80c8 	bne.w	80029f0 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8002860:	20d3      	movs	r0, #211	; 0xd3
 8002862:	f7fe fc83 	bl	800116c <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8002866:	f7fe fcc9 	bl	80011fc <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 800286a:	f7fe fcc7 	bl	80011fc <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 800286e:	f7fe fcc5 	bl	80011fc <LCD_RD_DATA>
 8002872:	4603      	mov	r3, r0
 8002874:	461a      	mov	r2, r3
 8002876:	4b65      	ldr	r3, [pc, #404]	; (8002a0c <LCD_Init+0x254>)
 8002878:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 800287a:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <LCD_Init+0x254>)
 800287c:	889b      	ldrh	r3, [r3, #4]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	b29a      	uxth	r2, r3
 8002882:	4b62      	ldr	r3, [pc, #392]	; (8002a0c <LCD_Init+0x254>)
 8002884:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8002886:	f7fe fcb9 	bl	80011fc <LCD_RD_DATA>
 800288a:	4603      	mov	r3, r0
 800288c:	461a      	mov	r2, r3
 800288e:	4b5f      	ldr	r3, [pc, #380]	; (8002a0c <LCD_Init+0x254>)
 8002890:	889b      	ldrh	r3, [r3, #4]
 8002892:	4313      	orrs	r3, r2
 8002894:	b29a      	uxth	r2, r3
 8002896:	4b5d      	ldr	r3, [pc, #372]	; (8002a0c <LCD_Init+0x254>)
 8002898:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 800289a:	4b5c      	ldr	r3, [pc, #368]	; (8002a0c <LCD_Init+0x254>)
 800289c:	889b      	ldrh	r3, [r3, #4]
 800289e:	f249 3241 	movw	r2, #37697	; 0x9341
 80028a2:	4293      	cmp	r3, r2
 80028a4:	f000 80a4 	beq.w	80029f0 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 80028a8:	20bf      	movs	r0, #191	; 0xbf
 80028aa:	f7fe fc5f 	bl	800116c <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 80028ae:	f7fe fca5 	bl	80011fc <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 80028b2:	f7fe fca3 	bl	80011fc <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 80028b6:	f7fe fca1 	bl	80011fc <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 80028ba:	f7fe fc9f 	bl	80011fc <LCD_RD_DATA>
 80028be:	4603      	mov	r3, r0
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b52      	ldr	r3, [pc, #328]	; (8002a0c <LCD_Init+0x254>)
 80028c4:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 80028c6:	4b51      	ldr	r3, [pc, #324]	; (8002a0c <LCD_Init+0x254>)
 80028c8:	889b      	ldrh	r3, [r3, #4]
 80028ca:	021b      	lsls	r3, r3, #8
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	4b4f      	ldr	r3, [pc, #316]	; (8002a0c <LCD_Init+0x254>)
 80028d0:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 80028d2:	f7fe fc93 	bl	80011fc <LCD_RD_DATA>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461a      	mov	r2, r3
 80028da:	4b4c      	ldr	r3, [pc, #304]	; (8002a0c <LCD_Init+0x254>)
 80028dc:	889b      	ldrh	r3, [r3, #4]
 80028de:	4313      	orrs	r3, r2
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	4b4a      	ldr	r3, [pc, #296]	; (8002a0c <LCD_Init+0x254>)
 80028e4:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 80028e6:	4b49      	ldr	r3, [pc, #292]	; (8002a0c <LCD_Init+0x254>)
 80028e8:	889b      	ldrh	r3, [r3, #4]
 80028ea:	f646 0204 	movw	r2, #26628	; 0x6804
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d07e      	beq.n	80029f0 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 80028f2:	20d4      	movs	r0, #212	; 0xd4
 80028f4:	f7fe fc3a 	bl	800116c <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 80028f8:	f7fe fc80 	bl	80011fc <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 80028fc:	f7fe fc7e 	bl	80011fc <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8002900:	f7fe fc7c 	bl	80011fc <LCD_RD_DATA>
 8002904:	4603      	mov	r3, r0
 8002906:	461a      	mov	r2, r3
 8002908:	4b40      	ldr	r3, [pc, #256]	; (8002a0c <LCD_Init+0x254>)
 800290a:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 800290c:	4b3f      	ldr	r3, [pc, #252]	; (8002a0c <LCD_Init+0x254>)
 800290e:	889b      	ldrh	r3, [r3, #4]
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	b29a      	uxth	r2, r3
 8002914:	4b3d      	ldr	r3, [pc, #244]	; (8002a0c <LCD_Init+0x254>)
 8002916:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8002918:	f7fe fc70 	bl	80011fc <LCD_RD_DATA>
 800291c:	4603      	mov	r3, r0
 800291e:	461a      	mov	r2, r3
 8002920:	4b3a      	ldr	r3, [pc, #232]	; (8002a0c <LCD_Init+0x254>)
 8002922:	889b      	ldrh	r3, [r3, #4]
 8002924:	4313      	orrs	r3, r2
 8002926:	b29a      	uxth	r2, r3
 8002928:	4b38      	ldr	r3, [pc, #224]	; (8002a0c <LCD_Init+0x254>)
 800292a:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 800292c:	4b37      	ldr	r3, [pc, #220]	; (8002a0c <LCD_Init+0x254>)
 800292e:	889b      	ldrh	r3, [r3, #4]
 8002930:	f245 3210 	movw	r2, #21264	; 0x5310
 8002934:	4293      	cmp	r3, r2
 8002936:	d05b      	beq.n	80029f0 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8002938:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 800293c:	f7fe fc16 	bl	800116c <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8002940:	f7fe fc5c 	bl	80011fc <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8002944:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8002948:	f7fe fc10 	bl	800116c <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 800294c:	f7fe fc56 	bl	80011fc <LCD_RD_DATA>
 8002950:	4603      	mov	r3, r0
 8002952:	461a      	mov	r2, r3
 8002954:	4b2d      	ldr	r3, [pc, #180]	; (8002a0c <LCD_Init+0x254>)
 8002956:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8002958:	4b2c      	ldr	r3, [pc, #176]	; (8002a0c <LCD_Init+0x254>)
 800295a:	889b      	ldrh	r3, [r3, #4]
 800295c:	021b      	lsls	r3, r3, #8
 800295e:	b29a      	uxth	r2, r3
 8002960:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <LCD_Init+0x254>)
 8002962:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8002964:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8002968:	f7fe fc00 	bl	800116c <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 800296c:	f7fe fc46 	bl	80011fc <LCD_RD_DATA>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <LCD_Init+0x254>)
 8002976:	889b      	ldrh	r3, [r3, #4]
 8002978:	4313      	orrs	r3, r2
 800297a:	b29a      	uxth	r2, r3
 800297c:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <LCD_Init+0x254>)
 800297e:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8002980:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <LCD_Init+0x254>)
 8002982:	889b      	ldrh	r3, [r3, #4]
 8002984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002988:	d103      	bne.n	8002992 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <LCD_Init+0x254>)
 800298c:	f245 5210 	movw	r2, #21776	; 0x5510
 8002990:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8002992:	4b1e      	ldr	r3, [pc, #120]	; (8002a0c <LCD_Init+0x254>)
 8002994:	889b      	ldrh	r3, [r3, #4]
 8002996:	f245 5210 	movw	r2, #21776	; 0x5510
 800299a:	4293      	cmp	r3, r2
 800299c:	d028      	beq.n	80029f0 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 800299e:	20a1      	movs	r0, #161	; 0xa1
 80029a0:	f7fe fbe4 	bl	800116c <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 80029a4:	f7fe fc2a 	bl	80011fc <LCD_RD_DATA>
 80029a8:	4603      	mov	r3, r0
 80029aa:	461a      	mov	r2, r3
 80029ac:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <LCD_Init+0x254>)
 80029ae:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 80029b0:	f7fe fc24 	bl	80011fc <LCD_RD_DATA>
 80029b4:	4603      	mov	r3, r0
 80029b6:	461a      	mov	r2, r3
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <LCD_Init+0x254>)
 80029ba:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 80029bc:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <LCD_Init+0x254>)
 80029be:	889b      	ldrh	r3, [r3, #4]
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <LCD_Init+0x254>)
 80029c6:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 80029c8:	f7fe fc18 	bl	80011fc <LCD_RD_DATA>
 80029cc:	4603      	mov	r3, r0
 80029ce:	461a      	mov	r2, r3
 80029d0:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <LCD_Init+0x254>)
 80029d2:	889b      	ldrh	r3, [r3, #4]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <LCD_Init+0x254>)
 80029da:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <LCD_Init+0x254>)
 80029de:	889b      	ldrh	r3, [r3, #4]
 80029e0:	f245 7261 	movw	r2, #22369	; 0x5761
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d103      	bne.n	80029f0 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 80029e8:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <LCD_Init+0x254>)
 80029ea:	f641 1263 	movw	r2, #6499	; 0x1963
 80029ee:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <LCD_Init+0x254>)
 80029f2:	889b      	ldrh	r3, [r3, #4]
 80029f4:	f249 3241 	movw	r2, #37697	; 0x9341
 80029f8:	4293      	cmp	r3, r2
 80029fa:	f040 811f 	bne.w	8002c3c <LCD_Init+0x484>
 80029fe:	e007      	b.n	8002a10 <LCD_Init+0x258>
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40011000 	.word	0x40011000
 8002a08:	40010c00 	.word	0x40010c00
 8002a0c:	200004b0 	.word	0x200004b0
			{
		LCD_WR_REG(0xCF);
 8002a10:	20cf      	movs	r0, #207	; 0xcf
 8002a12:	f7fe fbab 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a16:	2000      	movs	r0, #0
 8002a18:	f7fe fbcc 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 8002a1c:	20c1      	movs	r0, #193	; 0xc1
 8002a1e:	f7fe fbc9 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 8002a22:	2030      	movs	r0, #48	; 0x30
 8002a24:	f7fe fbc6 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8002a28:	20ed      	movs	r0, #237	; 0xed
 8002a2a:	f7fe fb9f 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 8002a2e:	2064      	movs	r0, #100	; 0x64
 8002a30:	f7fe fbc0 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002a34:	2003      	movs	r0, #3
 8002a36:	f7fe fbbd 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 8002a3a:	2012      	movs	r0, #18
 8002a3c:	f7fe fbba 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8002a40:	2081      	movs	r0, #129	; 0x81
 8002a42:	f7fe fbb7 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 8002a46:	20e8      	movs	r0, #232	; 0xe8
 8002a48:	f7fe fb90 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 8002a4c:	2085      	movs	r0, #133	; 0x85
 8002a4e:	f7fe fbb1 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002a52:	2010      	movs	r0, #16
 8002a54:	f7fe fbae 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002a58:	207a      	movs	r0, #122	; 0x7a
 8002a5a:	f7fe fbab 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 8002a5e:	20cb      	movs	r0, #203	; 0xcb
 8002a60:	f7fe fb84 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8002a64:	2039      	movs	r0, #57	; 0x39
 8002a66:	f7fe fba5 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002a6a:	202c      	movs	r0, #44	; 0x2c
 8002a6c:	f7fe fba2 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a70:	2000      	movs	r0, #0
 8002a72:	f7fe fb9f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002a76:	2034      	movs	r0, #52	; 0x34
 8002a78:	f7fe fb9c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002a7c:	2002      	movs	r0, #2
 8002a7e:	f7fe fb99 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8002a82:	20f7      	movs	r0, #247	; 0xf7
 8002a84:	f7fe fb72 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002a88:	2020      	movs	r0, #32
 8002a8a:	f7fe fb93 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8002a8e:	20ea      	movs	r0, #234	; 0xea
 8002a90:	f7fe fb6c 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a94:	2000      	movs	r0, #0
 8002a96:	f7fe fb8d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7fe fb8a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8002aa0:	20c0      	movs	r0, #192	; 0xc0
 8002aa2:	f7fe fb63 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8002aa6:	201b      	movs	r0, #27
 8002aa8:	f7fe fb84 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8002aac:	20c1      	movs	r0, #193	; 0xc1
 8002aae:	f7fe fb5d 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	f7fe fb7e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8002ab8:	20c5      	movs	r0, #197	; 0xc5
 8002aba:	f7fe fb57 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8002abe:	2030      	movs	r0, #48	; 0x30
 8002ac0:	f7fe fb78 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8002ac4:	2030      	movs	r0, #48	; 0x30
 8002ac6:	f7fe fb75 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8002aca:	20c7      	movs	r0, #199	; 0xc7
 8002acc:	f7fe fb4e 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8002ad0:	20b7      	movs	r0, #183	; 0xb7
 8002ad2:	f7fe fb6f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8002ad6:	2036      	movs	r0, #54	; 0x36
 8002ad8:	f7fe fb48 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 8002adc:	2048      	movs	r0, #72	; 0x48
 8002ade:	f7fe fb69 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8002ae2:	203a      	movs	r0, #58	; 0x3a
 8002ae4:	f7fe fb42 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8002ae8:	2055      	movs	r0, #85	; 0x55
 8002aea:	f7fe fb63 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 8002aee:	20b1      	movs	r0, #177	; 0xb1
 8002af0:	f7fe fb3c 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002af4:	2000      	movs	r0, #0
 8002af6:	f7fe fb5d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 8002afa:	201a      	movs	r0, #26
 8002afc:	f7fe fb5a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8002b00:	20b6      	movs	r0, #182	; 0xb6
 8002b02:	f7fe fb33 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8002b06:	200a      	movs	r0, #10
 8002b08:	f7fe fb54 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002b0c:	20a2      	movs	r0, #162	; 0xa2
 8002b0e:	f7fe fb51 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8002b12:	20f2      	movs	r0, #242	; 0xf2
 8002b14:	f7fe fb2a 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f7fe fb4b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 8002b1e:	2026      	movs	r0, #38	; 0x26
 8002b20:	f7fe fb24 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002b24:	2001      	movs	r0, #1
 8002b26:	f7fe fb45 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8002b2a:	20e0      	movs	r0, #224	; 0xe0
 8002b2c:	f7fe fb1e 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8002b30:	200f      	movs	r0, #15
 8002b32:	f7fe fb3f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002b36:	202a      	movs	r0, #42	; 0x2a
 8002b38:	f7fe fb3c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 8002b3c:	2028      	movs	r0, #40	; 0x28
 8002b3e:	f7fe fb39 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8002b42:	2008      	movs	r0, #8
 8002b44:	f7fe fb36 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8002b48:	200e      	movs	r0, #14
 8002b4a:	f7fe fb33 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8002b4e:	2008      	movs	r0, #8
 8002b50:	f7fe fb30 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002b54:	2054      	movs	r0, #84	; 0x54
 8002b56:	f7fe fb2d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 8002b5a:	20a9      	movs	r0, #169	; 0xa9
 8002b5c:	f7fe fb2a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002b60:	2043      	movs	r0, #67	; 0x43
 8002b62:	f7fe fb27 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8002b66:	200a      	movs	r0, #10
 8002b68:	f7fe fb24 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002b6c:	200f      	movs	r0, #15
 8002b6e:	f7fe fb21 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b72:	2000      	movs	r0, #0
 8002b74:	f7fe fb1e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7fe fb1b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f7fe fb18 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7fe fb15 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8002b8a:	20e1      	movs	r0, #225	; 0xe1
 8002b8c:	f7fe faee 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b90:	2000      	movs	r0, #0
 8002b92:	f7fe fb0f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8002b96:	2015      	movs	r0, #21
 8002b98:	f7fe fb0c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002b9c:	2017      	movs	r0, #23
 8002b9e:	f7fe fb09 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8002ba2:	2007      	movs	r0, #7
 8002ba4:	f7fe fb06 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002ba8:	2011      	movs	r0, #17
 8002baa:	f7fe fb03 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8002bae:	2006      	movs	r0, #6
 8002bb0:	f7fe fb00 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8002bb4:	202b      	movs	r0, #43	; 0x2b
 8002bb6:	f7fe fafd 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002bba:	2056      	movs	r0, #86	; 0x56
 8002bbc:	f7fe fafa 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002bc0:	203c      	movs	r0, #60	; 0x3c
 8002bc2:	f7fe faf7 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002bc6:	2005      	movs	r0, #5
 8002bc8:	f7fe faf4 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002bcc:	2010      	movs	r0, #16
 8002bce:	f7fe faf1 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002bd2:	200f      	movs	r0, #15
 8002bd4:	f7fe faee 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002bd8:	203f      	movs	r0, #63	; 0x3f
 8002bda:	f7fe faeb 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002bde:	203f      	movs	r0, #63	; 0x3f
 8002be0:	f7fe fae8 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002be4:	200f      	movs	r0, #15
 8002be6:	f7fe fae5 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 8002bea:	202b      	movs	r0, #43	; 0x2b
 8002bec:	f7fe fabe 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f7fe fadf 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	f7fe fadc 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	f7fe fad9 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 8002c02:	203f      	movs	r0, #63	; 0x3f
 8002c04:	f7fe fad6 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8002c08:	202a      	movs	r0, #42	; 0x2a
 8002c0a:	f7fe faaf 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f7fe fad0 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7fe facd 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f7fe faca 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8002c20:	20ef      	movs	r0, #239	; 0xef
 8002c22:	f7fe fac7 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 8002c26:	2011      	movs	r0, #17
 8002c28:	f7fe faa0 	bl	800116c <LCD_WR_REG>
		HAL_Delay(120);
 8002c2c:	2078      	movs	r0, #120	; 0x78
 8002c2e:	f005 f941 	bl	8007eb4 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 8002c32:	2029      	movs	r0, #41	; 0x29
 8002c34:	f7fe fa9a 	bl	800116c <LCD_WR_REG>
 8002c38:	f003 bcd8 	b.w	80065ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 8002c3c:	4b58      	ldr	r3, [pc, #352]	; (8002da0 <LCD_Init+0x5e8>)
 8002c3e:	889b      	ldrh	r3, [r3, #4]
 8002c40:	f646 0204 	movw	r2, #26628	; 0x6804
 8002c44:	4293      	cmp	r3, r2
 8002c46:	f040 80ad 	bne.w	8002da4 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 8002c4a:	2011      	movs	r0, #17
 8002c4c:	f7fe fa8e 	bl	800116c <LCD_WR_REG>
		HAL_Delay(20);
 8002c50:	2014      	movs	r0, #20
 8002c52:	f005 f92f 	bl	8007eb4 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002c56:	20d0      	movs	r0, #208	; 0xd0
 8002c58:	f7fe fa88 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 8002c5c:	2007      	movs	r0, #7
 8002c5e:	f7fe faa9 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8002c62:	2042      	movs	r0, #66	; 0x42
 8002c64:	f7fe faa6 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8002c68:	201d      	movs	r0, #29
 8002c6a:	f7fe faa3 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 8002c6e:	20d1      	movs	r0, #209	; 0xd1
 8002c70:	f7fe fa7c 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7fe fa9d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8002c7a:	201a      	movs	r0, #26
 8002c7c:	f7fe fa9a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002c80:	2009      	movs	r0, #9
 8002c82:	f7fe fa97 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8002c86:	20d2      	movs	r0, #210	; 0xd2
 8002c88:	f7fe fa70 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f7fe fa91 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8002c92:	2022      	movs	r0, #34	; 0x22
 8002c94:	f7fe fa8e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002c98:	20c0      	movs	r0, #192	; 0xc0
 8002c9a:	f7fe fa67 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8002c9e:	2010      	movs	r0, #16
 8002ca0:	f7fe fa88 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8002ca4:	203b      	movs	r0, #59	; 0x3b
 8002ca6:	f7fe fa85 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002caa:	2000      	movs	r0, #0
 8002cac:	f7fe fa82 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002cb0:	2002      	movs	r0, #2
 8002cb2:	f7fe fa7f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8002cb6:	2011      	movs	r0, #17
 8002cb8:	f7fe fa7c 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8002cbc:	20c5      	movs	r0, #197	; 0xc5
 8002cbe:	f7fe fa55 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8002cc2:	2003      	movs	r0, #3
 8002cc4:	f7fe fa76 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8002cc8:	20c8      	movs	r0, #200	; 0xc8
 8002cca:	f7fe fa4f 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7fe fa70 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002cd4:	2025      	movs	r0, #37	; 0x25
 8002cd6:	f7fe fa6d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 8002cda:	2021      	movs	r0, #33	; 0x21
 8002cdc:	f7fe fa6a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8002ce0:	2005      	movs	r0, #5
 8002ce2:	f7fe fa67 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7fe fa64 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 8002cec:	200a      	movs	r0, #10
 8002cee:	f7fe fa61 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 8002cf2:	2065      	movs	r0, #101	; 0x65
 8002cf4:	f7fe fa5e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002cf8:	2025      	movs	r0, #37	; 0x25
 8002cfa:	f7fe fa5b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 8002cfe:	2077      	movs	r0, #119	; 0x77
 8002d00:	f7fe fa58 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 8002d04:	2050      	movs	r0, #80	; 0x50
 8002d06:	f7fe fa55 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 8002d0a:	200f      	movs	r0, #15
 8002d0c:	f7fe fa52 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002d10:	2000      	movs	r0, #0
 8002d12:	f7fe fa4f 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 8002d16:	20f8      	movs	r0, #248	; 0xf8
 8002d18:	f7fe fa28 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	f7fe fa49 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 8002d22:	20fe      	movs	r0, #254	; 0xfe
 8002d24:	f7fe fa22 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002d28:	2000      	movs	r0, #0
 8002d2a:	f7fe fa43 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002d2e:	2002      	movs	r0, #2
 8002d30:	f7fe fa40 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 8002d34:	2020      	movs	r0, #32
 8002d36:	f7fe fa19 	bl	800116c <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8002d3a:	2036      	movs	r0, #54	; 0x36
 8002d3c:	f7fe fa16 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8002d40:	2008      	movs	r0, #8
 8002d42:	f7fe fa37 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 8002d46:	203a      	movs	r0, #58	; 0x3a
 8002d48:	f7fe fa10 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 8002d4c:	2055      	movs	r0, #85	; 0x55
 8002d4e:	f7fe fa31 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8002d52:	202b      	movs	r0, #43	; 0x2b
 8002d54:	f7fe fa0a 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7fe fa2b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f7fe fa28 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002d64:	2001      	movs	r0, #1
 8002d66:	f7fe fa25 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 8002d6a:	203f      	movs	r0, #63	; 0x3f
 8002d6c:	f7fe fa22 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002d70:	202a      	movs	r0, #42	; 0x2a
 8002d72:	f7fe f9fb 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002d76:	2000      	movs	r0, #0
 8002d78:	f7fe fa1c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7fe fa19 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002d82:	2001      	movs	r0, #1
 8002d84:	f7fe fa16 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002d88:	20df      	movs	r0, #223	; 0xdf
 8002d8a:	f7fe fa13 	bl	80011b4 <LCD_WR_DATAX>
		HAL_Delay(120);
 8002d8e:	2078      	movs	r0, #120	; 0x78
 8002d90:	f005 f890 	bl	8007eb4 <HAL_Delay>
		LCD_WR_REG(0X29);
 8002d94:	2029      	movs	r0, #41	; 0x29
 8002d96:	f7fe f9e9 	bl	800116c <LCD_WR_REG>
 8002d9a:	f003 bc27 	b.w	80065ec <LCD_Init+0x3e34>
 8002d9e:	bf00      	nop
 8002da0:	200004b0 	.word	0x200004b0
	} else if (lcddev.id == 0x5310) {
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <LCD_Init+0x5fc>)
 8002da6:	889b      	ldrh	r3, [r3, #4]
 8002da8:	f245 3210 	movw	r2, #21264	; 0x5310
 8002dac:	4293      	cmp	r3, r2
 8002dae:	f040 877c 	bne.w	8003caa <LCD_Init+0x14f2>
 8002db2:	e001      	b.n	8002db8 <LCD_Init+0x600>
 8002db4:	200004b0 	.word	0x200004b0
		LCD_WR_REG(0xED);
 8002db8:	20ed      	movs	r0, #237	; 0xed
 8002dba:	f7fe f9d7 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	f7fe f9f8 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 8002dc4:	20fe      	movs	r0, #254	; 0xfe
 8002dc6:	f7fe f9f5 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 8002dca:	20ee      	movs	r0, #238	; 0xee
 8002dcc:	f7fe f9ce 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002dd0:	20de      	movs	r0, #222	; 0xde
 8002dd2:	f7fe f9ef 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002dd6:	2021      	movs	r0, #33	; 0x21
 8002dd8:	f7fe f9ec 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 8002ddc:	20f1      	movs	r0, #241	; 0xf1
 8002dde:	f7fe f9c5 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002de2:	2001      	movs	r0, #1
 8002de4:	f7fe f9e6 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8002de8:	20df      	movs	r0, #223	; 0xdf
 8002dea:	f7fe f9bf 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 8002dee:	2010      	movs	r0, #16
 8002df0:	f7fe f9e0 	bl	80011b4 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8002df4:	20c4      	movs	r0, #196	; 0xc4
 8002df6:	f7fe f9b9 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 8002dfa:	208f      	movs	r0, #143	; 0x8f
 8002dfc:	f7fe f9da 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002e00:	20c6      	movs	r0, #198	; 0xc6
 8002e02:	f7fe f9b3 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002e06:	2000      	movs	r0, #0
 8002e08:	f7fe f9d4 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002e0c:	20e2      	movs	r0, #226	; 0xe2
 8002e0e:	f7fe f9d1 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002e12:	20e2      	movs	r0, #226	; 0xe2
 8002e14:	f7fe f9ce 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002e18:	20e2      	movs	r0, #226	; 0xe2
 8002e1a:	f7fe f9cb 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 8002e1e:	20bf      	movs	r0, #191	; 0xbf
 8002e20:	f7fe f9a4 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002e24:	20aa      	movs	r0, #170	; 0xaa
 8002e26:	f7fe f9c5 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 8002e2a:	20b0      	movs	r0, #176	; 0xb0
 8002e2c:	f7fe f99e 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8002e30:	200d      	movs	r0, #13
 8002e32:	f7fe f9bf 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e36:	2000      	movs	r0, #0
 8002e38:	f7fe f9bc 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 8002e3c:	200d      	movs	r0, #13
 8002e3e:	f7fe f9b9 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e42:	2000      	movs	r0, #0
 8002e44:	f7fe f9b6 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002e48:	2011      	movs	r0, #17
 8002e4a:	f7fe f9b3 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f7fe f9b0 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8002e54:	2019      	movs	r0, #25
 8002e56:	f7fe f9ad 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7fe f9aa 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002e60:	2021      	movs	r0, #33	; 0x21
 8002e62:	f7fe f9a7 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e66:	2000      	movs	r0, #0
 8002e68:	f7fe f9a4 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 8002e6c:	202d      	movs	r0, #45	; 0x2d
 8002e6e:	f7fe f9a1 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e72:	2000      	movs	r0, #0
 8002e74:	f7fe f99e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002e78:	203d      	movs	r0, #61	; 0x3d
 8002e7a:	f7fe f99b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f7fe f998 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002e84:	205d      	movs	r0, #93	; 0x5d
 8002e86:	f7fe f995 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f7fe f992 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002e90:	205d      	movs	r0, #93	; 0x5d
 8002e92:	f7fe f98f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e96:	2000      	movs	r0, #0
 8002e98:	f7fe f98c 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 8002e9c:	20b1      	movs	r0, #177	; 0xb1
 8002e9e:	f7fe f965 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 8002ea2:	2080      	movs	r0, #128	; 0x80
 8002ea4:	f7fe f986 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f7fe f983 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002eae:	208b      	movs	r0, #139	; 0x8b
 8002eb0:	f7fe f980 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f7fe f97d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002eba:	2096      	movs	r0, #150	; 0x96
 8002ebc:	f7fe f97a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	f7fe f977 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8002ec6:	20b2      	movs	r0, #178	; 0xb2
 8002ec8:	f7fe f950 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002ecc:	2000      	movs	r0, #0
 8002ece:	f7fe f971 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f7fe f96e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002ed8:	2002      	movs	r0, #2
 8002eda:	f7fe f96b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f7fe f968 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002ee4:	2003      	movs	r0, #3
 8002ee6:	f7fe f965 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eea:	2000      	movs	r0, #0
 8002eec:	f7fe f962 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8002ef0:	20b3      	movs	r0, #179	; 0xb3
 8002ef2:	f7fe f93b 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f7fe f95c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002efc:	2000      	movs	r0, #0
 8002efe:	f7fe f959 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f02:	2000      	movs	r0, #0
 8002f04:	f7fe f956 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f08:	2000      	movs	r0, #0
 8002f0a:	f7fe f953 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f7fe f950 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7fe f94d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f7fe f94a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f20:	2000      	movs	r0, #0
 8002f22:	f7fe f947 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f26:	2000      	movs	r0, #0
 8002f28:	f7fe f944 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f7fe f941 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f32:	2000      	movs	r0, #0
 8002f34:	f7fe f93e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f7fe f93b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f3e:	2000      	movs	r0, #0
 8002f40:	f7fe f938 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f44:	2000      	movs	r0, #0
 8002f46:	f7fe f935 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f7fe f932 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f50:	2000      	movs	r0, #0
 8002f52:	f7fe f92f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f56:	2000      	movs	r0, #0
 8002f58:	f7fe f92c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f7fe f929 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f62:	2000      	movs	r0, #0
 8002f64:	f7fe f926 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f7fe f923 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f7fe f920 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7fe f91d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f7fe f91a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7fe f917 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8002f86:	20b4      	movs	r0, #180	; 0xb4
 8002f88:	f7fe f8f0 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 8002f8c:	208b      	movs	r0, #139	; 0x8b
 8002f8e:	f7fe f911 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f92:	2000      	movs	r0, #0
 8002f94:	f7fe f90e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002f98:	2096      	movs	r0, #150	; 0x96
 8002f9a:	f7fe f90b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	f7fe f908 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 8002fa4:	20a1      	movs	r0, #161	; 0xa1
 8002fa6:	f7fe f905 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002faa:	2000      	movs	r0, #0
 8002fac:	f7fe f902 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002fb0:	20b5      	movs	r0, #181	; 0xb5
 8002fb2:	f7fe f8db 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 8002fb6:	2002      	movs	r0, #2
 8002fb8:	f7fe f8fc 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f7fe f8f9 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002fc2:	2003      	movs	r0, #3
 8002fc4:	f7fe f8f6 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc8:	2000      	movs	r0, #0
 8002fca:	f7fe f8f3 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002fce:	2004      	movs	r0, #4
 8002fd0:	f7fe f8f0 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7fe f8ed 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 8002fda:	20b6      	movs	r0, #182	; 0xb6
 8002fdc:	f7fe f8c6 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f7fe f8e7 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f7fe f8e4 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 8002fec:	20b7      	movs	r0, #183	; 0xb7
 8002fee:	f7fe f8bd 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	f7fe f8de 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f7fe f8db 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002ffe:	203f      	movs	r0, #63	; 0x3f
 8003000:	f7fe f8d8 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003004:	2000      	movs	r0, #0
 8003006:	f7fe f8d5 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 800300a:	205e      	movs	r0, #94	; 0x5e
 800300c:	f7fe f8d2 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003010:	2000      	movs	r0, #0
 8003012:	f7fe f8cf 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8003016:	2064      	movs	r0, #100	; 0x64
 8003018:	f7fe f8cc 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800301c:	2000      	movs	r0, #0
 800301e:	f7fe f8c9 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 8003022:	208c      	movs	r0, #140	; 0x8c
 8003024:	f7fe f8c6 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003028:	2000      	movs	r0, #0
 800302a:	f7fe f8c3 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 800302e:	20ac      	movs	r0, #172	; 0xac
 8003030:	f7fe f8c0 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003034:	2000      	movs	r0, #0
 8003036:	f7fe f8bd 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800303a:	20dc      	movs	r0, #220	; 0xdc
 800303c:	f7fe f8ba 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003040:	2000      	movs	r0, #0
 8003042:	f7fe f8b7 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8003046:	2070      	movs	r0, #112	; 0x70
 8003048:	f7fe f8b4 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800304c:	2000      	movs	r0, #0
 800304e:	f7fe f8b1 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8003052:	2090      	movs	r0, #144	; 0x90
 8003054:	f7fe f8ae 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003058:	2000      	movs	r0, #0
 800305a:	f7fe f8ab 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 800305e:	20eb      	movs	r0, #235	; 0xeb
 8003060:	f7fe f8a8 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003064:	2000      	movs	r0, #0
 8003066:	f7fe f8a5 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800306a:	20dc      	movs	r0, #220	; 0xdc
 800306c:	f7fe f8a2 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003070:	2000      	movs	r0, #0
 8003072:	f7fe f89f 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8003076:	20b8      	movs	r0, #184	; 0xb8
 8003078:	f7fe f878 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800307c:	2000      	movs	r0, #0
 800307e:	f7fe f899 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003082:	2000      	movs	r0, #0
 8003084:	f7fe f896 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003088:	2000      	movs	r0, #0
 800308a:	f7fe f893 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800308e:	2000      	movs	r0, #0
 8003090:	f7fe f890 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003094:	2000      	movs	r0, #0
 8003096:	f7fe f88d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800309a:	2000      	movs	r0, #0
 800309c:	f7fe f88a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a0:	2000      	movs	r0, #0
 80030a2:	f7fe f887 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a6:	2000      	movs	r0, #0
 80030a8:	f7fe f884 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 80030ac:	20ba      	movs	r0, #186	; 0xba
 80030ae:	f7fe f85d 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 80030b2:	2024      	movs	r0, #36	; 0x24
 80030b4:	f7fe f87e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030b8:	2000      	movs	r0, #0
 80030ba:	f7fe f87b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030be:	2000      	movs	r0, #0
 80030c0:	f7fe f878 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c4:	2000      	movs	r0, #0
 80030c6:	f7fe f875 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 80030ca:	20c1      	movs	r0, #193	; 0xc1
 80030cc:	f7fe f84e 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80030d0:	2020      	movs	r0, #32
 80030d2:	f7fe f86f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d6:	2000      	movs	r0, #0
 80030d8:	f7fe f86c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80030dc:	2054      	movs	r0, #84	; 0x54
 80030de:	f7fe f869 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030e2:	2000      	movs	r0, #0
 80030e4:	f7fe f866 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 80030e8:	20ff      	movs	r0, #255	; 0xff
 80030ea:	f7fe f863 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ee:	2000      	movs	r0, #0
 80030f0:	f7fe f860 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 80030f4:	20c2      	movs	r0, #194	; 0xc2
 80030f6:	f7fe f839 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80030fa:	200a      	movs	r0, #10
 80030fc:	f7fe f85a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003100:	2000      	movs	r0, #0
 8003102:	f7fe f857 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8003106:	2004      	movs	r0, #4
 8003108:	f7fe f854 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310c:	2000      	movs	r0, #0
 800310e:	f7fe f851 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8003112:	20c3      	movs	r0, #195	; 0xc3
 8003114:	f7fe f82a 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8003118:	203c      	movs	r0, #60	; 0x3c
 800311a:	f7fe f84b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800311e:	2000      	movs	r0, #0
 8003120:	f7fe f848 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8003124:	203a      	movs	r0, #58	; 0x3a
 8003126:	f7fe f845 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800312a:	2000      	movs	r0, #0
 800312c:	f7fe f842 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8003130:	2039      	movs	r0, #57	; 0x39
 8003132:	f7fe f83f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003136:	2000      	movs	r0, #0
 8003138:	f7fe f83c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 800313c:	2037      	movs	r0, #55	; 0x37
 800313e:	f7fe f839 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003142:	2000      	movs	r0, #0
 8003144:	f7fe f836 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003148:	203c      	movs	r0, #60	; 0x3c
 800314a:	f7fe f833 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800314e:	2000      	movs	r0, #0
 8003150:	f7fe f830 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8003154:	2036      	movs	r0, #54	; 0x36
 8003156:	f7fe f82d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800315a:	2000      	movs	r0, #0
 800315c:	f7fe f82a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8003160:	2032      	movs	r0, #50	; 0x32
 8003162:	f7fe f827 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003166:	2000      	movs	r0, #0
 8003168:	f7fe f824 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 800316c:	202f      	movs	r0, #47	; 0x2f
 800316e:	f7fe f821 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003172:	2000      	movs	r0, #0
 8003174:	f7fe f81e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8003178:	202c      	movs	r0, #44	; 0x2c
 800317a:	f7fe f81b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800317e:	2000      	movs	r0, #0
 8003180:	f7fe f818 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003184:	2029      	movs	r0, #41	; 0x29
 8003186:	f7fe f815 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800318a:	2000      	movs	r0, #0
 800318c:	f7fe f812 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8003190:	2026      	movs	r0, #38	; 0x26
 8003192:	f7fe f80f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003196:	2000      	movs	r0, #0
 8003198:	f7fe f80c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 800319c:	2024      	movs	r0, #36	; 0x24
 800319e:	f7fe f809 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a2:	2000      	movs	r0, #0
 80031a4:	f7fe f806 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80031a8:	2024      	movs	r0, #36	; 0x24
 80031aa:	f7fe f803 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ae:	2000      	movs	r0, #0
 80031b0:	f7fe f800 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80031b4:	2023      	movs	r0, #35	; 0x23
 80031b6:	f7fd fffd 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7fd fffa 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80031c0:	203c      	movs	r0, #60	; 0x3c
 80031c2:	f7fd fff7 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f7fd fff4 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80031cc:	2036      	movs	r0, #54	; 0x36
 80031ce:	f7fd fff1 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d2:	2000      	movs	r0, #0
 80031d4:	f7fd ffee 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80031d8:	2032      	movs	r0, #50	; 0x32
 80031da:	f7fd ffeb 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031de:	2000      	movs	r0, #0
 80031e0:	f7fd ffe8 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80031e4:	202f      	movs	r0, #47	; 0x2f
 80031e6:	f7fd ffe5 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ea:	2000      	movs	r0, #0
 80031ec:	f7fd ffe2 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80031f0:	202c      	movs	r0, #44	; 0x2c
 80031f2:	f7fd ffdf 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f6:	2000      	movs	r0, #0
 80031f8:	f7fd ffdc 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80031fc:	2029      	movs	r0, #41	; 0x29
 80031fe:	f7fd ffd9 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003202:	2000      	movs	r0, #0
 8003204:	f7fd ffd6 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8003208:	2026      	movs	r0, #38	; 0x26
 800320a:	f7fd ffd3 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800320e:	2000      	movs	r0, #0
 8003210:	f7fd ffd0 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8003214:	2024      	movs	r0, #36	; 0x24
 8003216:	f7fd ffcd 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800321a:	2000      	movs	r0, #0
 800321c:	f7fd ffca 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8003220:	2024      	movs	r0, #36	; 0x24
 8003222:	f7fd ffc7 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003226:	2000      	movs	r0, #0
 8003228:	f7fd ffc4 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800322c:	2023      	movs	r0, #35	; 0x23
 800322e:	f7fd ffc1 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003232:	2000      	movs	r0, #0
 8003234:	f7fd ffbe 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8003238:	20c4      	movs	r0, #196	; 0xc4
 800323a:	f7fd ff97 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 800323e:	2062      	movs	r0, #98	; 0x62
 8003240:	f7fd ffb8 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003244:	2000      	movs	r0, #0
 8003246:	f7fd ffb5 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 800324a:	2005      	movs	r0, #5
 800324c:	f7fd ffb2 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003250:	2000      	movs	r0, #0
 8003252:	f7fd ffaf 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8003256:	2084      	movs	r0, #132	; 0x84
 8003258:	f7fd ffac 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800325c:	2000      	movs	r0, #0
 800325e:	f7fd ffa9 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8003262:	20f0      	movs	r0, #240	; 0xf0
 8003264:	f7fd ffa6 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003268:	2000      	movs	r0, #0
 800326a:	f7fd ffa3 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 800326e:	2018      	movs	r0, #24
 8003270:	f7fd ffa0 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003274:	2000      	movs	r0, #0
 8003276:	f7fd ff9d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 800327a:	20a4      	movs	r0, #164	; 0xa4
 800327c:	f7fd ff9a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003280:	2000      	movs	r0, #0
 8003282:	f7fd ff97 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8003286:	2018      	movs	r0, #24
 8003288:	f7fd ff94 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800328c:	2000      	movs	r0, #0
 800328e:	f7fd ff91 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003292:	2050      	movs	r0, #80	; 0x50
 8003294:	f7fd ff8e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003298:	2000      	movs	r0, #0
 800329a:	f7fd ff8b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 800329e:	200c      	movs	r0, #12
 80032a0:	f7fd ff88 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a4:	2000      	movs	r0, #0
 80032a6:	f7fd ff85 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80032aa:	2017      	movs	r0, #23
 80032ac:	f7fd ff82 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b0:	2000      	movs	r0, #0
 80032b2:	f7fd ff7f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 80032b6:	2095      	movs	r0, #149	; 0x95
 80032b8:	f7fd ff7c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032bc:	2000      	movs	r0, #0
 80032be:	f7fd ff79 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80032c2:	20f3      	movs	r0, #243	; 0xf3
 80032c4:	f7fd ff76 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032c8:	2000      	movs	r0, #0
 80032ca:	f7fd ff73 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 80032ce:	20e6      	movs	r0, #230	; 0xe6
 80032d0:	f7fd ff70 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d4:	2000      	movs	r0, #0
 80032d6:	f7fd ff6d 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 80032da:	20c5      	movs	r0, #197	; 0xc5
 80032dc:	f7fd ff46 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80032e0:	2032      	movs	r0, #50	; 0x32
 80032e2:	f7fd ff67 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e6:	2000      	movs	r0, #0
 80032e8:	f7fd ff64 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80032ec:	2044      	movs	r0, #68	; 0x44
 80032ee:	f7fd ff61 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032f2:	2000      	movs	r0, #0
 80032f4:	f7fd ff5e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 80032f8:	2065      	movs	r0, #101	; 0x65
 80032fa:	f7fd ff5b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032fe:	2000      	movs	r0, #0
 8003300:	f7fd ff58 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003304:	2076      	movs	r0, #118	; 0x76
 8003306:	f7fd ff55 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800330a:	2000      	movs	r0, #0
 800330c:	f7fd ff52 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003310:	2088      	movs	r0, #136	; 0x88
 8003312:	f7fd ff4f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003316:	2000      	movs	r0, #0
 8003318:	f7fd ff4c 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 800331c:	20c6      	movs	r0, #198	; 0xc6
 800331e:	f7fd ff25 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8003322:	2020      	movs	r0, #32
 8003324:	f7fd ff46 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003328:	2000      	movs	r0, #0
 800332a:	f7fd ff43 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800332e:	2017      	movs	r0, #23
 8003330:	f7fd ff40 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003334:	2000      	movs	r0, #0
 8003336:	f7fd ff3d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800333a:	2001      	movs	r0, #1
 800333c:	f7fd ff3a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003340:	2000      	movs	r0, #0
 8003342:	f7fd ff37 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8003346:	20c7      	movs	r0, #199	; 0xc7
 8003348:	f7fd ff10 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800334c:	2000      	movs	r0, #0
 800334e:	f7fd ff31 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003352:	2000      	movs	r0, #0
 8003354:	f7fd ff2e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003358:	2000      	movs	r0, #0
 800335a:	f7fd ff2b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800335e:	2000      	movs	r0, #0
 8003360:	f7fd ff28 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8003364:	20c8      	movs	r0, #200	; 0xc8
 8003366:	f7fd ff01 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800336a:	2000      	movs	r0, #0
 800336c:	f7fd ff22 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003370:	2000      	movs	r0, #0
 8003372:	f7fd ff1f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003376:	2000      	movs	r0, #0
 8003378:	f7fd ff1c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800337c:	2000      	movs	r0, #0
 800337e:	f7fd ff19 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8003382:	20c9      	movs	r0, #201	; 0xc9
 8003384:	f7fd fef2 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003388:	2000      	movs	r0, #0
 800338a:	f7fd ff13 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800338e:	2000      	movs	r0, #0
 8003390:	f7fd ff10 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003394:	2000      	movs	r0, #0
 8003396:	f7fd ff0d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800339a:	2000      	movs	r0, #0
 800339c:	f7fd ff0a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a0:	2000      	movs	r0, #0
 80033a2:	f7fd ff07 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a6:	2000      	movs	r0, #0
 80033a8:	f7fd ff04 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ac:	2000      	movs	r0, #0
 80033ae:	f7fd ff01 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033b2:	2000      	movs	r0, #0
 80033b4:	f7fd fefe 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033b8:	2000      	movs	r0, #0
 80033ba:	f7fd fefb 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033be:	2000      	movs	r0, #0
 80033c0:	f7fd fef8 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033c4:	2000      	movs	r0, #0
 80033c6:	f7fd fef5 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ca:	2000      	movs	r0, #0
 80033cc:	f7fd fef2 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033d0:	2000      	movs	r0, #0
 80033d2:	f7fd feef 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033d6:	2000      	movs	r0, #0
 80033d8:	f7fd feec 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033dc:	2000      	movs	r0, #0
 80033de:	f7fd fee9 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033e2:	2000      	movs	r0, #0
 80033e4:	f7fd fee6 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 80033e8:	20e0      	movs	r0, #224	; 0xe0
 80033ea:	f7fd febf 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 80033ee:	2016      	movs	r0, #22
 80033f0:	f7fd fee0 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033f4:	2000      	movs	r0, #0
 80033f6:	f7fd fedd 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 80033fa:	201c      	movs	r0, #28
 80033fc:	f7fd feda 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003400:	2000      	movs	r0, #0
 8003402:	f7fd fed7 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8003406:	2021      	movs	r0, #33	; 0x21
 8003408:	f7fd fed4 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800340c:	2000      	movs	r0, #0
 800340e:	f7fd fed1 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8003412:	2036      	movs	r0, #54	; 0x36
 8003414:	f7fd fece 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003418:	2000      	movs	r0, #0
 800341a:	f7fd fecb 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 800341e:	2046      	movs	r0, #70	; 0x46
 8003420:	f7fd fec8 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003424:	2000      	movs	r0, #0
 8003426:	f7fd fec5 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 800342a:	2052      	movs	r0, #82	; 0x52
 800342c:	f7fd fec2 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003430:	2000      	movs	r0, #0
 8003432:	f7fd febf 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8003436:	2064      	movs	r0, #100	; 0x64
 8003438:	f7fd febc 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800343c:	2000      	movs	r0, #0
 800343e:	f7fd feb9 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8003442:	207a      	movs	r0, #122	; 0x7a
 8003444:	f7fd feb6 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003448:	2000      	movs	r0, #0
 800344a:	f7fd feb3 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800344e:	208b      	movs	r0, #139	; 0x8b
 8003450:	f7fd feb0 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003454:	2000      	movs	r0, #0
 8003456:	f7fd fead 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800345a:	2099      	movs	r0, #153	; 0x99
 800345c:	f7fd feaa 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003460:	2000      	movs	r0, #0
 8003462:	f7fd fea7 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8003466:	20a8      	movs	r0, #168	; 0xa8
 8003468:	f7fd fea4 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800346c:	2000      	movs	r0, #0
 800346e:	f7fd fea1 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8003472:	20b9      	movs	r0, #185	; 0xb9
 8003474:	f7fd fe9e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003478:	2000      	movs	r0, #0
 800347a:	f7fd fe9b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 800347e:	20c4      	movs	r0, #196	; 0xc4
 8003480:	f7fd fe98 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003484:	2000      	movs	r0, #0
 8003486:	f7fd fe95 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 800348a:	20ca      	movs	r0, #202	; 0xca
 800348c:	f7fd fe92 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003490:	2000      	movs	r0, #0
 8003492:	f7fd fe8f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8003496:	20d2      	movs	r0, #210	; 0xd2
 8003498:	f7fd fe8c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800349c:	2000      	movs	r0, #0
 800349e:	f7fd fe89 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 80034a2:	20d9      	movs	r0, #217	; 0xd9
 80034a4:	f7fd fe86 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034a8:	2000      	movs	r0, #0
 80034aa:	f7fd fe83 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 80034ae:	20e0      	movs	r0, #224	; 0xe0
 80034b0:	f7fd fe80 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034b4:	2000      	movs	r0, #0
 80034b6:	f7fd fe7d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80034ba:	20f3      	movs	r0, #243	; 0xf3
 80034bc:	f7fd fe7a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034c0:	2000      	movs	r0, #0
 80034c2:	f7fd fe77 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 80034c6:	20e1      	movs	r0, #225	; 0xe1
 80034c8:	f7fd fe50 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 80034cc:	2016      	movs	r0, #22
 80034ce:	f7fd fe71 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034d2:	2000      	movs	r0, #0
 80034d4:	f7fd fe6e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 80034d8:	201c      	movs	r0, #28
 80034da:	f7fd fe6b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034de:	2000      	movs	r0, #0
 80034e0:	f7fd fe68 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 80034e4:	2022      	movs	r0, #34	; 0x22
 80034e6:	f7fd fe65 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034ea:	2000      	movs	r0, #0
 80034ec:	f7fd fe62 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80034f0:	2036      	movs	r0, #54	; 0x36
 80034f2:	f7fd fe5f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034f6:	2000      	movs	r0, #0
 80034f8:	f7fd fe5c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80034fc:	2045      	movs	r0, #69	; 0x45
 80034fe:	f7fd fe59 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003502:	2000      	movs	r0, #0
 8003504:	f7fd fe56 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8003508:	2052      	movs	r0, #82	; 0x52
 800350a:	f7fd fe53 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800350e:	2000      	movs	r0, #0
 8003510:	f7fd fe50 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8003514:	2064      	movs	r0, #100	; 0x64
 8003516:	f7fd fe4d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800351a:	2000      	movs	r0, #0
 800351c:	f7fd fe4a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8003520:	207a      	movs	r0, #122	; 0x7a
 8003522:	f7fd fe47 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003526:	2000      	movs	r0, #0
 8003528:	f7fd fe44 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800352c:	208b      	movs	r0, #139	; 0x8b
 800352e:	f7fd fe41 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003532:	2000      	movs	r0, #0
 8003534:	f7fd fe3e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003538:	2099      	movs	r0, #153	; 0x99
 800353a:	f7fd fe3b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800353e:	2000      	movs	r0, #0
 8003540:	f7fd fe38 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8003544:	20a8      	movs	r0, #168	; 0xa8
 8003546:	f7fd fe35 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800354a:	2000      	movs	r0, #0
 800354c:	f7fd fe32 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8003550:	20b9      	movs	r0, #185	; 0xb9
 8003552:	f7fd fe2f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003556:	2000      	movs	r0, #0
 8003558:	f7fd fe2c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 800355c:	20c4      	movs	r0, #196	; 0xc4
 800355e:	f7fd fe29 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003562:	2000      	movs	r0, #0
 8003564:	f7fd fe26 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8003568:	20ca      	movs	r0, #202	; 0xca
 800356a:	f7fd fe23 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800356e:	2000      	movs	r0, #0
 8003570:	f7fd fe20 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8003574:	20d2      	movs	r0, #210	; 0xd2
 8003576:	f7fd fe1d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800357a:	2000      	movs	r0, #0
 800357c:	f7fd fe1a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8003580:	20d8      	movs	r0, #216	; 0xd8
 8003582:	f7fd fe17 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003586:	2000      	movs	r0, #0
 8003588:	f7fd fe14 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 800358c:	20e0      	movs	r0, #224	; 0xe0
 800358e:	f7fd fe11 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003592:	2000      	movs	r0, #0
 8003594:	f7fd fe0e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003598:	20f3      	movs	r0, #243	; 0xf3
 800359a:	f7fd fe0b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800359e:	2000      	movs	r0, #0
 80035a0:	f7fd fe08 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 80035a4:	20e2      	movs	r0, #226	; 0xe2
 80035a6:	f7fd fde1 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 80035aa:	2005      	movs	r0, #5
 80035ac:	f7fd fe02 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035b0:	2000      	movs	r0, #0
 80035b2:	f7fd fdff 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 80035b6:	200b      	movs	r0, #11
 80035b8:	f7fd fdfc 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035bc:	2000      	movs	r0, #0
 80035be:	f7fd fdf9 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 80035c2:	201b      	movs	r0, #27
 80035c4:	f7fd fdf6 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035c8:	2000      	movs	r0, #0
 80035ca:	f7fd fdf3 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80035ce:	2034      	movs	r0, #52	; 0x34
 80035d0:	f7fd fdf0 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035d4:	2000      	movs	r0, #0
 80035d6:	f7fd fded 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80035da:	2044      	movs	r0, #68	; 0x44
 80035dc:	f7fd fdea 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035e0:	2000      	movs	r0, #0
 80035e2:	f7fd fde7 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 80035e6:	204f      	movs	r0, #79	; 0x4f
 80035e8:	f7fd fde4 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035ec:	2000      	movs	r0, #0
 80035ee:	f7fd fde1 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 80035f2:	2061      	movs	r0, #97	; 0x61
 80035f4:	f7fd fdde 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035f8:	2000      	movs	r0, #0
 80035fa:	f7fd fddb 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 80035fe:	2079      	movs	r0, #121	; 0x79
 8003600:	f7fd fdd8 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003604:	2000      	movs	r0, #0
 8003606:	f7fd fdd5 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800360a:	2088      	movs	r0, #136	; 0x88
 800360c:	f7fd fdd2 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003610:	2000      	movs	r0, #0
 8003612:	f7fd fdcf 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8003616:	2097      	movs	r0, #151	; 0x97
 8003618:	f7fd fdcc 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800361c:	2000      	movs	r0, #0
 800361e:	f7fd fdc9 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8003622:	20a6      	movs	r0, #166	; 0xa6
 8003624:	f7fd fdc6 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003628:	2000      	movs	r0, #0
 800362a:	f7fd fdc3 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 800362e:	20b7      	movs	r0, #183	; 0xb7
 8003630:	f7fd fdc0 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003634:	2000      	movs	r0, #0
 8003636:	f7fd fdbd 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 800363a:	20c2      	movs	r0, #194	; 0xc2
 800363c:	f7fd fdba 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003640:	2000      	movs	r0, #0
 8003642:	f7fd fdb7 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8003646:	20c7      	movs	r0, #199	; 0xc7
 8003648:	f7fd fdb4 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800364c:	2000      	movs	r0, #0
 800364e:	f7fd fdb1 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8003652:	20d1      	movs	r0, #209	; 0xd1
 8003654:	f7fd fdae 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003658:	2000      	movs	r0, #0
 800365a:	f7fd fdab 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 800365e:	20d6      	movs	r0, #214	; 0xd6
 8003660:	f7fd fda8 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003664:	2000      	movs	r0, #0
 8003666:	f7fd fda5 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 800366a:	20dd      	movs	r0, #221	; 0xdd
 800366c:	f7fd fda2 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003670:	2000      	movs	r0, #0
 8003672:	f7fd fd9f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003676:	20f3      	movs	r0, #243	; 0xf3
 8003678:	f7fd fd9c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800367c:	2000      	movs	r0, #0
 800367e:	f7fd fd99 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8003682:	20e3      	movs	r0, #227	; 0xe3
 8003684:	f7fd fd72 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8003688:	2005      	movs	r0, #5
 800368a:	f7fd fd93 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800368e:	2000      	movs	r0, #0
 8003690:	f7fd fd90 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8003694:	200a      	movs	r0, #10
 8003696:	f7fd fd8d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800369a:	2000      	movs	r0, #0
 800369c:	f7fd fd8a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 80036a0:	201c      	movs	r0, #28
 80036a2:	f7fd fd87 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036a6:	2000      	movs	r0, #0
 80036a8:	f7fd fd84 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 80036ac:	2033      	movs	r0, #51	; 0x33
 80036ae:	f7fd fd81 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036b2:	2000      	movs	r0, #0
 80036b4:	f7fd fd7e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80036b8:	2044      	movs	r0, #68	; 0x44
 80036ba:	f7fd fd7b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036be:	2000      	movs	r0, #0
 80036c0:	f7fd fd78 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80036c4:	2050      	movs	r0, #80	; 0x50
 80036c6:	f7fd fd75 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036ca:	2000      	movs	r0, #0
 80036cc:	f7fd fd72 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 80036d0:	2062      	movs	r0, #98	; 0x62
 80036d2:	f7fd fd6f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036d6:	2000      	movs	r0, #0
 80036d8:	f7fd fd6c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 80036dc:	2078      	movs	r0, #120	; 0x78
 80036de:	f7fd fd69 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036e2:	2000      	movs	r0, #0
 80036e4:	f7fd fd66 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80036e8:	2088      	movs	r0, #136	; 0x88
 80036ea:	f7fd fd63 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036ee:	2000      	movs	r0, #0
 80036f0:	f7fd fd60 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 80036f4:	2097      	movs	r0, #151	; 0x97
 80036f6:	f7fd fd5d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036fa:	2000      	movs	r0, #0
 80036fc:	f7fd fd5a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8003700:	20a6      	movs	r0, #166	; 0xa6
 8003702:	f7fd fd57 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003706:	2000      	movs	r0, #0
 8003708:	f7fd fd54 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 800370c:	20b7      	movs	r0, #183	; 0xb7
 800370e:	f7fd fd51 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003712:	2000      	movs	r0, #0
 8003714:	f7fd fd4e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8003718:	20c2      	movs	r0, #194	; 0xc2
 800371a:	f7fd fd4b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800371e:	2000      	movs	r0, #0
 8003720:	f7fd fd48 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8003724:	20c7      	movs	r0, #199	; 0xc7
 8003726:	f7fd fd45 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800372a:	2000      	movs	r0, #0
 800372c:	f7fd fd42 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8003730:	20d1      	movs	r0, #209	; 0xd1
 8003732:	f7fd fd3f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003736:	2000      	movs	r0, #0
 8003738:	f7fd fd3c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 800373c:	20d5      	movs	r0, #213	; 0xd5
 800373e:	f7fd fd39 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003742:	2000      	movs	r0, #0
 8003744:	f7fd fd36 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8003748:	20dd      	movs	r0, #221	; 0xdd
 800374a:	f7fd fd33 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800374e:	2000      	movs	r0, #0
 8003750:	f7fd fd30 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003754:	20f3      	movs	r0, #243	; 0xf3
 8003756:	f7fd fd2d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800375a:	2000      	movs	r0, #0
 800375c:	f7fd fd2a 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8003760:	20e4      	movs	r0, #228	; 0xe4
 8003762:	f7fd fd03 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8003766:	2001      	movs	r0, #1
 8003768:	f7fd fd24 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800376c:	2000      	movs	r0, #0
 800376e:	f7fd fd21 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8003772:	2001      	movs	r0, #1
 8003774:	f7fd fd1e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003778:	2000      	movs	r0, #0
 800377a:	f7fd fd1b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800377e:	2002      	movs	r0, #2
 8003780:	f7fd fd18 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003784:	2000      	movs	r0, #0
 8003786:	f7fd fd15 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 800378a:	202a      	movs	r0, #42	; 0x2a
 800378c:	f7fd fd12 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003790:	2000      	movs	r0, #0
 8003792:	f7fd fd0f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003796:	203c      	movs	r0, #60	; 0x3c
 8003798:	f7fd fd0c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800379c:	2000      	movs	r0, #0
 800379e:	f7fd fd09 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 80037a2:	204b      	movs	r0, #75	; 0x4b
 80037a4:	f7fd fd06 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037a8:	2000      	movs	r0, #0
 80037aa:	f7fd fd03 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80037ae:	205d      	movs	r0, #93	; 0x5d
 80037b0:	f7fd fd00 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037b4:	2000      	movs	r0, #0
 80037b6:	f7fd fcfd 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 80037ba:	2074      	movs	r0, #116	; 0x74
 80037bc:	f7fd fcfa 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037c0:	2000      	movs	r0, #0
 80037c2:	f7fd fcf7 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80037c6:	2084      	movs	r0, #132	; 0x84
 80037c8:	f7fd fcf4 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037cc:	2000      	movs	r0, #0
 80037ce:	f7fd fcf1 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 80037d2:	2093      	movs	r0, #147	; 0x93
 80037d4:	f7fd fcee 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037d8:	2000      	movs	r0, #0
 80037da:	f7fd fceb 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80037de:	20a2      	movs	r0, #162	; 0xa2
 80037e0:	f7fd fce8 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037e4:	2000      	movs	r0, #0
 80037e6:	f7fd fce5 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 80037ea:	20b3      	movs	r0, #179	; 0xb3
 80037ec:	f7fd fce2 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037f0:	2000      	movs	r0, #0
 80037f2:	f7fd fcdf 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 80037f6:	20be      	movs	r0, #190	; 0xbe
 80037f8:	f7fd fcdc 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037fc:	2000      	movs	r0, #0
 80037fe:	f7fd fcd9 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8003802:	20c4      	movs	r0, #196	; 0xc4
 8003804:	f7fd fcd6 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003808:	2000      	movs	r0, #0
 800380a:	f7fd fcd3 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 800380e:	20cd      	movs	r0, #205	; 0xcd
 8003810:	f7fd fcd0 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003814:	2000      	movs	r0, #0
 8003816:	f7fd fccd 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 800381a:	20d3      	movs	r0, #211	; 0xd3
 800381c:	f7fd fcca 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003820:	2000      	movs	r0, #0
 8003822:	f7fd fcc7 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8003826:	20dd      	movs	r0, #221	; 0xdd
 8003828:	f7fd fcc4 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800382c:	2000      	movs	r0, #0
 800382e:	f7fd fcc1 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003832:	20f3      	movs	r0, #243	; 0xf3
 8003834:	f7fd fcbe 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003838:	2000      	movs	r0, #0
 800383a:	f7fd fcbb 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 800383e:	20e5      	movs	r0, #229	; 0xe5
 8003840:	f7fd fc94 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003844:	2000      	movs	r0, #0
 8003846:	f7fd fcb5 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800384a:	2000      	movs	r0, #0
 800384c:	f7fd fcb2 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003850:	2000      	movs	r0, #0
 8003852:	f7fd fcaf 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003856:	2000      	movs	r0, #0
 8003858:	f7fd fcac 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800385c:	2002      	movs	r0, #2
 800385e:	f7fd fca9 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003862:	2000      	movs	r0, #0
 8003864:	f7fd fca6 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003868:	2029      	movs	r0, #41	; 0x29
 800386a:	f7fd fca3 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800386e:	2000      	movs	r0, #0
 8003870:	f7fd fca0 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003874:	203c      	movs	r0, #60	; 0x3c
 8003876:	f7fd fc9d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800387a:	2000      	movs	r0, #0
 800387c:	f7fd fc9a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8003880:	204b      	movs	r0, #75	; 0x4b
 8003882:	f7fd fc97 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003886:	2000      	movs	r0, #0
 8003888:	f7fd fc94 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800388c:	205d      	movs	r0, #93	; 0x5d
 800388e:	f7fd fc91 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003892:	2000      	movs	r0, #0
 8003894:	f7fd fc8e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003898:	2074      	movs	r0, #116	; 0x74
 800389a:	f7fd fc8b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800389e:	2000      	movs	r0, #0
 80038a0:	f7fd fc88 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80038a4:	2084      	movs	r0, #132	; 0x84
 80038a6:	f7fd fc85 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038aa:	2000      	movs	r0, #0
 80038ac:	f7fd fc82 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 80038b0:	2093      	movs	r0, #147	; 0x93
 80038b2:	f7fd fc7f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038b6:	2000      	movs	r0, #0
 80038b8:	f7fd fc7c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80038bc:	20a2      	movs	r0, #162	; 0xa2
 80038be:	f7fd fc79 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038c2:	2000      	movs	r0, #0
 80038c4:	f7fd fc76 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 80038c8:	20b3      	movs	r0, #179	; 0xb3
 80038ca:	f7fd fc73 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038ce:	2000      	movs	r0, #0
 80038d0:	f7fd fc70 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 80038d4:	20be      	movs	r0, #190	; 0xbe
 80038d6:	f7fd fc6d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038da:	2000      	movs	r0, #0
 80038dc:	f7fd fc6a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80038e0:	20c4      	movs	r0, #196	; 0xc4
 80038e2:	f7fd fc67 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038e6:	2000      	movs	r0, #0
 80038e8:	f7fd fc64 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80038ec:	20cd      	movs	r0, #205	; 0xcd
 80038ee:	f7fd fc61 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038f2:	2000      	movs	r0, #0
 80038f4:	f7fd fc5e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80038f8:	20d3      	movs	r0, #211	; 0xd3
 80038fa:	f7fd fc5b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038fe:	2000      	movs	r0, #0
 8003900:	f7fd fc58 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8003904:	20dc      	movs	r0, #220	; 0xdc
 8003906:	f7fd fc55 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800390a:	2000      	movs	r0, #0
 800390c:	f7fd fc52 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003910:	20f3      	movs	r0, #243	; 0xf3
 8003912:	f7fd fc4f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003916:	2000      	movs	r0, #0
 8003918:	f7fd fc4c 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 800391c:	20e6      	movs	r0, #230	; 0xe6
 800391e:	f7fd fc25 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 8003922:	2011      	movs	r0, #17
 8003924:	f7fd fc46 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003928:	2000      	movs	r0, #0
 800392a:	f7fd fc43 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 800392e:	2034      	movs	r0, #52	; 0x34
 8003930:	f7fd fc40 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003934:	2000      	movs	r0, #0
 8003936:	f7fd fc3d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 800393a:	2056      	movs	r0, #86	; 0x56
 800393c:	f7fd fc3a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003940:	2000      	movs	r0, #0
 8003942:	f7fd fc37 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003946:	2076      	movs	r0, #118	; 0x76
 8003948:	f7fd fc34 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800394c:	2000      	movs	r0, #0
 800394e:	f7fd fc31 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003952:	2077      	movs	r0, #119	; 0x77
 8003954:	f7fd fc2e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003958:	2000      	movs	r0, #0
 800395a:	f7fd fc2b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800395e:	2066      	movs	r0, #102	; 0x66
 8003960:	f7fd fc28 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003964:	2000      	movs	r0, #0
 8003966:	f7fd fc25 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800396a:	2088      	movs	r0, #136	; 0x88
 800396c:	f7fd fc22 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003970:	2000      	movs	r0, #0
 8003972:	f7fd fc1f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003976:	2099      	movs	r0, #153	; 0x99
 8003978:	f7fd fc1c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800397c:	2000      	movs	r0, #0
 800397e:	f7fd fc19 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003982:	20bb      	movs	r0, #187	; 0xbb
 8003984:	f7fd fc16 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003988:	2000      	movs	r0, #0
 800398a:	f7fd fc13 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800398e:	2099      	movs	r0, #153	; 0x99
 8003990:	f7fd fc10 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003994:	2000      	movs	r0, #0
 8003996:	f7fd fc0d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800399a:	2066      	movs	r0, #102	; 0x66
 800399c:	f7fd fc0a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039a0:	2000      	movs	r0, #0
 80039a2:	f7fd fc07 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80039a6:	2055      	movs	r0, #85	; 0x55
 80039a8:	f7fd fc04 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039ac:	2000      	movs	r0, #0
 80039ae:	f7fd fc01 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80039b2:	2055      	movs	r0, #85	; 0x55
 80039b4:	f7fd fbfe 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039b8:	2000      	movs	r0, #0
 80039ba:	f7fd fbfb 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80039be:	2045      	movs	r0, #69	; 0x45
 80039c0:	f7fd fbf8 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039c4:	2000      	movs	r0, #0
 80039c6:	f7fd fbf5 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 80039ca:	2043      	movs	r0, #67	; 0x43
 80039cc:	f7fd fbf2 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039d0:	2000      	movs	r0, #0
 80039d2:	f7fd fbef 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80039d6:	2044      	movs	r0, #68	; 0x44
 80039d8:	f7fd fbec 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039dc:	2000      	movs	r0, #0
 80039de:	f7fd fbe9 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 80039e2:	20e7      	movs	r0, #231	; 0xe7
 80039e4:	f7fd fbc2 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80039e8:	2032      	movs	r0, #50	; 0x32
 80039ea:	f7fd fbe3 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039ee:	2000      	movs	r0, #0
 80039f0:	f7fd fbe0 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80039f4:	2055      	movs	r0, #85	; 0x55
 80039f6:	f7fd fbdd 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039fa:	2000      	movs	r0, #0
 80039fc:	f7fd fbda 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003a00:	2076      	movs	r0, #118	; 0x76
 8003a02:	f7fd fbd7 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a06:	2000      	movs	r0, #0
 8003a08:	f7fd fbd4 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003a0c:	2066      	movs	r0, #102	; 0x66
 8003a0e:	f7fd fbd1 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a12:	2000      	movs	r0, #0
 8003a14:	f7fd fbce 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8003a18:	2067      	movs	r0, #103	; 0x67
 8003a1a:	f7fd fbcb 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a1e:	2000      	movs	r0, #0
 8003a20:	f7fd fbc8 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8003a24:	2067      	movs	r0, #103	; 0x67
 8003a26:	f7fd fbc5 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	f7fd fbc2 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003a30:	2087      	movs	r0, #135	; 0x87
 8003a32:	f7fd fbbf 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a36:	2000      	movs	r0, #0
 8003a38:	f7fd fbbc 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003a3c:	2099      	movs	r0, #153	; 0x99
 8003a3e:	f7fd fbb9 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a42:	2000      	movs	r0, #0
 8003a44:	f7fd fbb6 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003a48:	20bb      	movs	r0, #187	; 0xbb
 8003a4a:	f7fd fbb3 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a4e:	2000      	movs	r0, #0
 8003a50:	f7fd fbb0 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003a54:	2099      	movs	r0, #153	; 0x99
 8003a56:	f7fd fbad 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f7fd fbaa 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003a60:	2077      	movs	r0, #119	; 0x77
 8003a62:	f7fd fba7 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a66:	2000      	movs	r0, #0
 8003a68:	f7fd fba4 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003a6c:	2044      	movs	r0, #68	; 0x44
 8003a6e:	f7fd fba1 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a72:	2000      	movs	r0, #0
 8003a74:	f7fd fb9e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003a78:	2056      	movs	r0, #86	; 0x56
 8003a7a:	f7fd fb9b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a7e:	2000      	movs	r0, #0
 8003a80:	f7fd fb98 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8003a84:	2023      	movs	r0, #35	; 0x23
 8003a86:	f7fd fb95 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	f7fd fb92 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003a90:	2033      	movs	r0, #51	; 0x33
 8003a92:	f7fd fb8f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a96:	2000      	movs	r0, #0
 8003a98:	f7fd fb8c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003a9c:	2045      	movs	r0, #69	; 0x45
 8003a9e:	f7fd fb89 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	f7fd fb86 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8003aa8:	20e8      	movs	r0, #232	; 0xe8
 8003aaa:	f7fd fb5f 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003aae:	2000      	movs	r0, #0
 8003ab0:	f7fd fb80 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	f7fd fb7d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003aba:	2099      	movs	r0, #153	; 0x99
 8003abc:	f7fd fb7a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	f7fd fb77 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003ac6:	2087      	movs	r0, #135	; 0x87
 8003ac8:	f7fd fb74 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003acc:	2000      	movs	r0, #0
 8003ace:	f7fd fb71 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003ad2:	2088      	movs	r0, #136	; 0x88
 8003ad4:	f7fd fb6e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ad8:	2000      	movs	r0, #0
 8003ada:	f7fd fb6b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003ade:	2077      	movs	r0, #119	; 0x77
 8003ae0:	f7fd fb68 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f7fd fb65 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003aea:	2066      	movs	r0, #102	; 0x66
 8003aec:	f7fd fb62 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003af0:	2000      	movs	r0, #0
 8003af2:	f7fd fb5f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003af6:	2088      	movs	r0, #136	; 0x88
 8003af8:	f7fd fb5c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003afc:	2000      	movs	r0, #0
 8003afe:	f7fd fb59 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 8003b02:	20aa      	movs	r0, #170	; 0xaa
 8003b04:	f7fd fb56 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b08:	2000      	movs	r0, #0
 8003b0a:	f7fd fb53 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003b0e:	20bb      	movs	r0, #187	; 0xbb
 8003b10:	f7fd fb50 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b14:	2000      	movs	r0, #0
 8003b16:	f7fd fb4d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003b1a:	2099      	movs	r0, #153	; 0x99
 8003b1c:	f7fd fb4a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b20:	2000      	movs	r0, #0
 8003b22:	f7fd fb47 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003b26:	2066      	movs	r0, #102	; 0x66
 8003b28:	f7fd fb44 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f7fd fb41 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003b32:	2055      	movs	r0, #85	; 0x55
 8003b34:	f7fd fb3e 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b38:	2000      	movs	r0, #0
 8003b3a:	f7fd fb3b 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003b3e:	2055      	movs	r0, #85	; 0x55
 8003b40:	f7fd fb38 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b44:	2000      	movs	r0, #0
 8003b46:	f7fd fb35 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003b4a:	2044      	movs	r0, #68	; 0x44
 8003b4c:	f7fd fb32 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b50:	2000      	movs	r0, #0
 8003b52:	f7fd fb2f 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003b56:	2044      	movs	r0, #68	; 0x44
 8003b58:	f7fd fb2c 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	f7fd fb29 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003b62:	2055      	movs	r0, #85	; 0x55
 8003b64:	f7fd fb26 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b68:	2000      	movs	r0, #0
 8003b6a:	f7fd fb23 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8003b6e:	20e9      	movs	r0, #233	; 0xe9
 8003b70:	f7fd fafc 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003b74:	20aa      	movs	r0, #170	; 0xaa
 8003b76:	f7fd fb1d 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	f7fd fb1a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b80:	2000      	movs	r0, #0
 8003b82:	f7fd fb17 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b86:	2000      	movs	r0, #0
 8003b88:	f7fd fb14 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	f7fd faed 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003b92:	20aa      	movs	r0, #170	; 0xaa
 8003b94:	f7fd fb0e 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003b98:	20cf      	movs	r0, #207	; 0xcf
 8003b9a:	f7fd fae7 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	f7fd fb08 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	f7fd fb05 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003baa:	2000      	movs	r0, #0
 8003bac:	f7fd fb02 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	f7fd faff 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	f7fd fafc 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	f7fd faf9 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	f7fd faf6 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bc8:	2000      	movs	r0, #0
 8003bca:	f7fd faf3 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bce:	2000      	movs	r0, #0
 8003bd0:	f7fd faf0 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	f7fd faed 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bda:	2000      	movs	r0, #0
 8003bdc:	f7fd faea 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003be0:	2000      	movs	r0, #0
 8003be2:	f7fd fae7 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003be6:	2000      	movs	r0, #0
 8003be8:	f7fd fae4 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bec:	2000      	movs	r0, #0
 8003bee:	f7fd fae1 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	f7fd fade 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	f7fd fadb 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bfe:	2000      	movs	r0, #0
 8003c00:	f7fd fad8 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 8003c04:	20f0      	movs	r0, #240	; 0xf0
 8003c06:	f7fd fab1 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	f7fd fad2 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003c10:	2050      	movs	r0, #80	; 0x50
 8003c12:	f7fd facf 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c16:	2000      	movs	r0, #0
 8003c18:	f7fd facc 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	f7fd fac9 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c22:	2000      	movs	r0, #0
 8003c24:	f7fd fac6 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8003c28:	20f3      	movs	r0, #243	; 0xf3
 8003c2a:	f7fd fa9f 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003c2e:	2000      	movs	r0, #0
 8003c30:	f7fd fac0 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 8003c34:	20f9      	movs	r0, #249	; 0xf9
 8003c36:	f7fd fa99 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 8003c3a:	2006      	movs	r0, #6
 8003c3c:	f7fd faba 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003c40:	2010      	movs	r0, #16
 8003c42:	f7fd fab7 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003c46:	2029      	movs	r0, #41	; 0x29
 8003c48:	f7fd fab4 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	f7fd fab1 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8003c52:	203a      	movs	r0, #58	; 0x3a
 8003c54:	f7fd fa8a 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003c58:	2055      	movs	r0, #85	; 0x55
 8003c5a:	f7fd faab 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 8003c5e:	2011      	movs	r0, #17
 8003c60:	f7fd fa84 	bl	800116c <LCD_WR_REG>
		HAL_Delay(100);
 8003c64:	2064      	movs	r0, #100	; 0x64
 8003c66:	f004 f925 	bl	8007eb4 <HAL_Delay>
		LCD_WR_REG(0x29);
 8003c6a:	2029      	movs	r0, #41	; 0x29
 8003c6c:	f7fd fa7e 	bl	800116c <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003c70:	2035      	movs	r0, #53	; 0x35
 8003c72:	f7fd fa7b 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003c76:	2000      	movs	r0, #0
 8003c78:	f7fd fa9c 	bl	80011b4 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8003c7c:	2051      	movs	r0, #81	; 0x51
 8003c7e:	f7fd fa75 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8003c82:	20ff      	movs	r0, #255	; 0xff
 8003c84:	f7fd fa96 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003c88:	2053      	movs	r0, #83	; 0x53
 8003c8a:	f7fd fa6f 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8003c8e:	202c      	movs	r0, #44	; 0x2c
 8003c90:	f7fd fa90 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8003c94:	2055      	movs	r0, #85	; 0x55
 8003c96:	f7fd fa69 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8003c9a:	2082      	movs	r0, #130	; 0x82
 8003c9c:	f7fd fa8a 	bl	80011b4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8003ca0:	202c      	movs	r0, #44	; 0x2c
 8003ca2:	f7fd fa63 	bl	800116c <LCD_WR_REG>
 8003ca6:	f002 bca1 	b.w	80065ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8003caa:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <LCD_Init+0x1504>)
 8003cac:	889b      	ldrh	r3, [r3, #4]
 8003cae:	f245 5210 	movw	r2, #21776	; 0x5510
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	f040 8782 	bne.w	8004bbc <LCD_Init+0x2404>
 8003cb8:	e002      	b.n	8003cc0 <LCD_Init+0x1508>
 8003cba:	bf00      	nop
 8003cbc:	200004b0 	.word	0x200004b0
		LCD_WriteReg(0xF000, 0x55);
 8003cc0:	2155      	movs	r1, #85	; 0x55
 8003cc2:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003cc6:	f7fd fadd 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8003cca:	21aa      	movs	r1, #170	; 0xaa
 8003ccc:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003cd0:	f7fd fad8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8003cd4:	2152      	movs	r1, #82	; 0x52
 8003cd6:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003cda:	f7fd fad3 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8003cde:	2108      	movs	r1, #8
 8003ce0:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003ce4:	f7fd face 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8003ce8:	2101      	movs	r1, #1
 8003cea:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003cee:	f7fd fac9 	bl	8001284 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 8003cf2:	210d      	movs	r1, #13
 8003cf4:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8003cf8:	f7fd fac4 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 8003cfc:	210d      	movs	r1, #13
 8003cfe:	f24b 0001 	movw	r0, #45057	; 0xb001
 8003d02:	f7fd fabf 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 8003d06:	210d      	movs	r1, #13
 8003d08:	f24b 0002 	movw	r0, #45058	; 0xb002
 8003d0c:	f7fd faba 	bl	8001284 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8003d10:	2134      	movs	r1, #52	; 0x34
 8003d12:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003d16:	f7fd fab5 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 8003d1a:	2134      	movs	r1, #52	; 0x34
 8003d1c:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003d20:	f7fd fab0 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 8003d24:	2134      	movs	r1, #52	; 0x34
 8003d26:	f24b 6002 	movw	r0, #46594	; 0xb602
 8003d2a:	f7fd faab 	bl	8001284 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 8003d2e:	210d      	movs	r1, #13
 8003d30:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003d34:	f7fd faa6 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8003d38:	210d      	movs	r1, #13
 8003d3a:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003d3e:	f7fd faa1 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 8003d42:	210d      	movs	r1, #13
 8003d44:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003d48:	f7fd fa9c 	bl	8001284 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 8003d4c:	2134      	movs	r1, #52	; 0x34
 8003d4e:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003d52:	f7fd fa97 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8003d56:	2134      	movs	r1, #52	; 0x34
 8003d58:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003d5c:	f7fd fa92 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8003d60:	2134      	movs	r1, #52	; 0x34
 8003d62:	f24b 7002 	movw	r0, #46850	; 0xb702
 8003d66:	f7fd fa8d 	bl	8001284 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003d70:	f7fd fa88 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8003d74:	2100      	movs	r1, #0
 8003d76:	f24b 2001 	movw	r0, #45569	; 0xb201
 8003d7a:	f7fd fa83 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 8003d7e:	2100      	movs	r1, #0
 8003d80:	f24b 2002 	movw	r0, #45570	; 0xb202
 8003d84:	f7fd fa7e 	bl	8001284 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003d88:	2124      	movs	r1, #36	; 0x24
 8003d8a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003d8e:	f7fd fa79 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 8003d92:	2124      	movs	r1, #36	; 0x24
 8003d94:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003d98:	f7fd fa74 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 8003d9c:	2124      	movs	r1, #36	; 0x24
 8003d9e:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003da2:	f7fd fa6f 	bl	8001284 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 8003da6:	2101      	movs	r1, #1
 8003da8:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8003dac:	f7fd fa6a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8003db0:	210f      	movs	r1, #15
 8003db2:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8003db6:	f7fd fa65 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 8003dba:	210f      	movs	r1, #15
 8003dbc:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003dc0:	f7fd fa60 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 8003dc4:	210f      	movs	r1, #15
 8003dc6:	f24b 3002 	movw	r0, #45826	; 0xb302
 8003dca:	f7fd fa5b 	bl	8001284 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 8003dce:	2134      	movs	r1, #52	; 0x34
 8003dd0:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8003dd4:	f7fd fa56 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8003dd8:	2134      	movs	r1, #52	; 0x34
 8003dda:	f64b 1001 	movw	r0, #47361	; 0xb901
 8003dde:	f7fd fa51 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 8003de2:	2134      	movs	r1, #52	; 0x34
 8003de4:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003de8:	f7fd fa4c 	bl	8001284 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 8003dec:	2108      	movs	r1, #8
 8003dee:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8003df2:	f7fd fa47 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 8003df6:	2108      	movs	r1, #8
 8003df8:	f24b 5001 	movw	r0, #46337	; 0xb501
 8003dfc:	f7fd fa42 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8003e00:	2108      	movs	r1, #8
 8003e02:	f24b 5002 	movw	r0, #46338	; 0xb502
 8003e06:	f7fd fa3d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 8003e0a:	2103      	movs	r1, #3
 8003e0c:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003e10:	f7fd fa38 	bl	8001284 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 8003e14:	2124      	movs	r1, #36	; 0x24
 8003e16:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8003e1a:	f7fd fa33 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 8003e1e:	2124      	movs	r1, #36	; 0x24
 8003e20:	f64b 2001 	movw	r0, #47617	; 0xba01
 8003e24:	f7fd fa2e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8003e28:	2124      	movs	r1, #36	; 0x24
 8003e2a:	f64b 2002 	movw	r0, #47618	; 0xba02
 8003e2e:	f7fd fa29 	bl	8001284 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 8003e32:	2100      	movs	r1, #0
 8003e34:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003e38:	f7fd fa24 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 8003e3c:	2178      	movs	r1, #120	; 0x78
 8003e3e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003e42:	f7fd fa1f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8003e46:	2100      	movs	r1, #0
 8003e48:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003e4c:	f7fd fa1a 	bl	8001284 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8003e50:	2100      	movs	r1, #0
 8003e52:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8003e56:	f7fd fa15 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 8003e5a:	2178      	movs	r1, #120	; 0x78
 8003e5c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003e60:	f7fd fa10 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8003e64:	2100      	movs	r1, #0
 8003e66:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8003e6a:	f7fd fa0b 	bl	8001284 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 8003e6e:	2100      	movs	r1, #0
 8003e70:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8003e74:	f7fd fa06 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003e78:	2164      	movs	r1, #100	; 0x64
 8003e7a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8003e7e:	f7fd fa01 	bl	8001284 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8003e82:	2100      	movs	r1, #0
 8003e84:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003e88:	f7fd f9fc 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 8003e8c:	2133      	movs	r1, #51	; 0x33
 8003e8e:	f24d 1001 	movw	r0, #53505	; 0xd101
 8003e92:	f7fd f9f7 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 8003e96:	2100      	movs	r1, #0
 8003e98:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003e9c:	f7fd f9f2 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003ea0:	2134      	movs	r1, #52	; 0x34
 8003ea2:	f24d 1003 	movw	r0, #53507	; 0xd103
 8003ea6:	f7fd f9ed 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 8003eaa:	2100      	movs	r1, #0
 8003eac:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003eb0:	f7fd f9e8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 8003eb4:	213a      	movs	r1, #58	; 0x3a
 8003eb6:	f24d 1005 	movw	r0, #53509	; 0xd105
 8003eba:	f7fd f9e3 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	f24d 1006 	movw	r0, #53510	; 0xd106
 8003ec4:	f7fd f9de 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8003ec8:	214a      	movs	r1, #74	; 0x4a
 8003eca:	f24d 1007 	movw	r0, #53511	; 0xd107
 8003ece:	f7fd f9d9 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003ed8:	f7fd f9d4 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 8003edc:	215c      	movs	r1, #92	; 0x5c
 8003ede:	f24d 1009 	movw	r0, #53513	; 0xd109
 8003ee2:	f7fd f9cf 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8003eec:	f7fd f9ca 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8003ef0:	2181      	movs	r1, #129	; 0x81
 8003ef2:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8003ef6:	f7fd f9c5 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 8003efa:	2100      	movs	r1, #0
 8003efc:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003f00:	f7fd f9c0 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 8003f04:	21a6      	movs	r1, #166	; 0xa6
 8003f06:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8003f0a:	f7fd f9bb 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 8003f0e:	2100      	movs	r1, #0
 8003f10:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8003f14:	f7fd f9b6 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8003f18:	21e5      	movs	r1, #229	; 0xe5
 8003f1a:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8003f1e:	f7fd f9b1 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 8003f22:	2101      	movs	r1, #1
 8003f24:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003f28:	f7fd f9ac 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 8003f2c:	2113      	movs	r1, #19
 8003f2e:	f24d 1011 	movw	r0, #53521	; 0xd111
 8003f32:	f7fd f9a7 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 8003f36:	2101      	movs	r1, #1
 8003f38:	f24d 1012 	movw	r0, #53522	; 0xd112
 8003f3c:	f7fd f9a2 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8003f40:	2154      	movs	r1, #84	; 0x54
 8003f42:	f24d 1013 	movw	r0, #53523	; 0xd113
 8003f46:	f7fd f99d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003f50:	f7fd f998 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8003f54:	2182      	movs	r1, #130	; 0x82
 8003f56:	f24d 1015 	movw	r0, #53525	; 0xd115
 8003f5a:	f7fd f993 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 8003f5e:	2101      	movs	r1, #1
 8003f60:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003f64:	f7fd f98e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003f68:	21ca      	movs	r1, #202	; 0xca
 8003f6a:	f24d 1017 	movw	r0, #53527	; 0xd117
 8003f6e:	f7fd f989 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8003f72:	2102      	movs	r1, #2
 8003f74:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003f78:	f7fd f984 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	f24d 1019 	movw	r0, #53529	; 0xd119
 8003f82:	f7fd f97f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8003f86:	2102      	movs	r1, #2
 8003f88:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8003f8c:	f7fd f97a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003f90:	2101      	movs	r1, #1
 8003f92:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8003f96:	f7fd f975 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003fa0:	f7fd f970 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 8003fa4:	2134      	movs	r1, #52	; 0x34
 8003fa6:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8003faa:	f7fd f96b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 8003fae:	2102      	movs	r1, #2
 8003fb0:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8003fb4:	f7fd f966 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003fb8:	2167      	movs	r1, #103	; 0x67
 8003fba:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8003fbe:	f7fd f961 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 8003fc2:	2102      	movs	r1, #2
 8003fc4:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003fc8:	f7fd f95c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 8003fcc:	2184      	movs	r1, #132	; 0x84
 8003fce:	f24d 1021 	movw	r0, #53537	; 0xd121
 8003fd2:	f7fd f957 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8003fd6:	2102      	movs	r1, #2
 8003fd8:	f24d 1022 	movw	r0, #53538	; 0xd122
 8003fdc:	f7fd f952 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8003fe0:	21a4      	movs	r1, #164	; 0xa4
 8003fe2:	f24d 1023 	movw	r0, #53539	; 0xd123
 8003fe6:	f7fd f94d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 8003fea:	2102      	movs	r1, #2
 8003fec:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003ff0:	f7fd f948 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 8003ff4:	21b7      	movs	r1, #183	; 0xb7
 8003ff6:	f24d 1025 	movw	r0, #53541	; 0xd125
 8003ffa:	f7fd f943 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 8003ffe:	2102      	movs	r1, #2
 8004000:	f24d 1026 	movw	r0, #53542	; 0xd126
 8004004:	f7fd f93e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8004008:	21cf      	movs	r1, #207	; 0xcf
 800400a:	f24d 1027 	movw	r0, #53543	; 0xd127
 800400e:	f7fd f939 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 8004012:	2102      	movs	r1, #2
 8004014:	f24d 1028 	movw	r0, #53544	; 0xd128
 8004018:	f7fd f934 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 800401c:	21de      	movs	r1, #222	; 0xde
 800401e:	f24d 1029 	movw	r0, #53545	; 0xd129
 8004022:	f7fd f92f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 8004026:	2102      	movs	r1, #2
 8004028:	f24d 102a 	movw	r0, #53546	; 0xd12a
 800402c:	f7fd f92a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8004030:	21f2      	movs	r1, #242	; 0xf2
 8004032:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8004036:	f7fd f925 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 800403a:	2102      	movs	r1, #2
 800403c:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8004040:	f7fd f920 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8004044:	21fe      	movs	r1, #254	; 0xfe
 8004046:	f24d 102d 	movw	r0, #53549	; 0xd12d
 800404a:	f7fd f91b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 800404e:	2103      	movs	r1, #3
 8004050:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8004054:	f7fd f916 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8004058:	2110      	movs	r1, #16
 800405a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800405e:	f7fd f911 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8004062:	2103      	movs	r1, #3
 8004064:	f24d 1030 	movw	r0, #53552	; 0xd130
 8004068:	f7fd f90c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 800406c:	2133      	movs	r1, #51	; 0x33
 800406e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8004072:	f7fd f907 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8004076:	2103      	movs	r1, #3
 8004078:	f24d 1032 	movw	r0, #53554	; 0xd132
 800407c:	f7fd f902 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8004080:	216d      	movs	r1, #109	; 0x6d
 8004082:	f24d 1033 	movw	r0, #53555	; 0xd133
 8004086:	f7fd f8fd 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 800408a:	2100      	movs	r1, #0
 800408c:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8004090:	f7fd f8f8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8004094:	2133      	movs	r1, #51	; 0x33
 8004096:	f24d 2001 	movw	r0, #53761	; 0xd201
 800409a:	f7fd f8f3 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 800409e:	2100      	movs	r1, #0
 80040a0:	f24d 2002 	movw	r0, #53762	; 0xd202
 80040a4:	f7fd f8ee 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 80040a8:	2134      	movs	r1, #52	; 0x34
 80040aa:	f24d 2003 	movw	r0, #53763	; 0xd203
 80040ae:	f7fd f8e9 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 80040b2:	2100      	movs	r1, #0
 80040b4:	f24d 2004 	movw	r0, #53764	; 0xd204
 80040b8:	f7fd f8e4 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 80040bc:	213a      	movs	r1, #58	; 0x3a
 80040be:	f24d 2005 	movw	r0, #53765	; 0xd205
 80040c2:	f7fd f8df 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 80040c6:	2100      	movs	r1, #0
 80040c8:	f24d 2006 	movw	r0, #53766	; 0xd206
 80040cc:	f7fd f8da 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 80040d0:	214a      	movs	r1, #74	; 0x4a
 80040d2:	f24d 2007 	movw	r0, #53767	; 0xd207
 80040d6:	f7fd f8d5 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 80040da:	2100      	movs	r1, #0
 80040dc:	f24d 2008 	movw	r0, #53768	; 0xd208
 80040e0:	f7fd f8d0 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 80040e4:	215c      	movs	r1, #92	; 0x5c
 80040e6:	f24d 2009 	movw	r0, #53769	; 0xd209
 80040ea:	f7fd f8cb 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 80040ee:	2100      	movs	r1, #0
 80040f0:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80040f4:	f7fd f8c6 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 80040f8:	2181      	movs	r1, #129	; 0x81
 80040fa:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80040fe:	f7fd f8c1 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8004102:	2100      	movs	r1, #0
 8004104:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8004108:	f7fd f8bc 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 800410c:	21a6      	movs	r1, #166	; 0xa6
 800410e:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8004112:	f7fd f8b7 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8004116:	2100      	movs	r1, #0
 8004118:	f24d 200e 	movw	r0, #53774	; 0xd20e
 800411c:	f7fd f8b2 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8004120:	21e5      	movs	r1, #229	; 0xe5
 8004122:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8004126:	f7fd f8ad 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 800412a:	2101      	movs	r1, #1
 800412c:	f24d 2010 	movw	r0, #53776	; 0xd210
 8004130:	f7fd f8a8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8004134:	2113      	movs	r1, #19
 8004136:	f24d 2011 	movw	r0, #53777	; 0xd211
 800413a:	f7fd f8a3 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 800413e:	2101      	movs	r1, #1
 8004140:	f24d 2012 	movw	r0, #53778	; 0xd212
 8004144:	f7fd f89e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8004148:	2154      	movs	r1, #84	; 0x54
 800414a:	f24d 2013 	movw	r0, #53779	; 0xd213
 800414e:	f7fd f899 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8004152:	2101      	movs	r1, #1
 8004154:	f24d 2014 	movw	r0, #53780	; 0xd214
 8004158:	f7fd f894 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 800415c:	2182      	movs	r1, #130	; 0x82
 800415e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8004162:	f7fd f88f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8004166:	2101      	movs	r1, #1
 8004168:	f24d 2016 	movw	r0, #53782	; 0xd216
 800416c:	f7fd f88a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8004170:	21ca      	movs	r1, #202	; 0xca
 8004172:	f24d 2017 	movw	r0, #53783	; 0xd217
 8004176:	f7fd f885 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 800417a:	2102      	movs	r1, #2
 800417c:	f24d 2018 	movw	r0, #53784	; 0xd218
 8004180:	f7fd f880 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8004184:	2100      	movs	r1, #0
 8004186:	f24d 2019 	movw	r0, #53785	; 0xd219
 800418a:	f7fd f87b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 800418e:	2102      	movs	r1, #2
 8004190:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8004194:	f7fd f876 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8004198:	2101      	movs	r1, #1
 800419a:	f24d 201b 	movw	r0, #53787	; 0xd21b
 800419e:	f7fd f871 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 80041a2:	2102      	movs	r1, #2
 80041a4:	f24d 201c 	movw	r0, #53788	; 0xd21c
 80041a8:	f7fd f86c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 80041ac:	2134      	movs	r1, #52	; 0x34
 80041ae:	f24d 201d 	movw	r0, #53789	; 0xd21d
 80041b2:	f7fd f867 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 80041b6:	2102      	movs	r1, #2
 80041b8:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80041bc:	f7fd f862 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 80041c0:	2167      	movs	r1, #103	; 0x67
 80041c2:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80041c6:	f7fd f85d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 80041ca:	2102      	movs	r1, #2
 80041cc:	f24d 2020 	movw	r0, #53792	; 0xd220
 80041d0:	f7fd f858 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 80041d4:	2184      	movs	r1, #132	; 0x84
 80041d6:	f24d 2021 	movw	r0, #53793	; 0xd221
 80041da:	f7fd f853 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 80041de:	2102      	movs	r1, #2
 80041e0:	f24d 2022 	movw	r0, #53794	; 0xd222
 80041e4:	f7fd f84e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 80041e8:	21a4      	movs	r1, #164	; 0xa4
 80041ea:	f24d 2023 	movw	r0, #53795	; 0xd223
 80041ee:	f7fd f849 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 80041f2:	2102      	movs	r1, #2
 80041f4:	f24d 2024 	movw	r0, #53796	; 0xd224
 80041f8:	f7fd f844 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 80041fc:	21b7      	movs	r1, #183	; 0xb7
 80041fe:	f24d 2025 	movw	r0, #53797	; 0xd225
 8004202:	f7fd f83f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8004206:	2102      	movs	r1, #2
 8004208:	f24d 2026 	movw	r0, #53798	; 0xd226
 800420c:	f7fd f83a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8004210:	21cf      	movs	r1, #207	; 0xcf
 8004212:	f24d 2027 	movw	r0, #53799	; 0xd227
 8004216:	f7fd f835 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 800421a:	2102      	movs	r1, #2
 800421c:	f24d 2028 	movw	r0, #53800	; 0xd228
 8004220:	f7fd f830 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8004224:	21de      	movs	r1, #222	; 0xde
 8004226:	f24d 2029 	movw	r0, #53801	; 0xd229
 800422a:	f7fd f82b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 800422e:	2102      	movs	r1, #2
 8004230:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8004234:	f7fd f826 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8004238:	21f2      	movs	r1, #242	; 0xf2
 800423a:	f24d 202b 	movw	r0, #53803	; 0xd22b
 800423e:	f7fd f821 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8004242:	2102      	movs	r1, #2
 8004244:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8004248:	f7fd f81c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 800424c:	21fe      	movs	r1, #254	; 0xfe
 800424e:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8004252:	f7fd f817 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8004256:	2103      	movs	r1, #3
 8004258:	f24d 202e 	movw	r0, #53806	; 0xd22e
 800425c:	f7fd f812 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8004260:	2110      	movs	r1, #16
 8004262:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8004266:	f7fd f80d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 800426a:	2103      	movs	r1, #3
 800426c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8004270:	f7fd f808 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8004274:	2133      	movs	r1, #51	; 0x33
 8004276:	f24d 2031 	movw	r0, #53809	; 0xd231
 800427a:	f7fd f803 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 800427e:	2103      	movs	r1, #3
 8004280:	f24d 2032 	movw	r0, #53810	; 0xd232
 8004284:	f7fc fffe 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8004288:	216d      	movs	r1, #109	; 0x6d
 800428a:	f24d 2033 	movw	r0, #53811	; 0xd233
 800428e:	f7fc fff9 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8004292:	2100      	movs	r1, #0
 8004294:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8004298:	f7fc fff4 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 800429c:	2133      	movs	r1, #51	; 0x33
 800429e:	f24d 3001 	movw	r0, #54017	; 0xd301
 80042a2:	f7fc ffef 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 80042a6:	2100      	movs	r1, #0
 80042a8:	f24d 3002 	movw	r0, #54018	; 0xd302
 80042ac:	f7fc ffea 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 80042b0:	2134      	movs	r1, #52	; 0x34
 80042b2:	f24d 3003 	movw	r0, #54019	; 0xd303
 80042b6:	f7fc ffe5 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 80042ba:	2100      	movs	r1, #0
 80042bc:	f24d 3004 	movw	r0, #54020	; 0xd304
 80042c0:	f7fc ffe0 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 80042c4:	213a      	movs	r1, #58	; 0x3a
 80042c6:	f24d 3005 	movw	r0, #54021	; 0xd305
 80042ca:	f7fc ffdb 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 80042ce:	2100      	movs	r1, #0
 80042d0:	f24d 3006 	movw	r0, #54022	; 0xd306
 80042d4:	f7fc ffd6 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 80042d8:	214a      	movs	r1, #74	; 0x4a
 80042da:	f24d 3007 	movw	r0, #54023	; 0xd307
 80042de:	f7fc ffd1 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 80042e2:	2100      	movs	r1, #0
 80042e4:	f24d 3008 	movw	r0, #54024	; 0xd308
 80042e8:	f7fc ffcc 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 80042ec:	215c      	movs	r1, #92	; 0x5c
 80042ee:	f24d 3009 	movw	r0, #54025	; 0xd309
 80042f2:	f7fc ffc7 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 80042f6:	2100      	movs	r1, #0
 80042f8:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80042fc:	f7fc ffc2 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8004300:	2181      	movs	r1, #129	; 0x81
 8004302:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8004306:	f7fc ffbd 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 800430a:	2100      	movs	r1, #0
 800430c:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8004310:	f7fc ffb8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8004314:	21a6      	movs	r1, #166	; 0xa6
 8004316:	f24d 300d 	movw	r0, #54029	; 0xd30d
 800431a:	f7fc ffb3 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 800431e:	2100      	movs	r1, #0
 8004320:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8004324:	f7fc ffae 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8004328:	21e5      	movs	r1, #229	; 0xe5
 800432a:	f24d 300f 	movw	r0, #54031	; 0xd30f
 800432e:	f7fc ffa9 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8004332:	2101      	movs	r1, #1
 8004334:	f24d 3010 	movw	r0, #54032	; 0xd310
 8004338:	f7fc ffa4 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 800433c:	2113      	movs	r1, #19
 800433e:	f24d 3011 	movw	r0, #54033	; 0xd311
 8004342:	f7fc ff9f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8004346:	2101      	movs	r1, #1
 8004348:	f24d 3012 	movw	r0, #54034	; 0xd312
 800434c:	f7fc ff9a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8004350:	2154      	movs	r1, #84	; 0x54
 8004352:	f24d 3013 	movw	r0, #54035	; 0xd313
 8004356:	f7fc ff95 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 800435a:	2101      	movs	r1, #1
 800435c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8004360:	f7fc ff90 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8004364:	2182      	movs	r1, #130	; 0x82
 8004366:	f24d 3015 	movw	r0, #54037	; 0xd315
 800436a:	f7fc ff8b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 800436e:	2101      	movs	r1, #1
 8004370:	f24d 3016 	movw	r0, #54038	; 0xd316
 8004374:	f7fc ff86 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8004378:	21ca      	movs	r1, #202	; 0xca
 800437a:	f24d 3017 	movw	r0, #54039	; 0xd317
 800437e:	f7fc ff81 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8004382:	2102      	movs	r1, #2
 8004384:	f24d 3018 	movw	r0, #54040	; 0xd318
 8004388:	f7fc ff7c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 800438c:	2100      	movs	r1, #0
 800438e:	f24d 3019 	movw	r0, #54041	; 0xd319
 8004392:	f7fc ff77 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8004396:	2102      	movs	r1, #2
 8004398:	f24d 301a 	movw	r0, #54042	; 0xd31a
 800439c:	f7fc ff72 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 80043a0:	2101      	movs	r1, #1
 80043a2:	f24d 301b 	movw	r0, #54043	; 0xd31b
 80043a6:	f7fc ff6d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 80043aa:	2102      	movs	r1, #2
 80043ac:	f24d 301c 	movw	r0, #54044	; 0xd31c
 80043b0:	f7fc ff68 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 80043b4:	2134      	movs	r1, #52	; 0x34
 80043b6:	f24d 301d 	movw	r0, #54045	; 0xd31d
 80043ba:	f7fc ff63 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 80043be:	2102      	movs	r1, #2
 80043c0:	f24d 301e 	movw	r0, #54046	; 0xd31e
 80043c4:	f7fc ff5e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 80043c8:	2167      	movs	r1, #103	; 0x67
 80043ca:	f24d 301f 	movw	r0, #54047	; 0xd31f
 80043ce:	f7fc ff59 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 80043d2:	2102      	movs	r1, #2
 80043d4:	f24d 3020 	movw	r0, #54048	; 0xd320
 80043d8:	f7fc ff54 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 80043dc:	2184      	movs	r1, #132	; 0x84
 80043de:	f24d 3021 	movw	r0, #54049	; 0xd321
 80043e2:	f7fc ff4f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 80043e6:	2102      	movs	r1, #2
 80043e8:	f24d 3022 	movw	r0, #54050	; 0xd322
 80043ec:	f7fc ff4a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 80043f0:	21a4      	movs	r1, #164	; 0xa4
 80043f2:	f24d 3023 	movw	r0, #54051	; 0xd323
 80043f6:	f7fc ff45 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 80043fa:	2102      	movs	r1, #2
 80043fc:	f24d 3024 	movw	r0, #54052	; 0xd324
 8004400:	f7fc ff40 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8004404:	21b7      	movs	r1, #183	; 0xb7
 8004406:	f24d 3025 	movw	r0, #54053	; 0xd325
 800440a:	f7fc ff3b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 800440e:	2102      	movs	r1, #2
 8004410:	f24d 3026 	movw	r0, #54054	; 0xd326
 8004414:	f7fc ff36 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8004418:	21cf      	movs	r1, #207	; 0xcf
 800441a:	f24d 3027 	movw	r0, #54055	; 0xd327
 800441e:	f7fc ff31 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8004422:	2102      	movs	r1, #2
 8004424:	f24d 3028 	movw	r0, #54056	; 0xd328
 8004428:	f7fc ff2c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 800442c:	21de      	movs	r1, #222	; 0xde
 800442e:	f24d 3029 	movw	r0, #54057	; 0xd329
 8004432:	f7fc ff27 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8004436:	2102      	movs	r1, #2
 8004438:	f24d 302a 	movw	r0, #54058	; 0xd32a
 800443c:	f7fc ff22 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8004440:	21f2      	movs	r1, #242	; 0xf2
 8004442:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8004446:	f7fc ff1d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 800444a:	2102      	movs	r1, #2
 800444c:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8004450:	f7fc ff18 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8004454:	21fe      	movs	r1, #254	; 0xfe
 8004456:	f24d 302d 	movw	r0, #54061	; 0xd32d
 800445a:	f7fc ff13 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 800445e:	2103      	movs	r1, #3
 8004460:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8004464:	f7fc ff0e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8004468:	2110      	movs	r1, #16
 800446a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 800446e:	f7fc ff09 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8004472:	2103      	movs	r1, #3
 8004474:	f24d 3030 	movw	r0, #54064	; 0xd330
 8004478:	f7fc ff04 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 800447c:	2133      	movs	r1, #51	; 0x33
 800447e:	f24d 3031 	movw	r0, #54065	; 0xd331
 8004482:	f7fc feff 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8004486:	2103      	movs	r1, #3
 8004488:	f24d 3032 	movw	r0, #54066	; 0xd332
 800448c:	f7fc fefa 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8004490:	216d      	movs	r1, #109	; 0x6d
 8004492:	f24d 3033 	movw	r0, #54067	; 0xd333
 8004496:	f7fc fef5 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 800449a:	2100      	movs	r1, #0
 800449c:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 80044a0:	f7fc fef0 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 80044a4:	2133      	movs	r1, #51	; 0x33
 80044a6:	f24d 4001 	movw	r0, #54273	; 0xd401
 80044aa:	f7fc feeb 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 80044ae:	2100      	movs	r1, #0
 80044b0:	f24d 4002 	movw	r0, #54274	; 0xd402
 80044b4:	f7fc fee6 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 80044b8:	2134      	movs	r1, #52	; 0x34
 80044ba:	f24d 4003 	movw	r0, #54275	; 0xd403
 80044be:	f7fc fee1 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 80044c2:	2100      	movs	r1, #0
 80044c4:	f24d 4004 	movw	r0, #54276	; 0xd404
 80044c8:	f7fc fedc 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 80044cc:	213a      	movs	r1, #58	; 0x3a
 80044ce:	f24d 4005 	movw	r0, #54277	; 0xd405
 80044d2:	f7fc fed7 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 80044d6:	2100      	movs	r1, #0
 80044d8:	f24d 4006 	movw	r0, #54278	; 0xd406
 80044dc:	f7fc fed2 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 80044e0:	214a      	movs	r1, #74	; 0x4a
 80044e2:	f24d 4007 	movw	r0, #54279	; 0xd407
 80044e6:	f7fc fecd 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 80044ea:	2100      	movs	r1, #0
 80044ec:	f24d 4008 	movw	r0, #54280	; 0xd408
 80044f0:	f7fc fec8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 80044f4:	215c      	movs	r1, #92	; 0x5c
 80044f6:	f24d 4009 	movw	r0, #54281	; 0xd409
 80044fa:	f7fc fec3 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 80044fe:	2100      	movs	r1, #0
 8004500:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8004504:	f7fc febe 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8004508:	2181      	movs	r1, #129	; 0x81
 800450a:	f24d 400b 	movw	r0, #54283	; 0xd40b
 800450e:	f7fc feb9 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8004512:	2100      	movs	r1, #0
 8004514:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8004518:	f7fc feb4 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 800451c:	21a6      	movs	r1, #166	; 0xa6
 800451e:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8004522:	f7fc feaf 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8004526:	2100      	movs	r1, #0
 8004528:	f24d 400e 	movw	r0, #54286	; 0xd40e
 800452c:	f7fc feaa 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8004530:	21e5      	movs	r1, #229	; 0xe5
 8004532:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8004536:	f7fc fea5 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 800453a:	2101      	movs	r1, #1
 800453c:	f24d 4010 	movw	r0, #54288	; 0xd410
 8004540:	f7fc fea0 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8004544:	2113      	movs	r1, #19
 8004546:	f24d 4011 	movw	r0, #54289	; 0xd411
 800454a:	f7fc fe9b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 800454e:	2101      	movs	r1, #1
 8004550:	f24d 4012 	movw	r0, #54290	; 0xd412
 8004554:	f7fc fe96 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8004558:	2154      	movs	r1, #84	; 0x54
 800455a:	f24d 4013 	movw	r0, #54291	; 0xd413
 800455e:	f7fc fe91 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8004562:	2101      	movs	r1, #1
 8004564:	f24d 4014 	movw	r0, #54292	; 0xd414
 8004568:	f7fc fe8c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 800456c:	2182      	movs	r1, #130	; 0x82
 800456e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8004572:	f7fc fe87 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8004576:	2101      	movs	r1, #1
 8004578:	f24d 4016 	movw	r0, #54294	; 0xd416
 800457c:	f7fc fe82 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8004580:	21ca      	movs	r1, #202	; 0xca
 8004582:	f24d 4017 	movw	r0, #54295	; 0xd417
 8004586:	f7fc fe7d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 800458a:	2102      	movs	r1, #2
 800458c:	f24d 4018 	movw	r0, #54296	; 0xd418
 8004590:	f7fc fe78 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8004594:	2100      	movs	r1, #0
 8004596:	f24d 4019 	movw	r0, #54297	; 0xd419
 800459a:	f7fc fe73 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 800459e:	2102      	movs	r1, #2
 80045a0:	f24d 401a 	movw	r0, #54298	; 0xd41a
 80045a4:	f7fc fe6e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 80045a8:	2101      	movs	r1, #1
 80045aa:	f24d 401b 	movw	r0, #54299	; 0xd41b
 80045ae:	f7fc fe69 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 80045b2:	2102      	movs	r1, #2
 80045b4:	f24d 401c 	movw	r0, #54300	; 0xd41c
 80045b8:	f7fc fe64 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 80045bc:	2134      	movs	r1, #52	; 0x34
 80045be:	f24d 401d 	movw	r0, #54301	; 0xd41d
 80045c2:	f7fc fe5f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 80045c6:	2102      	movs	r1, #2
 80045c8:	f24d 401e 	movw	r0, #54302	; 0xd41e
 80045cc:	f7fc fe5a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 80045d0:	2167      	movs	r1, #103	; 0x67
 80045d2:	f24d 401f 	movw	r0, #54303	; 0xd41f
 80045d6:	f7fc fe55 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 80045da:	2102      	movs	r1, #2
 80045dc:	f24d 4020 	movw	r0, #54304	; 0xd420
 80045e0:	f7fc fe50 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 80045e4:	2184      	movs	r1, #132	; 0x84
 80045e6:	f24d 4021 	movw	r0, #54305	; 0xd421
 80045ea:	f7fc fe4b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 80045ee:	2102      	movs	r1, #2
 80045f0:	f24d 4022 	movw	r0, #54306	; 0xd422
 80045f4:	f7fc fe46 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 80045f8:	21a4      	movs	r1, #164	; 0xa4
 80045fa:	f24d 4023 	movw	r0, #54307	; 0xd423
 80045fe:	f7fc fe41 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8004602:	2102      	movs	r1, #2
 8004604:	f24d 4024 	movw	r0, #54308	; 0xd424
 8004608:	f7fc fe3c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 800460c:	21b7      	movs	r1, #183	; 0xb7
 800460e:	f24d 4025 	movw	r0, #54309	; 0xd425
 8004612:	f7fc fe37 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8004616:	2102      	movs	r1, #2
 8004618:	f24d 4026 	movw	r0, #54310	; 0xd426
 800461c:	f7fc fe32 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8004620:	21cf      	movs	r1, #207	; 0xcf
 8004622:	f24d 4027 	movw	r0, #54311	; 0xd427
 8004626:	f7fc fe2d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 800462a:	2102      	movs	r1, #2
 800462c:	f24d 4028 	movw	r0, #54312	; 0xd428
 8004630:	f7fc fe28 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8004634:	21de      	movs	r1, #222	; 0xde
 8004636:	f24d 4029 	movw	r0, #54313	; 0xd429
 800463a:	f7fc fe23 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 800463e:	2102      	movs	r1, #2
 8004640:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8004644:	f7fc fe1e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8004648:	21f2      	movs	r1, #242	; 0xf2
 800464a:	f24d 402b 	movw	r0, #54315	; 0xd42b
 800464e:	f7fc fe19 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8004652:	2102      	movs	r1, #2
 8004654:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8004658:	f7fc fe14 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 800465c:	21fe      	movs	r1, #254	; 0xfe
 800465e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8004662:	f7fc fe0f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8004666:	2103      	movs	r1, #3
 8004668:	f24d 402e 	movw	r0, #54318	; 0xd42e
 800466c:	f7fc fe0a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8004670:	2110      	movs	r1, #16
 8004672:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8004676:	f7fc fe05 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 800467a:	2103      	movs	r1, #3
 800467c:	f24d 4030 	movw	r0, #54320	; 0xd430
 8004680:	f7fc fe00 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8004684:	2133      	movs	r1, #51	; 0x33
 8004686:	f24d 4031 	movw	r0, #54321	; 0xd431
 800468a:	f7fc fdfb 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 800468e:	2103      	movs	r1, #3
 8004690:	f24d 4032 	movw	r0, #54322	; 0xd432
 8004694:	f7fc fdf6 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8004698:	216d      	movs	r1, #109	; 0x6d
 800469a:	f24d 4033 	movw	r0, #54323	; 0xd433
 800469e:	f7fc fdf1 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 80046a2:	2100      	movs	r1, #0
 80046a4:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 80046a8:	f7fc fdec 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 80046ac:	2133      	movs	r1, #51	; 0x33
 80046ae:	f24d 5001 	movw	r0, #54529	; 0xd501
 80046b2:	f7fc fde7 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 80046b6:	2100      	movs	r1, #0
 80046b8:	f24d 5002 	movw	r0, #54530	; 0xd502
 80046bc:	f7fc fde2 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 80046c0:	2134      	movs	r1, #52	; 0x34
 80046c2:	f24d 5003 	movw	r0, #54531	; 0xd503
 80046c6:	f7fc fddd 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 80046ca:	2100      	movs	r1, #0
 80046cc:	f24d 5004 	movw	r0, #54532	; 0xd504
 80046d0:	f7fc fdd8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 80046d4:	213a      	movs	r1, #58	; 0x3a
 80046d6:	f24d 5005 	movw	r0, #54533	; 0xd505
 80046da:	f7fc fdd3 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 80046de:	2100      	movs	r1, #0
 80046e0:	f24d 5006 	movw	r0, #54534	; 0xd506
 80046e4:	f7fc fdce 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 80046e8:	214a      	movs	r1, #74	; 0x4a
 80046ea:	f24d 5007 	movw	r0, #54535	; 0xd507
 80046ee:	f7fc fdc9 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 80046f2:	2100      	movs	r1, #0
 80046f4:	f24d 5008 	movw	r0, #54536	; 0xd508
 80046f8:	f7fc fdc4 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 80046fc:	215c      	movs	r1, #92	; 0x5c
 80046fe:	f24d 5009 	movw	r0, #54537	; 0xd509
 8004702:	f7fc fdbf 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8004706:	2100      	movs	r1, #0
 8004708:	f24d 500a 	movw	r0, #54538	; 0xd50a
 800470c:	f7fc fdba 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8004710:	2181      	movs	r1, #129	; 0x81
 8004712:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8004716:	f7fc fdb5 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 800471a:	2100      	movs	r1, #0
 800471c:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8004720:	f7fc fdb0 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8004724:	21a6      	movs	r1, #166	; 0xa6
 8004726:	f24d 500d 	movw	r0, #54541	; 0xd50d
 800472a:	f7fc fdab 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 800472e:	2100      	movs	r1, #0
 8004730:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8004734:	f7fc fda6 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8004738:	21e5      	movs	r1, #229	; 0xe5
 800473a:	f24d 500f 	movw	r0, #54543	; 0xd50f
 800473e:	f7fc fda1 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8004742:	2101      	movs	r1, #1
 8004744:	f24d 5010 	movw	r0, #54544	; 0xd510
 8004748:	f7fc fd9c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 800474c:	2113      	movs	r1, #19
 800474e:	f24d 5011 	movw	r0, #54545	; 0xd511
 8004752:	f7fc fd97 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8004756:	2101      	movs	r1, #1
 8004758:	f24d 5012 	movw	r0, #54546	; 0xd512
 800475c:	f7fc fd92 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8004760:	2154      	movs	r1, #84	; 0x54
 8004762:	f24d 5013 	movw	r0, #54547	; 0xd513
 8004766:	f7fc fd8d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 800476a:	2101      	movs	r1, #1
 800476c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8004770:	f7fc fd88 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8004774:	2182      	movs	r1, #130	; 0x82
 8004776:	f24d 5015 	movw	r0, #54549	; 0xd515
 800477a:	f7fc fd83 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 800477e:	2101      	movs	r1, #1
 8004780:	f24d 5016 	movw	r0, #54550	; 0xd516
 8004784:	f7fc fd7e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8004788:	21ca      	movs	r1, #202	; 0xca
 800478a:	f24d 5017 	movw	r0, #54551	; 0xd517
 800478e:	f7fc fd79 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8004792:	2102      	movs	r1, #2
 8004794:	f24d 5018 	movw	r0, #54552	; 0xd518
 8004798:	f7fc fd74 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 800479c:	2100      	movs	r1, #0
 800479e:	f24d 5019 	movw	r0, #54553	; 0xd519
 80047a2:	f7fc fd6f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 80047a6:	2102      	movs	r1, #2
 80047a8:	f24d 501a 	movw	r0, #54554	; 0xd51a
 80047ac:	f7fc fd6a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 80047b0:	2101      	movs	r1, #1
 80047b2:	f24d 501b 	movw	r0, #54555	; 0xd51b
 80047b6:	f7fc fd65 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 80047ba:	2102      	movs	r1, #2
 80047bc:	f24d 501c 	movw	r0, #54556	; 0xd51c
 80047c0:	f7fc fd60 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 80047c4:	2134      	movs	r1, #52	; 0x34
 80047c6:	f24d 501d 	movw	r0, #54557	; 0xd51d
 80047ca:	f7fc fd5b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 80047ce:	2102      	movs	r1, #2
 80047d0:	f24d 501e 	movw	r0, #54558	; 0xd51e
 80047d4:	f7fc fd56 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 80047d8:	2167      	movs	r1, #103	; 0x67
 80047da:	f24d 501f 	movw	r0, #54559	; 0xd51f
 80047de:	f7fc fd51 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 80047e2:	2102      	movs	r1, #2
 80047e4:	f24d 5020 	movw	r0, #54560	; 0xd520
 80047e8:	f7fc fd4c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 80047ec:	2184      	movs	r1, #132	; 0x84
 80047ee:	f24d 5021 	movw	r0, #54561	; 0xd521
 80047f2:	f7fc fd47 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 80047f6:	2102      	movs	r1, #2
 80047f8:	f24d 5022 	movw	r0, #54562	; 0xd522
 80047fc:	f7fc fd42 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8004800:	21a4      	movs	r1, #164	; 0xa4
 8004802:	f24d 5023 	movw	r0, #54563	; 0xd523
 8004806:	f7fc fd3d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 800480a:	2102      	movs	r1, #2
 800480c:	f24d 5024 	movw	r0, #54564	; 0xd524
 8004810:	f7fc fd38 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8004814:	21b7      	movs	r1, #183	; 0xb7
 8004816:	f24d 5025 	movw	r0, #54565	; 0xd525
 800481a:	f7fc fd33 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 800481e:	2102      	movs	r1, #2
 8004820:	f24d 5026 	movw	r0, #54566	; 0xd526
 8004824:	f7fc fd2e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8004828:	21cf      	movs	r1, #207	; 0xcf
 800482a:	f24d 5027 	movw	r0, #54567	; 0xd527
 800482e:	f7fc fd29 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8004832:	2102      	movs	r1, #2
 8004834:	f24d 5028 	movw	r0, #54568	; 0xd528
 8004838:	f7fc fd24 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 800483c:	21de      	movs	r1, #222	; 0xde
 800483e:	f24d 5029 	movw	r0, #54569	; 0xd529
 8004842:	f7fc fd1f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8004846:	2102      	movs	r1, #2
 8004848:	f24d 502a 	movw	r0, #54570	; 0xd52a
 800484c:	f7fc fd1a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8004850:	21f2      	movs	r1, #242	; 0xf2
 8004852:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8004856:	f7fc fd15 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 800485a:	2102      	movs	r1, #2
 800485c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8004860:	f7fc fd10 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8004864:	21fe      	movs	r1, #254	; 0xfe
 8004866:	f24d 502d 	movw	r0, #54573	; 0xd52d
 800486a:	f7fc fd0b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 800486e:	2103      	movs	r1, #3
 8004870:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8004874:	f7fc fd06 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8004878:	2110      	movs	r1, #16
 800487a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 800487e:	f7fc fd01 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8004882:	2103      	movs	r1, #3
 8004884:	f24d 5030 	movw	r0, #54576	; 0xd530
 8004888:	f7fc fcfc 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 800488c:	2133      	movs	r1, #51	; 0x33
 800488e:	f24d 5031 	movw	r0, #54577	; 0xd531
 8004892:	f7fc fcf7 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8004896:	2103      	movs	r1, #3
 8004898:	f24d 5032 	movw	r0, #54578	; 0xd532
 800489c:	f7fc fcf2 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 80048a0:	216d      	movs	r1, #109	; 0x6d
 80048a2:	f24d 5033 	movw	r0, #54579	; 0xd533
 80048a6:	f7fc fced 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 80048aa:	2100      	movs	r1, #0
 80048ac:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 80048b0:	f7fc fce8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 80048b4:	2133      	movs	r1, #51	; 0x33
 80048b6:	f24d 6001 	movw	r0, #54785	; 0xd601
 80048ba:	f7fc fce3 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 80048be:	2100      	movs	r1, #0
 80048c0:	f24d 6002 	movw	r0, #54786	; 0xd602
 80048c4:	f7fc fcde 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 80048c8:	2134      	movs	r1, #52	; 0x34
 80048ca:	f24d 6003 	movw	r0, #54787	; 0xd603
 80048ce:	f7fc fcd9 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 80048d2:	2100      	movs	r1, #0
 80048d4:	f24d 6004 	movw	r0, #54788	; 0xd604
 80048d8:	f7fc fcd4 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 80048dc:	213a      	movs	r1, #58	; 0x3a
 80048de:	f24d 6005 	movw	r0, #54789	; 0xd605
 80048e2:	f7fc fccf 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 80048e6:	2100      	movs	r1, #0
 80048e8:	f24d 6006 	movw	r0, #54790	; 0xd606
 80048ec:	f7fc fcca 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 80048f0:	214a      	movs	r1, #74	; 0x4a
 80048f2:	f24d 6007 	movw	r0, #54791	; 0xd607
 80048f6:	f7fc fcc5 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 80048fa:	2100      	movs	r1, #0
 80048fc:	f24d 6008 	movw	r0, #54792	; 0xd608
 8004900:	f7fc fcc0 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 8004904:	215c      	movs	r1, #92	; 0x5c
 8004906:	f24d 6009 	movw	r0, #54793	; 0xd609
 800490a:	f7fc fcbb 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 800490e:	2100      	movs	r1, #0
 8004910:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8004914:	f7fc fcb6 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8004918:	2181      	movs	r1, #129	; 0x81
 800491a:	f24d 600b 	movw	r0, #54795	; 0xd60b
 800491e:	f7fc fcb1 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 8004922:	2100      	movs	r1, #0
 8004924:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8004928:	f7fc fcac 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 800492c:	21a6      	movs	r1, #166	; 0xa6
 800492e:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8004932:	f7fc fca7 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 8004936:	2100      	movs	r1, #0
 8004938:	f24d 600e 	movw	r0, #54798	; 0xd60e
 800493c:	f7fc fca2 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8004940:	21e5      	movs	r1, #229	; 0xe5
 8004942:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8004946:	f7fc fc9d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 800494a:	2101      	movs	r1, #1
 800494c:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004950:	f7fc fc98 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8004954:	2113      	movs	r1, #19
 8004956:	f24d 6011 	movw	r0, #54801	; 0xd611
 800495a:	f7fc fc93 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 800495e:	2101      	movs	r1, #1
 8004960:	f24d 6012 	movw	r0, #54802	; 0xd612
 8004964:	f7fc fc8e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8004968:	2154      	movs	r1, #84	; 0x54
 800496a:	f24d 6013 	movw	r0, #54803	; 0xd613
 800496e:	f7fc fc89 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8004972:	2101      	movs	r1, #1
 8004974:	f24d 6014 	movw	r0, #54804	; 0xd614
 8004978:	f7fc fc84 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 800497c:	2182      	movs	r1, #130	; 0x82
 800497e:	f24d 6015 	movw	r0, #54805	; 0xd615
 8004982:	f7fc fc7f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8004986:	2101      	movs	r1, #1
 8004988:	f24d 6016 	movw	r0, #54806	; 0xd616
 800498c:	f7fc fc7a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8004990:	21ca      	movs	r1, #202	; 0xca
 8004992:	f24d 6017 	movw	r0, #54807	; 0xd617
 8004996:	f7fc fc75 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 800499a:	2102      	movs	r1, #2
 800499c:	f24d 6018 	movw	r0, #54808	; 0xd618
 80049a0:	f7fc fc70 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 80049a4:	2100      	movs	r1, #0
 80049a6:	f24d 6019 	movw	r0, #54809	; 0xd619
 80049aa:	f7fc fc6b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 80049ae:	2102      	movs	r1, #2
 80049b0:	f24d 601a 	movw	r0, #54810	; 0xd61a
 80049b4:	f7fc fc66 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 80049b8:	2101      	movs	r1, #1
 80049ba:	f24d 601b 	movw	r0, #54811	; 0xd61b
 80049be:	f7fc fc61 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 80049c2:	2102      	movs	r1, #2
 80049c4:	f24d 601c 	movw	r0, #54812	; 0xd61c
 80049c8:	f7fc fc5c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 80049cc:	2134      	movs	r1, #52	; 0x34
 80049ce:	f24d 601d 	movw	r0, #54813	; 0xd61d
 80049d2:	f7fc fc57 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 80049d6:	2102      	movs	r1, #2
 80049d8:	f24d 601e 	movw	r0, #54814	; 0xd61e
 80049dc:	f7fc fc52 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 80049e0:	2167      	movs	r1, #103	; 0x67
 80049e2:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80049e6:	f7fc fc4d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 80049ea:	2102      	movs	r1, #2
 80049ec:	f24d 6020 	movw	r0, #54816	; 0xd620
 80049f0:	f7fc fc48 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 80049f4:	2184      	movs	r1, #132	; 0x84
 80049f6:	f24d 6021 	movw	r0, #54817	; 0xd621
 80049fa:	f7fc fc43 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 80049fe:	2102      	movs	r1, #2
 8004a00:	f24d 6022 	movw	r0, #54818	; 0xd622
 8004a04:	f7fc fc3e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8004a08:	21a4      	movs	r1, #164	; 0xa4
 8004a0a:	f24d 6023 	movw	r0, #54819	; 0xd623
 8004a0e:	f7fc fc39 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 8004a12:	2102      	movs	r1, #2
 8004a14:	f24d 6024 	movw	r0, #54820	; 0xd624
 8004a18:	f7fc fc34 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 8004a1c:	21b7      	movs	r1, #183	; 0xb7
 8004a1e:	f24d 6025 	movw	r0, #54821	; 0xd625
 8004a22:	f7fc fc2f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 8004a26:	2102      	movs	r1, #2
 8004a28:	f24d 6026 	movw	r0, #54822	; 0xd626
 8004a2c:	f7fc fc2a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8004a30:	21cf      	movs	r1, #207	; 0xcf
 8004a32:	f24d 6027 	movw	r0, #54823	; 0xd627
 8004a36:	f7fc fc25 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 8004a3a:	2102      	movs	r1, #2
 8004a3c:	f24d 6028 	movw	r0, #54824	; 0xd628
 8004a40:	f7fc fc20 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 8004a44:	21de      	movs	r1, #222	; 0xde
 8004a46:	f24d 6029 	movw	r0, #54825	; 0xd629
 8004a4a:	f7fc fc1b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 8004a4e:	2102      	movs	r1, #2
 8004a50:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8004a54:	f7fc fc16 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8004a58:	21f2      	movs	r1, #242	; 0xf2
 8004a5a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8004a5e:	f7fc fc11 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8004a62:	2102      	movs	r1, #2
 8004a64:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004a68:	f7fc fc0c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8004a6c:	21fe      	movs	r1, #254	; 0xfe
 8004a6e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8004a72:	f7fc fc07 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8004a76:	2103      	movs	r1, #3
 8004a78:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8004a7c:	f7fc fc02 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8004a80:	2110      	movs	r1, #16
 8004a82:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8004a86:	f7fc fbfd 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8004a8a:	2103      	movs	r1, #3
 8004a8c:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004a90:	f7fc fbf8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8004a94:	2133      	movs	r1, #51	; 0x33
 8004a96:	f24d 6031 	movw	r0, #54833	; 0xd631
 8004a9a:	f7fc fbf3 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8004a9e:	2103      	movs	r1, #3
 8004aa0:	f24d 6032 	movw	r0, #54834	; 0xd632
 8004aa4:	f7fc fbee 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8004aa8:	216d      	movs	r1, #109	; 0x6d
 8004aaa:	f24d 6033 	movw	r0, #54835	; 0xd633
 8004aae:	f7fc fbe9 	bl	8001284 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8004ab2:	2155      	movs	r1, #85	; 0x55
 8004ab4:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004ab8:	f7fc fbe4 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8004abc:	21aa      	movs	r1, #170	; 0xaa
 8004abe:	f24f 0001 	movw	r0, #61441	; 0xf001
 8004ac2:	f7fc fbdf 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8004ac6:	2152      	movs	r1, #82	; 0x52
 8004ac8:	f24f 0002 	movw	r0, #61442	; 0xf002
 8004acc:	f7fc fbda 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8004ad0:	2108      	movs	r1, #8
 8004ad2:	f24f 0003 	movw	r0, #61443	; 0xf003
 8004ad6:	f7fc fbd5 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 8004ada:	2100      	movs	r1, #0
 8004adc:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004ae0:	f7fc fbd0 	bl	8001284 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8004ae4:	21cc      	movs	r1, #204	; 0xcc
 8004ae6:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8004aea:	f7fc fbcb 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8004aee:	2100      	movs	r1, #0
 8004af0:	f24b 1001 	movw	r0, #45313	; 0xb101
 8004af4:	f7fc fbc6 	bl	8001284 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8004af8:	2105      	movs	r1, #5
 8004afa:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8004afe:	f7fc fbc1 	bl	8001284 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 8004b02:	2170      	movs	r1, #112	; 0x70
 8004b04:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8004b08:	f7fc fbbc 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 8004b0c:	2170      	movs	r1, #112	; 0x70
 8004b0e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8004b12:	f7fc fbb7 	bl	8001284 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 8004b16:	2101      	movs	r1, #1
 8004b18:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8004b1c:	f7fc fbb2 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8004b20:	2103      	movs	r1, #3
 8004b22:	f64b 0001 	movw	r0, #47105	; 0xb801
 8004b26:	f7fc fbad 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 8004b2a:	2103      	movs	r1, #3
 8004b2c:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004b30:	f7fc fba8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 8004b34:	2103      	movs	r1, #3
 8004b36:	f64b 0003 	movw	r0, #47107	; 0xb803
 8004b3a:	f7fc fba3 	bl	8001284 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 8004b3e:	2102      	movs	r1, #2
 8004b40:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8004b44:	f7fc fb9e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8004b48:	2100      	movs	r1, #0
 8004b4a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8004b4e:	f7fc fb99 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8004b52:	2100      	movs	r1, #0
 8004b54:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004b58:	f7fc fb94 	bl	8001284 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 8004b5c:	21d0      	movs	r1, #208	; 0xd0
 8004b5e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8004b62:	f7fc fb8f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8004b66:	2102      	movs	r1, #2
 8004b68:	f64c 1001 	movw	r0, #51457	; 0xc901
 8004b6c:	f7fc fb8a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8004b70:	2150      	movs	r1, #80	; 0x50
 8004b72:	f64c 1002 	movw	r0, #51458	; 0xc902
 8004b76:	f7fc fb85 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8004b7a:	2150      	movs	r1, #80	; 0x50
 8004b7c:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004b80:	f7fc fb80 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8004b84:	2150      	movs	r1, #80	; 0x50
 8004b86:	f64c 1004 	movw	r0, #51460	; 0xc904
 8004b8a:	f7fc fb7b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8004b8e:	2100      	movs	r1, #0
 8004b90:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8004b94:	f7fc fb76 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8004b98:	2155      	movs	r1, #85	; 0x55
 8004b9a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8004b9e:	f7fc fb71 	bl	8001284 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8004ba2:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8004ba6:	f7fc fae1 	bl	800116c <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8004baa:	2001      	movs	r0, #1
 8004bac:	f003 f982 	bl	8007eb4 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8004bb0:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8004bb4:	f7fc fada 	bl	800116c <LCD_WR_REG>
 8004bb8:	f001 bd18 	b.w	80065ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8004bbc:	4bec      	ldr	r3, [pc, #944]	; (8004f70 <LCD_Init+0x27b8>)
 8004bbe:	889b      	ldrh	r3, [r3, #4]
 8004bc0:	f249 3225 	movw	r2, #37669	; 0x9325
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	f040 80d7 	bne.w	8004d78 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 8004bca:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8004bce:	20e5      	movs	r0, #229	; 0xe5
 8004bd0:	f7fc fb58 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8004bd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bd8:	2001      	movs	r0, #1
 8004bda:	f7fc fb53 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004bde:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004be2:	2002      	movs	r0, #2
 8004be4:	f7fc fb4e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004be8:	f241 0130 	movw	r1, #4144	; 0x1030
 8004bec:	2003      	movs	r0, #3
 8004bee:	f7fc fb49 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	2004      	movs	r0, #4
 8004bf6:	f7fc fb45 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004bfa:	f240 2102 	movw	r1, #514	; 0x202
 8004bfe:	2008      	movs	r0, #8
 8004c00:	f7fc fb40 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8004c04:	2100      	movs	r1, #0
 8004c06:	2009      	movs	r0, #9
 8004c08:	f7fc fb3c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	200a      	movs	r0, #10
 8004c10:	f7fc fb38 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004c14:	2100      	movs	r1, #0
 8004c16:	200c      	movs	r0, #12
 8004c18:	f7fc fb34 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	200d      	movs	r0, #13
 8004c20:	f7fc fb30 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004c24:	2100      	movs	r1, #0
 8004c26:	200f      	movs	r0, #15
 8004c28:	f7fc fb2c 	bl	8001284 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	2010      	movs	r0, #16
 8004c30:	f7fc fb28 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004c34:	2107      	movs	r1, #7
 8004c36:	2011      	movs	r0, #17
 8004c38:	f7fc fb24 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	2012      	movs	r0, #18
 8004c40:	f7fc fb20 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004c44:	2100      	movs	r1, #0
 8004c46:	2013      	movs	r0, #19
 8004c48:	f7fc fb1c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	2007      	movs	r0, #7
 8004c50:	f7fc fb18 	bl	8001284 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8004c54:	f241 6190 	movw	r1, #5776	; 0x1690
 8004c58:	2010      	movs	r0, #16
 8004c5a:	f7fc fb13 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8004c5e:	f240 2127 	movw	r1, #551	; 0x227
 8004c62:	2011      	movs	r0, #17
 8004c64:	f7fc fb0e 	bl	8001284 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004c68:	219d      	movs	r1, #157	; 0x9d
 8004c6a:	2012      	movs	r0, #18
 8004c6c:	f7fc fb0a 	bl	8001284 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004c70:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8004c74:	2013      	movs	r0, #19
 8004c76:	f7fc fb05 	bl	8001284 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 8004c7a:	2125      	movs	r1, #37	; 0x25
 8004c7c:	2029      	movs	r0, #41	; 0x29
 8004c7e:	f7fc fb01 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8004c82:	210d      	movs	r1, #13
 8004c84:	202b      	movs	r0, #43	; 0x2b
 8004c86:	f7fc fafd 	bl	8001284 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8004c8a:	2107      	movs	r1, #7
 8004c8c:	2030      	movs	r0, #48	; 0x30
 8004c8e:	f7fc faf9 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8004c92:	f240 3103 	movw	r1, #771	; 0x303
 8004c96:	2031      	movs	r0, #49	; 0x31
 8004c98:	f7fc faf4 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8004c9c:	2103      	movs	r1, #3
 8004c9e:	2032      	movs	r0, #50	; 0x32
 8004ca0:	f7fc faf0 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8004ca4:	f240 2106 	movw	r1, #518	; 0x206
 8004ca8:	2035      	movs	r0, #53	; 0x35
 8004caa:	f7fc faeb 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8004cae:	2108      	movs	r1, #8
 8004cb0:	2036      	movs	r0, #54	; 0x36
 8004cb2:	f7fc fae7 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8004cb6:	f240 4106 	movw	r1, #1030	; 0x406
 8004cba:	2037      	movs	r0, #55	; 0x37
 8004cbc:	f7fc fae2 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004cc0:	f44f 7141 	mov.w	r1, #772	; 0x304
 8004cc4:	2038      	movs	r0, #56	; 0x38
 8004cc6:	f7fc fadd 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 8004cca:	2107      	movs	r1, #7
 8004ccc:	2039      	movs	r0, #57	; 0x39
 8004cce:	f7fc fad9 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8004cd2:	f240 6102 	movw	r1, #1538	; 0x602
 8004cd6:	203c      	movs	r0, #60	; 0x3c
 8004cd8:	f7fc fad4 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 8004cdc:	2108      	movs	r1, #8
 8004cde:	203d      	movs	r0, #61	; 0x3d
 8004ce0:	f7fc fad0 	bl	8001284 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	2050      	movs	r0, #80	; 0x50
 8004ce8:	f7fc facc 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004cec:	21ef      	movs	r1, #239	; 0xef
 8004cee:	2051      	movs	r0, #81	; 0x51
 8004cf0:	f7fc fac8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	2052      	movs	r0, #82	; 0x52
 8004cf8:	f7fc fac4 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004cfc:	f240 113f 	movw	r1, #319	; 0x13f
 8004d00:	2053      	movs	r0, #83	; 0x53
 8004d02:	f7fc fabf 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 8004d06:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004d0a:	2060      	movs	r0, #96	; 0x60
 8004d0c:	f7fc faba 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004d10:	2101      	movs	r1, #1
 8004d12:	2061      	movs	r0, #97	; 0x61
 8004d14:	f7fc fab6 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004d18:	2100      	movs	r1, #0
 8004d1a:	206a      	movs	r0, #106	; 0x6a
 8004d1c:	f7fc fab2 	bl	8001284 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8004d20:	2100      	movs	r1, #0
 8004d22:	2080      	movs	r0, #128	; 0x80
 8004d24:	f7fc faae 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004d28:	2100      	movs	r1, #0
 8004d2a:	2081      	movs	r0, #129	; 0x81
 8004d2c:	f7fc faaa 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004d30:	2100      	movs	r1, #0
 8004d32:	2082      	movs	r0, #130	; 0x82
 8004d34:	f7fc faa6 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004d38:	2100      	movs	r1, #0
 8004d3a:	2083      	movs	r0, #131	; 0x83
 8004d3c:	f7fc faa2 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004d40:	2100      	movs	r1, #0
 8004d42:	2084      	movs	r0, #132	; 0x84
 8004d44:	f7fc fa9e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004d48:	2100      	movs	r1, #0
 8004d4a:	2085      	movs	r0, #133	; 0x85
 8004d4c:	f7fc fa9a 	bl	8001284 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8004d50:	2110      	movs	r1, #16
 8004d52:	2090      	movs	r0, #144	; 0x90
 8004d54:	f7fc fa96 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004d58:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d5c:	2092      	movs	r0, #146	; 0x92
 8004d5e:	f7fc fa91 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8004d62:	f240 1133 	movw	r1, #307	; 0x133
 8004d66:	2007      	movs	r0, #7
 8004d68:	f7fc fa8c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 8004d6c:	2122      	movs	r1, #34	; 0x22
 8004d6e:	2000      	movs	r0, #0
 8004d70:	f7fc fa88 	bl	8001284 <LCD_WriteReg>
 8004d74:	f001 bc3a 	b.w	80065ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004d78:	4b7d      	ldr	r3, [pc, #500]	; (8004f70 <LCD_Init+0x27b8>)
 8004d7a:	889b      	ldrh	r3, [r3, #4]
 8004d7c:	f249 3228 	movw	r2, #37672	; 0x9328
 8004d80:	4293      	cmp	r3, r2
 8004d82:	f040 80f7 	bne.w	8004f74 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8004d86:	f241 018f 	movw	r1, #4239	; 0x108f
 8004d8a:	20ec      	movs	r0, #236	; 0xec
 8004d8c:	f7fc fa7a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004d90:	f241 2134 	movw	r1, #4660	; 0x1234
 8004d94:	20ef      	movs	r0, #239	; 0xef
 8004d96:	f7fc fa75 	bl	8001284 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 8004d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d9e:	2001      	movs	r0, #1
 8004da0:	f7fc fa70 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 8004da4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004da8:	2002      	movs	r0, #2
 8004daa:	f7fc fa6b 	bl	8001284 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 8004dae:	f241 0130 	movw	r1, #4144	; 0x1030
 8004db2:	2003      	movs	r0, #3
 8004db4:	f7fc fa66 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004db8:	2100      	movs	r1, #0
 8004dba:	2004      	movs	r0, #4
 8004dbc:	f7fc fa62 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004dc0:	f240 2102 	movw	r1, #514	; 0x202
 8004dc4:	2008      	movs	r0, #8
 8004dc6:	f7fc fa5d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8004dca:	2100      	movs	r1, #0
 8004dcc:	2009      	movs	r0, #9
 8004dce:	f7fc fa59 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	200a      	movs	r0, #10
 8004dd6:	f7fc fa55 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 8004dda:	2101      	movs	r1, #1
 8004ddc:	200c      	movs	r0, #12
 8004dde:	f7fc fa51 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 8004de2:	2100      	movs	r1, #0
 8004de4:	200d      	movs	r0, #13
 8004de6:	f7fc fa4d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 8004dea:	2100      	movs	r1, #0
 8004dec:	200f      	movs	r0, #15
 8004dee:	f7fc fa49 	bl	8001284 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 8004df2:	2100      	movs	r1, #0
 8004df4:	2010      	movs	r0, #16
 8004df6:	f7fc fa45 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004dfa:	2107      	movs	r1, #7
 8004dfc:	2011      	movs	r0, #17
 8004dfe:	f7fc fa41 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004e02:	2100      	movs	r1, #0
 8004e04:	2012      	movs	r0, #18
 8004e06:	f7fc fa3d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	2013      	movs	r0, #19
 8004e0e:	f7fc fa39 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 8004e12:	2101      	movs	r1, #1
 8004e14:	2007      	movs	r0, #7
 8004e16:	f7fc fa35 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(50);
 8004e1a:	2032      	movs	r0, #50	; 0x32
 8004e1c:	f003 f84a 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8004e20:	f241 4190 	movw	r1, #5264	; 0x1490
 8004e24:	2010      	movs	r0, #16
 8004e26:	f7fc fa2d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8004e2a:	f240 2127 	movw	r1, #551	; 0x227
 8004e2e:	2011      	movs	r0, #17
 8004e30:	f7fc fa28 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(50);
 8004e34:	2032      	movs	r0, #50	; 0x32
 8004e36:	f003 f83d 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 8004e3a:	218a      	movs	r1, #138	; 0x8a
 8004e3c:	2012      	movs	r0, #18
 8004e3e:	f7fc fa21 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(50);
 8004e42:	2032      	movs	r0, #50	; 0x32
 8004e44:	f003 f836 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8004e48:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8004e4c:	2013      	movs	r0, #19
 8004e4e:	f7fc fa19 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8004e52:	2106      	movs	r1, #6
 8004e54:	2029      	movs	r0, #41	; 0x29
 8004e56:	f7fc fa15 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 8004e5a:	210d      	movs	r1, #13
 8004e5c:	202b      	movs	r0, #43	; 0x2b
 8004e5e:	f7fc fa11 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(50);
 8004e62:	2032      	movs	r0, #50	; 0x32
 8004e64:	f003 f826 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8004e68:	2100      	movs	r1, #0
 8004e6a:	2020      	movs	r0, #32
 8004e6c:	f7fc fa0a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004e70:	2100      	movs	r1, #0
 8004e72:	2021      	movs	r0, #33	; 0x21
 8004e74:	f7fc fa06 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(50);
 8004e78:	2032      	movs	r0, #50	; 0x32
 8004e7a:	f003 f81b 	bl	8007eb4 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 8004e7e:	2100      	movs	r1, #0
 8004e80:	2030      	movs	r0, #48	; 0x30
 8004e82:	f7fc f9ff 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8004e86:	f240 6104 	movw	r1, #1540	; 0x604
 8004e8a:	2031      	movs	r0, #49	; 0x31
 8004e8c:	f7fc f9fa 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004e90:	f240 3105 	movw	r1, #773	; 0x305
 8004e94:	2032      	movs	r0, #50	; 0x32
 8004e96:	f7fc f9f5 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	2035      	movs	r0, #53	; 0x35
 8004e9e:	f7fc f9f1 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 8004ea2:	f640 4109 	movw	r1, #3081	; 0xc09
 8004ea6:	2036      	movs	r0, #54	; 0x36
 8004ea8:	f7fc f9ec 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 8004eac:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004eb0:	2037      	movs	r0, #55	; 0x37
 8004eb2:	f7fc f9e7 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 8004eb6:	f240 3101 	movw	r1, #769	; 0x301
 8004eba:	2038      	movs	r0, #56	; 0x38
 8004ebc:	f7fc f9e2 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004ec0:	f240 7107 	movw	r1, #1799	; 0x707
 8004ec4:	2039      	movs	r0, #57	; 0x39
 8004ec6:	f7fc f9dd 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 8004eca:	2100      	movs	r1, #0
 8004ecc:	203c      	movs	r0, #60	; 0x3c
 8004ece:	f7fc f9d9 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 8004ed2:	f640 210a 	movw	r1, #2570	; 0xa0a
 8004ed6:	203d      	movs	r0, #61	; 0x3d
 8004ed8:	f7fc f9d4 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(50);
 8004edc:	2032      	movs	r0, #50	; 0x32
 8004ede:	f002 ffe9 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	2050      	movs	r0, #80	; 0x50
 8004ee6:	f7fc f9cd 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 8004eea:	21ef      	movs	r1, #239	; 0xef
 8004eec:	2051      	movs	r0, #81	; 0x51
 8004eee:	f7fc f9c9 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	2052      	movs	r0, #82	; 0x52
 8004ef6:	f7fc f9c5 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 8004efa:	f240 113f 	movw	r1, #319	; 0x13f
 8004efe:	2053      	movs	r0, #83	; 0x53
 8004f00:	f7fc f9c0 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 8004f04:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004f08:	2060      	movs	r0, #96	; 0x60
 8004f0a:	f7fc f9bb 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004f0e:	2101      	movs	r1, #1
 8004f10:	2061      	movs	r0, #97	; 0x61
 8004f12:	f7fc f9b7 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004f16:	2100      	movs	r1, #0
 8004f18:	206a      	movs	r0, #106	; 0x6a
 8004f1a:	f7fc f9b3 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004f1e:	2100      	movs	r1, #0
 8004f20:	2080      	movs	r0, #128	; 0x80
 8004f22:	f7fc f9af 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004f26:	2100      	movs	r1, #0
 8004f28:	2081      	movs	r0, #129	; 0x81
 8004f2a:	f7fc f9ab 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004f2e:	2100      	movs	r1, #0
 8004f30:	2082      	movs	r0, #130	; 0x82
 8004f32:	f7fc f9a7 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004f36:	2100      	movs	r1, #0
 8004f38:	2083      	movs	r0, #131	; 0x83
 8004f3a:	f7fc f9a3 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004f3e:	2100      	movs	r1, #0
 8004f40:	2084      	movs	r0, #132	; 0x84
 8004f42:	f7fc f99f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004f46:	2100      	movs	r1, #0
 8004f48:	2085      	movs	r0, #133	; 0x85
 8004f4a:	f7fc f99b 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 8004f4e:	2110      	movs	r1, #16
 8004f50:	2090      	movs	r0, #144	; 0x90
 8004f52:	f7fc f997 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004f56:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f5a:	2092      	movs	r0, #146	; 0x92
 8004f5c:	f7fc f992 	bl	8001284 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004f60:	f240 1133 	movw	r1, #307	; 0x133
 8004f64:	2007      	movs	r0, #7
 8004f66:	f7fc f98d 	bl	8001284 <LCD_WriteReg>
 8004f6a:	f001 bb3f 	b.w	80065ec <LCD_Init+0x3e34>
 8004f6e:	bf00      	nop
 8004f70:	200004b0 	.word	0x200004b0
	} else if (lcddev.id == 0x9320) //测试OK.
 8004f74:	4bce      	ldr	r3, [pc, #824]	; (80052b0 <LCD_Init+0x2af8>)
 8004f76:	889b      	ldrh	r3, [r3, #4]
 8004f78:	f249 3220 	movw	r2, #37664	; 0x9320
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	f040 80ad 	bne.w	80050dc <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8004f82:	2100      	movs	r1, #0
 8004f84:	2000      	movs	r0, #0
 8004f86:	f7fc f97d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 8004f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f8e:	2001      	movs	r0, #1
 8004f90:	f7fc f978 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 8004f94:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004f98:	2002      	movs	r0, #2
 8004f9a:	f7fc f973 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 8004f9e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004fa2:	2003      	movs	r0, #3
 8004fa4:	f7fc f96e 	bl	8001284 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004fa8:	2100      	movs	r1, #0
 8004faa:	2004      	movs	r0, #4
 8004fac:	f7fc f96a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8004fb0:	f240 2102 	movw	r1, #514	; 0x202
 8004fb4:	2008      	movs	r0, #8
 8004fb6:	f7fc f965 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 8004fba:	2100      	movs	r1, #0
 8004fbc:	2009      	movs	r0, #9
 8004fbe:	f7fc f961 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	200a      	movs	r0, #10
 8004fc6:	f7fc f95d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 8004fca:	2101      	movs	r1, #1
 8004fcc:	200c      	movs	r0, #12
 8004fce:	f7fc f959 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	200d      	movs	r0, #13
 8004fd6:	f7fc f955 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 8004fda:	2100      	movs	r1, #0
 8004fdc:	200f      	movs	r0, #15
 8004fde:	f7fc f951 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(50);
 8004fe2:	2032      	movs	r0, #50	; 0x32
 8004fe4:	f002 ff66 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8004fe8:	f240 1101 	movw	r1, #257	; 0x101
 8004fec:	2007      	movs	r0, #7
 8004fee:	f7fc f949 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(50);
 8004ff2:	2032      	movs	r0, #50	; 0x32
 8004ff4:	f002 ff5e 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8004ff8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8004ffc:	2010      	movs	r0, #16
 8004ffe:	f7fc f941 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 8005002:	2107      	movs	r1, #7
 8005004:	2011      	movs	r0, #17
 8005006:	f7fc f93d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 800500a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800500e:	2012      	movs	r0, #18
 8005010:	f7fc f938 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 8005014:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8005018:	2013      	movs	r0, #19
 800501a:	f7fc f933 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 800501e:	2100      	movs	r1, #0
 8005020:	2029      	movs	r0, #41	; 0x29
 8005022:	f7fc f92f 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 8005026:	f244 0110 	movw	r1, #16400	; 0x4010
 800502a:	202b      	movs	r0, #43	; 0x2b
 800502c:	f7fc f92a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8005030:	2100      	movs	r1, #0
 8005032:	2050      	movs	r0, #80	; 0x50
 8005034:	f7fc f926 	bl	8001284 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8005038:	21ef      	movs	r1, #239	; 0xef
 800503a:	2051      	movs	r0, #81	; 0x51
 800503c:	f7fc f922 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8005040:	2100      	movs	r1, #0
 8005042:	2052      	movs	r0, #82	; 0x52
 8005044:	f7fc f91e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8005048:	f240 113f 	movw	r1, #319	; 0x13f
 800504c:	2053      	movs	r0, #83	; 0x53
 800504e:	f7fc f919 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8005052:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005056:	2060      	movs	r0, #96	; 0x60
 8005058:	f7fc f914 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 800505c:	2101      	movs	r1, #1
 800505e:	2061      	movs	r0, #97	; 0x61
 8005060:	f7fc f910 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8005064:	2100      	movs	r1, #0
 8005066:	206a      	movs	r0, #106	; 0x6a
 8005068:	f7fc f90c 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 800506c:	2100      	movs	r1, #0
 800506e:	2080      	movs	r0, #128	; 0x80
 8005070:	f7fc f908 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8005074:	2100      	movs	r1, #0
 8005076:	2081      	movs	r0, #129	; 0x81
 8005078:	f7fc f904 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 800507c:	2100      	movs	r1, #0
 800507e:	2082      	movs	r0, #130	; 0x82
 8005080:	f7fc f900 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8005084:	2100      	movs	r1, #0
 8005086:	2083      	movs	r0, #131	; 0x83
 8005088:	f7fc f8fc 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 800508c:	2100      	movs	r1, #0
 800508e:	2084      	movs	r0, #132	; 0x84
 8005090:	f7fc f8f8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8005094:	2100      	movs	r1, #0
 8005096:	2085      	movs	r0, #133	; 0x85
 8005098:	f7fc f8f4 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 800509c:	2110      	movs	r1, #16
 800509e:	2090      	movs	r0, #144	; 0x90
 80050a0:	f7fc f8f0 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 80050a4:	2100      	movs	r1, #0
 80050a6:	2092      	movs	r0, #146	; 0x92
 80050a8:	f7fc f8ec 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 80050ac:	2101      	movs	r1, #1
 80050ae:	2093      	movs	r0, #147	; 0x93
 80050b0:	f7fc f8e8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 80050b4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80050b8:	2095      	movs	r0, #149	; 0x95
 80050ba:	f7fc f8e3 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 80050be:	2100      	movs	r1, #0
 80050c0:	2097      	movs	r0, #151	; 0x97
 80050c2:	f7fc f8df 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 80050c6:	2100      	movs	r1, #0
 80050c8:	2098      	movs	r0, #152	; 0x98
 80050ca:	f7fc f8db 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 80050ce:	f240 1173 	movw	r1, #371	; 0x173
 80050d2:	2007      	movs	r0, #7
 80050d4:	f7fc f8d6 	bl	8001284 <LCD_WriteReg>
 80050d8:	f001 ba88 	b.w	80065ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 80050dc:	4b74      	ldr	r3, [pc, #464]	; (80052b0 <LCD_Init+0x2af8>)
 80050de:	889b      	ldrh	r3, [r3, #4]
 80050e0:	f249 3231 	movw	r2, #37681	; 0x9331
 80050e4:	4293      	cmp	r3, r2
 80050e6:	f040 80e5 	bne.w	80052b4 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 80050ea:	f241 0114 	movw	r1, #4116	; 0x1014
 80050ee:	20e7      	movs	r0, #231	; 0xe7
 80050f0:	f7fc f8c8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 80050f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050f8:	2001      	movs	r0, #1
 80050fa:	f7fc f8c3 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 80050fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005102:	2002      	movs	r0, #2
 8005104:	f7fc f8be 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8005108:	f241 0138 	movw	r1, #4152	; 0x1038
 800510c:	2003      	movs	r0, #3
 800510e:	f7fc f8b9 	bl	8001284 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8005112:	f240 2102 	movw	r1, #514	; 0x202
 8005116:	2008      	movs	r0, #8
 8005118:	f7fc f8b4 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 800511c:	2100      	movs	r1, #0
 800511e:	2009      	movs	r0, #9
 8005120:	f7fc f8b0 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8005124:	2100      	movs	r1, #0
 8005126:	200a      	movs	r0, #10
 8005128:	f7fc f8ac 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 800512c:	2100      	movs	r1, #0
 800512e:	200c      	movs	r0, #12
 8005130:	f7fc f8a8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8005134:	2100      	movs	r1, #0
 8005136:	200d      	movs	r0, #13
 8005138:	f7fc f8a4 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 800513c:	2100      	movs	r1, #0
 800513e:	200f      	movs	r0, #15
 8005140:	f7fc f8a0 	bl	8001284 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8005144:	2100      	movs	r1, #0
 8005146:	2010      	movs	r0, #16
 8005148:	f7fc f89c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 800514c:	2107      	movs	r1, #7
 800514e:	2011      	movs	r0, #17
 8005150:	f7fc f898 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8005154:	2100      	movs	r1, #0
 8005156:	2012      	movs	r0, #18
 8005158:	f7fc f894 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 800515c:	2100      	movs	r1, #0
 800515e:	2013      	movs	r0, #19
 8005160:	f7fc f890 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8005164:	20c8      	movs	r0, #200	; 0xc8
 8005166:	f002 fea5 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800516a:	f241 6190 	movw	r1, #5776	; 0x1690
 800516e:	2010      	movs	r0, #16
 8005170:	f7fc f888 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8005174:	f240 2127 	movw	r1, #551	; 0x227
 8005178:	2011      	movs	r0, #17
 800517a:	f7fc f883 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800517e:	2032      	movs	r0, #50	; 0x32
 8005180:	f002 fe98 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8005184:	210c      	movs	r1, #12
 8005186:	2012      	movs	r0, #18
 8005188:	f7fc f87c 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800518c:	2032      	movs	r0, #50	; 0x32
 800518e:	f002 fe91 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8005192:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005196:	2013      	movs	r0, #19
 8005198:	f7fc f874 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 800519c:	2111      	movs	r1, #17
 800519e:	2029      	movs	r0, #41	; 0x29
 80051a0:	f7fc f870 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 80051a4:	210b      	movs	r1, #11
 80051a6:	202b      	movs	r0, #43	; 0x2b
 80051a8:	f7fc f86c 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80051ac:	2032      	movs	r0, #50	; 0x32
 80051ae:	f002 fe81 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 80051b2:	2100      	movs	r1, #0
 80051b4:	2020      	movs	r0, #32
 80051b6:	f7fc f865 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 80051ba:	f240 113f 	movw	r1, #319	; 0x13f
 80051be:	2021      	movs	r0, #33	; 0x21
 80051c0:	f7fc f860 	bl	8001284 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 80051c4:	2100      	movs	r1, #0
 80051c6:	2030      	movs	r0, #48	; 0x30
 80051c8:	f7fc f85c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 80051cc:	f44f 7183 	mov.w	r1, #262	; 0x106
 80051d0:	2031      	movs	r0, #49	; 0x31
 80051d2:	f7fc f857 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 80051d6:	2100      	movs	r1, #0
 80051d8:	2032      	movs	r0, #50	; 0x32
 80051da:	f7fc f853 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80051de:	f44f 7101 	mov.w	r1, #516	; 0x204
 80051e2:	2035      	movs	r0, #53	; 0x35
 80051e4:	f7fc f84e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 80051e8:	f241 610a 	movw	r1, #5642	; 0x160a
 80051ec:	2036      	movs	r0, #54	; 0x36
 80051ee:	f7fc f849 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 80051f2:	f240 7107 	movw	r1, #1799	; 0x707
 80051f6:	2037      	movs	r0, #55	; 0x37
 80051f8:	f7fc f844 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 80051fc:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005200:	2038      	movs	r0, #56	; 0x38
 8005202:	f7fc f83f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8005206:	f240 7107 	movw	r1, #1799	; 0x707
 800520a:	2039      	movs	r0, #57	; 0x39
 800520c:	f7fc f83a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8005210:	f240 4102 	movw	r1, #1026	; 0x402
 8005214:	203c      	movs	r0, #60	; 0x3c
 8005216:	f7fc f835 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 800521a:	f640 410f 	movw	r1, #3087	; 0xc0f
 800521e:	203d      	movs	r0, #61	; 0x3d
 8005220:	f7fc f830 	bl	8001284 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8005224:	2100      	movs	r1, #0
 8005226:	2050      	movs	r0, #80	; 0x50
 8005228:	f7fc f82c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 800522c:	21ef      	movs	r1, #239	; 0xef
 800522e:	2051      	movs	r0, #81	; 0x51
 8005230:	f7fc f828 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8005234:	2100      	movs	r1, #0
 8005236:	2052      	movs	r0, #82	; 0x52
 8005238:	f7fc f824 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 800523c:	f240 113f 	movw	r1, #319	; 0x13f
 8005240:	2053      	movs	r0, #83	; 0x53
 8005242:	f7fc f81f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8005246:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800524a:	2060      	movs	r0, #96	; 0x60
 800524c:	f7fc f81a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8005250:	2101      	movs	r1, #1
 8005252:	2061      	movs	r0, #97	; 0x61
 8005254:	f7fc f816 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8005258:	2100      	movs	r1, #0
 800525a:	206a      	movs	r0, #106	; 0x6a
 800525c:	f7fc f812 	bl	8001284 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8005260:	2100      	movs	r1, #0
 8005262:	2080      	movs	r0, #128	; 0x80
 8005264:	f7fc f80e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8005268:	2100      	movs	r1, #0
 800526a:	2081      	movs	r0, #129	; 0x81
 800526c:	f7fc f80a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8005270:	2100      	movs	r1, #0
 8005272:	2082      	movs	r0, #130	; 0x82
 8005274:	f7fc f806 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8005278:	2100      	movs	r1, #0
 800527a:	2083      	movs	r0, #131	; 0x83
 800527c:	f7fc f802 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8005280:	2100      	movs	r1, #0
 8005282:	2084      	movs	r0, #132	; 0x84
 8005284:	f7fb fffe 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8005288:	2100      	movs	r1, #0
 800528a:	2085      	movs	r0, #133	; 0x85
 800528c:	f7fb fffa 	bl	8001284 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8005290:	2110      	movs	r1, #16
 8005292:	2090      	movs	r0, #144	; 0x90
 8005294:	f7fb fff6 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8005298:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800529c:	2092      	movs	r0, #146	; 0x92
 800529e:	f7fb fff1 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 80052a2:	f240 1133 	movw	r1, #307	; 0x133
 80052a6:	2007      	movs	r0, #7
 80052a8:	f7fb ffec 	bl	8001284 <LCD_WriteReg>
 80052ac:	f001 b99e 	b.w	80065ec <LCD_Init+0x3e34>
 80052b0:	200004b0 	.word	0x200004b0
	} else if (lcddev.id == 0x5408) {
 80052b4:	4be2      	ldr	r3, [pc, #904]	; (8005640 <LCD_Init+0x2e88>)
 80052b6:	889b      	ldrh	r3, [r3, #4]
 80052b8:	f245 4208 	movw	r2, #21512	; 0x5408
 80052bc:	4293      	cmp	r3, r2
 80052be:	f040 80a3 	bne.w	8005408 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 80052c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052c6:	2001      	movs	r0, #1
 80052c8:	f7fb ffdc 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 80052cc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80052d0:	2002      	movs	r0, #2
 80052d2:	f7fb ffd7 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 80052d6:	f241 0130 	movw	r1, #4144	; 0x1030
 80052da:	2003      	movs	r0, #3
 80052dc:	f7fb ffd2 	bl	8001284 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 80052e0:	2100      	movs	r1, #0
 80052e2:	2004      	movs	r0, #4
 80052e4:	f7fb ffce 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 80052e8:	f240 2107 	movw	r1, #519	; 0x207
 80052ec:	2008      	movs	r0, #8
 80052ee:	f7fb ffc9 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 80052f2:	2100      	movs	r1, #0
 80052f4:	2009      	movs	r0, #9
 80052f6:	f7fb ffc5 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 80052fa:	2100      	movs	r1, #0
 80052fc:	200a      	movs	r0, #10
 80052fe:	f7fb ffc1 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8005302:	2100      	movs	r1, #0
 8005304:	200c      	movs	r0, #12
 8005306:	f7fb ffbd 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 800530a:	2100      	movs	r1, #0
 800530c:	200d      	movs	r0, #13
 800530e:	f7fb ffb9 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8005312:	2100      	movs	r1, #0
 8005314:	200f      	movs	r0, #15
 8005316:	f7fb ffb5 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(20);
 800531a:	2014      	movs	r0, #20
 800531c:	f002 fdca 	bl	8007eb4 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8005320:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8005324:	2010      	movs	r0, #16
 8005326:	f7fb ffad 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 800532a:	2101      	movs	r1, #1
 800532c:	2011      	movs	r0, #17
 800532e:	f7fb ffa9 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8005332:	2101      	movs	r1, #1
 8005334:	2017      	movs	r0, #23
 8005336:	f7fb ffa5 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 800533a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800533e:	2012      	movs	r0, #18
 8005340:	f7fb ffa0 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8005344:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005348:	2013      	movs	r0, #19
 800534a:	f7fb ff9b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 800534e:	2109      	movs	r1, #9
 8005350:	2029      	movs	r0, #41	; 0x29
 8005352:	f7fb ff97 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8005356:	2109      	movs	r1, #9
 8005358:	202a      	movs	r0, #42	; 0x2a
 800535a:	f7fb ff93 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 800535e:	2100      	movs	r1, #0
 8005360:	20a4      	movs	r0, #164	; 0xa4
 8005362:	f7fb ff8f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8005366:	2100      	movs	r1, #0
 8005368:	2050      	movs	r0, #80	; 0x50
 800536a:	f7fb ff8b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 800536e:	21ef      	movs	r1, #239	; 0xef
 8005370:	2051      	movs	r0, #81	; 0x51
 8005372:	f7fb ff87 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8005376:	2100      	movs	r1, #0
 8005378:	2052      	movs	r0, #82	; 0x52
 800537a:	f7fb ff83 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 800537e:	f240 113f 	movw	r1, #319	; 0x13f
 8005382:	2053      	movs	r0, #83	; 0x53
 8005384:	f7fb ff7e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8005388:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800538c:	2060      	movs	r0, #96	; 0x60
 800538e:	f7fb ff79 	bl	8001284 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8005392:	2101      	movs	r1, #1
 8005394:	2061      	movs	r0, #97	; 0x61
 8005396:	f7fb ff75 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 800539a:	2100      	movs	r1, #0
 800539c:	206a      	movs	r0, #106	; 0x6a
 800539e:	f7fb ff71 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 80053a2:	2100      	movs	r1, #0
 80053a4:	2080      	movs	r0, #128	; 0x80
 80053a6:	f7fb ff6d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 80053aa:	2100      	movs	r1, #0
 80053ac:	2081      	movs	r0, #129	; 0x81
 80053ae:	f7fb ff69 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 80053b2:	2100      	movs	r1, #0
 80053b4:	2082      	movs	r0, #130	; 0x82
 80053b6:	f7fb ff65 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 80053ba:	2100      	movs	r1, #0
 80053bc:	2083      	movs	r0, #131	; 0x83
 80053be:	f7fb ff61 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 80053c2:	2100      	movs	r1, #0
 80053c4:	2084      	movs	r0, #132	; 0x84
 80053c6:	f7fb ff5d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 80053ca:	2100      	movs	r1, #0
 80053cc:	2085      	movs	r0, #133	; 0x85
 80053ce:	f7fb ff59 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 80053d2:	2113      	movs	r1, #19
 80053d4:	2090      	movs	r0, #144	; 0x90
 80053d6:	f7fb ff55 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 80053da:	2100      	movs	r1, #0
 80053dc:	2092      	movs	r0, #146	; 0x92
 80053de:	f7fb ff51 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 80053e2:	2103      	movs	r1, #3
 80053e4:	2093      	movs	r0, #147	; 0x93
 80053e6:	f7fb ff4d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 80053ea:	f44f 7188 	mov.w	r1, #272	; 0x110
 80053ee:	2095      	movs	r0, #149	; 0x95
 80053f0:	f7fb ff48 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 80053f4:	f240 1173 	movw	r1, #371	; 0x173
 80053f8:	2007      	movs	r0, #7
 80053fa:	f7fb ff43 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(50);
 80053fe:	2032      	movs	r0, #50	; 0x32
 8005400:	f002 fd58 	bl	8007eb4 <HAL_Delay>
 8005404:	f001 b8f2 	b.w	80065ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8005408:	4b8d      	ldr	r3, [pc, #564]	; (8005640 <LCD_Init+0x2e88>)
 800540a:	889b      	ldrh	r3, [r3, #4]
 800540c:	f241 5205 	movw	r2, #5381	; 0x1505
 8005410:	4293      	cmp	r3, r2
 8005412:	f040 8117 	bne.w	8005644 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8005416:	2100      	movs	r1, #0
 8005418:	2007      	movs	r0, #7
 800541a:	f7fb ff33 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(50);
 800541e:	2032      	movs	r0, #50	; 0x32
 8005420:	f002 fd48 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8005424:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8005428:	2012      	movs	r0, #18
 800542a:	f7fb ff2b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 800542e:	2101      	movs	r1, #1
 8005430:	20a4      	movs	r0, #164	; 0xa4
 8005432:	f7fb ff27 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8005436:	210f      	movs	r1, #15
 8005438:	2008      	movs	r0, #8
 800543a:	f7fb ff23 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 800543e:	2108      	movs	r1, #8
 8005440:	200a      	movs	r0, #10
 8005442:	f7fb ff1f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8005446:	2108      	movs	r1, #8
 8005448:	200d      	movs	r0, #13
 800544a:	f7fb ff1b 	bl	8001284 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 800544e:	f240 7107 	movw	r1, #1799	; 0x707
 8005452:	2030      	movs	r0, #48	; 0x30
 8005454:	f7fb ff16 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8005458:	2107      	movs	r1, #7
 800545a:	2031      	movs	r0, #49	; 0x31
 800545c:	f7fb ff12 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8005460:	f240 6103 	movw	r1, #1539	; 0x603
 8005464:	2032      	movs	r0, #50	; 0x32
 8005466:	f7fb ff0d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 800546a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800546e:	2033      	movs	r0, #51	; 0x33
 8005470:	f7fb ff08 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8005474:	f240 2102 	movw	r1, #514	; 0x202
 8005478:	2034      	movs	r0, #52	; 0x34
 800547a:	f7fb ff03 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 800547e:	2102      	movs	r1, #2
 8005480:	2035      	movs	r0, #53	; 0x35
 8005482:	f7fb feff 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8005486:	f641 710f 	movw	r1, #7951	; 0x1f0f
 800548a:	2036      	movs	r0, #54	; 0x36
 800548c:	f7fb fefa 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8005490:	f240 7107 	movw	r1, #1799	; 0x707
 8005494:	2037      	movs	r0, #55	; 0x37
 8005496:	f7fb fef5 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 800549a:	2100      	movs	r1, #0
 800549c:	2038      	movs	r0, #56	; 0x38
 800549e:	f7fb fef1 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 80054a2:	2100      	movs	r1, #0
 80054a4:	2039      	movs	r0, #57	; 0x39
 80054a6:	f7fb feed 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 80054aa:	f240 7107 	movw	r1, #1799	; 0x707
 80054ae:	203a      	movs	r0, #58	; 0x3a
 80054b0:	f7fb fee8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 80054b4:	2100      	movs	r1, #0
 80054b6:	203b      	movs	r0, #59	; 0x3b
 80054b8:	f7fb fee4 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 80054bc:	2107      	movs	r1, #7
 80054be:	203c      	movs	r0, #60	; 0x3c
 80054c0:	f7fb fee0 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 80054c4:	2100      	movs	r1, #0
 80054c6:	203d      	movs	r0, #61	; 0x3d
 80054c8:	f7fb fedc 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(50);
 80054cc:	2032      	movs	r0, #50	; 0x32
 80054ce:	f002 fcf1 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 80054d2:	2101      	movs	r1, #1
 80054d4:	2007      	movs	r0, #7
 80054d6:	f7fb fed5 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 80054da:	2101      	movs	r1, #1
 80054dc:	2017      	movs	r0, #23
 80054de:	f7fb fed1 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(50);
 80054e2:	2032      	movs	r0, #50	; 0x32
 80054e4:	f002 fce6 	bl	8007eb4 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 80054e8:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 80054ec:	2010      	movs	r0, #16
 80054ee:	f7fb fec9 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 80054f2:	f240 2117 	movw	r1, #535	; 0x217
 80054f6:	2011      	movs	r0, #17
 80054f8:	f7fb fec4 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 80054fc:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8005500:	2012      	movs	r0, #18
 8005502:	f7fb febf 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8005506:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800550a:	2013      	movs	r0, #19
 800550c:	f7fb feba 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8005510:	2100      	movs	r1, #0
 8005512:	202a      	movs	r0, #42	; 0x2a
 8005514:	f7fb feb6 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8005518:	210a      	movs	r1, #10
 800551a:	2029      	movs	r0, #41	; 0x29
 800551c:	f7fb feb2 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8005520:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005524:	2012      	movs	r0, #18
 8005526:	f7fb fead 	bl	8001284 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 800552a:	2100      	movs	r1, #0
 800552c:	2050      	movs	r0, #80	; 0x50
 800552e:	f7fb fea9 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8005532:	21ef      	movs	r1, #239	; 0xef
 8005534:	2051      	movs	r0, #81	; 0x51
 8005536:	f7fb fea5 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800553a:	2100      	movs	r1, #0
 800553c:	2052      	movs	r0, #82	; 0x52
 800553e:	f7fb fea1 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8005542:	f240 113f 	movw	r1, #319	; 0x13f
 8005546:	2053      	movs	r0, #83	; 0x53
 8005548:	f7fb fe9c 	bl	8001284 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 800554c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005550:	2060      	movs	r0, #96	; 0x60
 8005552:	f7fb fe97 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8005556:	2101      	movs	r1, #1
 8005558:	2061      	movs	r0, #97	; 0x61
 800555a:	f7fb fe93 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800555e:	2100      	movs	r1, #0
 8005560:	206a      	movs	r0, #106	; 0x6a
 8005562:	f7fb fe8f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8005566:	2100      	movs	r1, #0
 8005568:	2080      	movs	r0, #128	; 0x80
 800556a:	f7fb fe8b 	bl	8001284 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 800556e:	2100      	movs	r1, #0
 8005570:	2081      	movs	r0, #129	; 0x81
 8005572:	f7fb fe87 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8005576:	2100      	movs	r1, #0
 8005578:	2082      	movs	r0, #130	; 0x82
 800557a:	f7fb fe83 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 800557e:	2100      	movs	r1, #0
 8005580:	2083      	movs	r0, #131	; 0x83
 8005582:	f7fb fe7f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8005586:	2100      	movs	r1, #0
 8005588:	2084      	movs	r0, #132	; 0x84
 800558a:	f7fb fe7b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 800558e:	2100      	movs	r1, #0
 8005590:	2085      	movs	r0, #133	; 0x85
 8005592:	f7fb fe77 	bl	8001284 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8005596:	2113      	movs	r1, #19
 8005598:	2090      	movs	r0, #144	; 0x90
 800559a:	f7fb fe73 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 800559e:	f44f 7140 	mov.w	r1, #768	; 0x300
 80055a2:	2092      	movs	r0, #146	; 0x92
 80055a4:	f7fb fe6e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 80055a8:	2105      	movs	r1, #5
 80055aa:	2093      	movs	r0, #147	; 0x93
 80055ac:	f7fb fe6a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 80055b0:	2100      	movs	r1, #0
 80055b2:	2095      	movs	r0, #149	; 0x95
 80055b4:	f7fb fe66 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 80055b8:	2100      	movs	r1, #0
 80055ba:	2097      	movs	r0, #151	; 0x97
 80055bc:	f7fb fe62 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 80055c0:	2100      	movs	r1, #0
 80055c2:	2098      	movs	r0, #152	; 0x98
 80055c4:	f7fb fe5e 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 80055c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055cc:	2001      	movs	r0, #1
 80055ce:	f7fb fe59 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80055d2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80055d6:	2002      	movs	r0, #2
 80055d8:	f7fb fe54 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 80055dc:	f241 0138 	movw	r1, #4152	; 0x1038
 80055e0:	2003      	movs	r0, #3
 80055e2:	f7fb fe4f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80055e6:	2100      	movs	r1, #0
 80055e8:	2004      	movs	r0, #4
 80055ea:	f7fb fe4b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80055ee:	2100      	movs	r1, #0
 80055f0:	200c      	movs	r0, #12
 80055f2:	f7fb fe47 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80055f6:	2100      	movs	r1, #0
 80055f8:	200f      	movs	r0, #15
 80055fa:	f7fb fe43 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 80055fe:	2100      	movs	r1, #0
 8005600:	2020      	movs	r0, #32
 8005602:	f7fb fe3f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8005606:	2100      	movs	r1, #0
 8005608:	2021      	movs	r0, #33	; 0x21
 800560a:	f7fb fe3b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 800560e:	2121      	movs	r1, #33	; 0x21
 8005610:	2007      	movs	r0, #7
 8005612:	f7fb fe37 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(20);
 8005616:	2014      	movs	r0, #20
 8005618:	f002 fc4c 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 800561c:	2161      	movs	r1, #97	; 0x61
 800561e:	2007      	movs	r0, #7
 8005620:	f7fb fe30 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(20);
 8005624:	2014      	movs	r0, #20
 8005626:	f002 fc45 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 800562a:	f240 1173 	movw	r1, #371	; 0x173
 800562e:	2007      	movs	r0, #7
 8005630:	f7fb fe28 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(20);
 8005634:	2014      	movs	r0, #20
 8005636:	f002 fc3d 	bl	8007eb4 <HAL_Delay>
 800563a:	f000 bfd7 	b.w	80065ec <LCD_Init+0x3e34>
 800563e:	bf00      	nop
 8005640:	200004b0 	.word	0x200004b0
	} else if (lcddev.id == 0xB505) {
 8005644:	4bf0      	ldr	r3, [pc, #960]	; (8005a08 <LCD_Init+0x3250>)
 8005646:	889b      	ldrh	r3, [r3, #4]
 8005648:	f24b 5205 	movw	r2, #46341	; 0xb505
 800564c:	4293      	cmp	r3, r2
 800564e:	f040 8103 	bne.w	8005858 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8005652:	2100      	movs	r1, #0
 8005654:	2000      	movs	r0, #0
 8005656:	f7fb fe15 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800565a:	2100      	movs	r1, #0
 800565c:	2000      	movs	r0, #0
 800565e:	f7fb fe11 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005662:	2100      	movs	r1, #0
 8005664:	2000      	movs	r0, #0
 8005666:	f7fb fe0d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800566a:	2100      	movs	r1, #0
 800566c:	2000      	movs	r0, #0
 800566e:	f7fb fe09 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8005672:	2101      	movs	r1, #1
 8005674:	20a4      	movs	r0, #164	; 0xa4
 8005676:	f7fb fe05 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(20);
 800567a:	2014      	movs	r0, #20
 800567c:	f002 fc1a 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8005680:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005684:	2060      	movs	r0, #96	; 0x60
 8005686:	f7fb fdfd 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800568a:	f240 2102 	movw	r1, #514	; 0x202
 800568e:	2008      	movs	r0, #8
 8005690:	f7fb fdf8 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8005694:	f44f 7105 	mov.w	r1, #532	; 0x214
 8005698:	2030      	movs	r0, #48	; 0x30
 800569a:	f7fb fdf3 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 800569e:	f243 7115 	movw	r1, #14101	; 0x3715
 80056a2:	2031      	movs	r0, #49	; 0x31
 80056a4:	f7fb fdee 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 80056a8:	f240 6104 	movw	r1, #1540	; 0x604
 80056ac:	2032      	movs	r0, #50	; 0x32
 80056ae:	f7fb fde9 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 80056b2:	f640 6116 	movw	r1, #3606	; 0xe16
 80056b6:	2033      	movs	r0, #51	; 0x33
 80056b8:	f7fb fde4 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 80056bc:	f242 2111 	movw	r1, #8721	; 0x2211
 80056c0:	2034      	movs	r0, #52	; 0x34
 80056c2:	f7fb fddf 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 80056c6:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 80056ca:	2035      	movs	r0, #53	; 0x35
 80056cc:	f7fb fdda 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 80056d0:	f248 5107 	movw	r1, #34055	; 0x8507
 80056d4:	2036      	movs	r0, #54	; 0x36
 80056d6:	f7fb fdd5 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 80056da:	f241 4107 	movw	r1, #5127	; 0x1407
 80056de:	2037      	movs	r0, #55	; 0x37
 80056e0:	f7fb fdd0 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 80056e4:	f241 4103 	movw	r1, #5123	; 0x1403
 80056e8:	2038      	movs	r0, #56	; 0x38
 80056ea:	f7fb fdcb 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 80056ee:	2120      	movs	r1, #32
 80056f0:	2039      	movs	r0, #57	; 0x39
 80056f2:	f7fb fdc7 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 80056f6:	211a      	movs	r1, #26
 80056f8:	2090      	movs	r0, #144	; 0x90
 80056fa:	f7fb fdc3 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80056fe:	2100      	movs	r1, #0
 8005700:	2010      	movs	r0, #16
 8005702:	f7fb fdbf 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8005706:	2107      	movs	r1, #7
 8005708:	2011      	movs	r0, #17
 800570a:	f7fb fdbb 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800570e:	2100      	movs	r1, #0
 8005710:	2012      	movs	r0, #18
 8005712:	f7fb fdb7 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8005716:	2100      	movs	r1, #0
 8005718:	2013      	movs	r0, #19
 800571a:	f7fb fdb3 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(20);
 800571e:	2014      	movs	r0, #20
 8005720:	f002 fbc8 	bl	8007eb4 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8005724:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8005728:	2010      	movs	r0, #16
 800572a:	f7fb fdab 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 800572e:	f240 1137 	movw	r1, #311	; 0x137
 8005732:	2011      	movs	r0, #17
 8005734:	f7fb fda6 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(20);
 8005738:	2014      	movs	r0, #20
 800573a:	f002 fbbb 	bl	8007eb4 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 800573e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8005742:	2012      	movs	r0, #18
 8005744:	f7fb fd9e 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(20);
 8005748:	2014      	movs	r0, #20
 800574a:	f002 fbb3 	bl	8007eb4 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 800574e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8005752:	2013      	movs	r0, #19
 8005754:	f7fb fd96 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8005758:	2180      	movs	r1, #128	; 0x80
 800575a:	202a      	movs	r0, #42	; 0x2a
 800575c:	f7fb fd92 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8005760:	2148      	movs	r1, #72	; 0x48
 8005762:	2029      	movs	r0, #41	; 0x29
 8005764:	f7fb fd8e 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(20);
 8005768:	2014      	movs	r0, #20
 800576a:	f002 fba3 	bl	8007eb4 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 800576e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005772:	2001      	movs	r0, #1
 8005774:	f7fb fd86 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8005778:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800577c:	2002      	movs	r0, #2
 800577e:	f7fb fd81 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8005782:	f241 0138 	movw	r1, #4152	; 0x1038
 8005786:	2003      	movs	r0, #3
 8005788:	f7fb fd7c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800578c:	f240 2102 	movw	r1, #514	; 0x202
 8005790:	2008      	movs	r0, #8
 8005792:	f7fb fd77 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8005796:	2100      	movs	r1, #0
 8005798:	200a      	movs	r0, #10
 800579a:	f7fb fd73 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 800579e:	2100      	movs	r1, #0
 80057a0:	200c      	movs	r0, #12
 80057a2:	f7fb fd6f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 80057a6:	2100      	movs	r1, #0
 80057a8:	200d      	movs	r0, #13
 80057aa:	f7fb fd6b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 80057ae:	2130      	movs	r1, #48	; 0x30
 80057b0:	200e      	movs	r0, #14
 80057b2:	f7fb fd67 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 80057b6:	2100      	movs	r1, #0
 80057b8:	2050      	movs	r0, #80	; 0x50
 80057ba:	f7fb fd63 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 80057be:	21ef      	movs	r1, #239	; 0xef
 80057c0:	2051      	movs	r0, #81	; 0x51
 80057c2:	f7fb fd5f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80057c6:	2100      	movs	r1, #0
 80057c8:	2052      	movs	r0, #82	; 0x52
 80057ca:	f7fb fd5b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 80057ce:	f240 113f 	movw	r1, #319	; 0x13f
 80057d2:	2053      	movs	r0, #83	; 0x53
 80057d4:	f7fb fd56 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 80057d8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80057dc:	2060      	movs	r0, #96	; 0x60
 80057de:	f7fb fd51 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80057e2:	2101      	movs	r1, #1
 80057e4:	2061      	movs	r0, #97	; 0x61
 80057e6:	f7fb fd4d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80057ea:	2100      	movs	r1, #0
 80057ec:	206a      	movs	r0, #106	; 0x6a
 80057ee:	f7fb fd49 	bl	8001284 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 80057f2:	2111      	movs	r1, #17
 80057f4:	2090      	movs	r0, #144	; 0x90
 80057f6:	f7fb fd45 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80057fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80057fe:	2092      	movs	r0, #146	; 0x92
 8005800:	f7fb fd40 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8005804:	f240 4102 	movw	r1, #1026	; 0x402
 8005808:	2093      	movs	r0, #147	; 0x93
 800580a:	f7fb fd3b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 800580e:	2102      	movs	r1, #2
 8005810:	2094      	movs	r0, #148	; 0x94
 8005812:	f7fb fd37 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(20);
 8005816:	2014      	movs	r0, #20
 8005818:	f002 fb4c 	bl	8007eb4 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 800581c:	2101      	movs	r1, #1
 800581e:	2007      	movs	r0, #7
 8005820:	f7fb fd30 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(20);
 8005824:	2014      	movs	r0, #20
 8005826:	f002 fb45 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 800582a:	2161      	movs	r1, #97	; 0x61
 800582c:	2007      	movs	r0, #7
 800582e:	f7fb fd29 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8005832:	f240 1173 	movw	r1, #371	; 0x173
 8005836:	2007      	movs	r0, #7
 8005838:	f7fb fd24 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 800583c:	2100      	movs	r1, #0
 800583e:	2020      	movs	r0, #32
 8005840:	f7fb fd20 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8005844:	2100      	movs	r1, #0
 8005846:	2021      	movs	r0, #33	; 0x21
 8005848:	f7fb fd1c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 800584c:	2122      	movs	r1, #34	; 0x22
 800584e:	2000      	movs	r0, #0
 8005850:	f7fb fd18 	bl	8001284 <LCD_WriteReg>
 8005854:	f000 beca 	b.w	80065ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8005858:	4b6b      	ldr	r3, [pc, #428]	; (8005a08 <LCD_Init+0x3250>)
 800585a:	889b      	ldrh	r3, [r3, #4]
 800585c:	f24c 5205 	movw	r2, #50437	; 0xc505
 8005860:	4293      	cmp	r3, r2
 8005862:	f040 80d3 	bne.w	8005a0c <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8005866:	2100      	movs	r1, #0
 8005868:	2000      	movs	r0, #0
 800586a:	f7fb fd0b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800586e:	2100      	movs	r1, #0
 8005870:	2000      	movs	r0, #0
 8005872:	f7fb fd07 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(20);
 8005876:	2014      	movs	r0, #20
 8005878:	f002 fb1c 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 800587c:	2100      	movs	r1, #0
 800587e:	2000      	movs	r0, #0
 8005880:	f7fb fd00 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005884:	2100      	movs	r1, #0
 8005886:	2000      	movs	r0, #0
 8005888:	f7fb fcfc 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800588c:	2100      	movs	r1, #0
 800588e:	2000      	movs	r0, #0
 8005890:	f7fb fcf8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005894:	2100      	movs	r1, #0
 8005896:	2000      	movs	r0, #0
 8005898:	f7fb fcf4 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 800589c:	2101      	movs	r1, #1
 800589e:	20a4      	movs	r0, #164	; 0xa4
 80058a0:	f7fb fcf0 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(20);
 80058a4:	2014      	movs	r0, #20
 80058a6:	f002 fb05 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 80058aa:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80058ae:	2060      	movs	r0, #96	; 0x60
 80058b0:	f7fb fce8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 80058b4:	f640 0106 	movw	r1, #2054	; 0x806
 80058b8:	2008      	movs	r0, #8
 80058ba:	f7fb fce3 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 80058be:	f240 7103 	movw	r1, #1795	; 0x703
 80058c2:	2030      	movs	r0, #48	; 0x30
 80058c4:	f7fb fcde 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 80058c8:	2101      	movs	r1, #1
 80058ca:	2031      	movs	r0, #49	; 0x31
 80058cc:	f7fb fcda 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 80058d0:	2104      	movs	r1, #4
 80058d2:	2032      	movs	r0, #50	; 0x32
 80058d4:	f7fb fcd6 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 80058d8:	f44f 7181 	mov.w	r1, #258	; 0x102
 80058dc:	2033      	movs	r0, #51	; 0x33
 80058de:	f7fb fcd1 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 80058e2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80058e6:	2034      	movs	r0, #52	; 0x34
 80058e8:	f7fb fccc 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 80058ec:	f240 1103 	movw	r1, #259	; 0x103
 80058f0:	2035      	movs	r0, #53	; 0x35
 80058f2:	f7fb fcc7 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 80058f6:	211f      	movs	r1, #31
 80058f8:	2036      	movs	r0, #54	; 0x36
 80058fa:	f7fb fcc3 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 80058fe:	f240 7103 	movw	r1, #1795	; 0x703
 8005902:	2037      	movs	r0, #55	; 0x37
 8005904:	f7fb fcbe 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8005908:	2101      	movs	r1, #1
 800590a:	2038      	movs	r0, #56	; 0x38
 800590c:	f7fb fcba 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8005910:	2104      	movs	r1, #4
 8005912:	2039      	movs	r0, #57	; 0x39
 8005914:	f7fb fcb6 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8005918:	2115      	movs	r1, #21
 800591a:	2090      	movs	r0, #144	; 0x90
 800591c:	f7fb fcb2 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8005920:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8005924:	2010      	movs	r0, #16
 8005926:	f7fb fcad 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 800592a:	f240 2147 	movw	r1, #583	; 0x247
 800592e:	2011      	movs	r0, #17
 8005930:	f7fb fca8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8005934:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8005938:	2012      	movs	r0, #18
 800593a:	f7fb fca3 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 800593e:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8005942:	2013      	movs	r0, #19
 8005944:	f7fb fc9e 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(120);
 8005948:	2078      	movs	r0, #120	; 0x78
 800594a:	f002 fab3 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 800594e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005952:	2001      	movs	r0, #1
 8005954:	f7fb fc96 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005958:	f44f 7100 	mov.w	r1, #512	; 0x200
 800595c:	2002      	movs	r0, #2
 800595e:	f7fb fc91 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8005962:	f241 0130 	movw	r1, #4144	; 0x1030
 8005966:	2003      	movs	r0, #3
 8005968:	f7fb fc8c 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 800596c:	2108      	movs	r1, #8
 800596e:	200a      	movs	r0, #10
 8005970:	f7fb fc88 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005974:	2100      	movs	r1, #0
 8005976:	200c      	movs	r0, #12
 8005978:	f7fb fc84 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 800597c:	2120      	movs	r1, #32
 800597e:	200e      	movs	r0, #14
 8005980:	f7fb fc80 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8005984:	2100      	movs	r1, #0
 8005986:	200f      	movs	r0, #15
 8005988:	f7fb fc7c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 800598c:	2100      	movs	r1, #0
 800598e:	2020      	movs	r0, #32
 8005990:	f7fb fc78 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8005994:	2100      	movs	r1, #0
 8005996:	2021      	movs	r0, #33	; 0x21
 8005998:	f7fb fc74 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 800599c:	213d      	movs	r1, #61	; 0x3d
 800599e:	202a      	movs	r0, #42	; 0x2a
 80059a0:	f7fb fc70 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(20);
 80059a4:	2014      	movs	r0, #20
 80059a6:	f002 fa85 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 80059aa:	212d      	movs	r1, #45	; 0x2d
 80059ac:	2029      	movs	r0, #41	; 0x29
 80059ae:	f7fb fc69 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 80059b2:	2100      	movs	r1, #0
 80059b4:	2050      	movs	r0, #80	; 0x50
 80059b6:	f7fb fc65 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 80059ba:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 80059be:	2051      	movs	r0, #81	; 0x51
 80059c0:	f7fb fc60 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80059c4:	2100      	movs	r1, #0
 80059c6:	2052      	movs	r0, #82	; 0x52
 80059c8:	f7fb fc5c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80059cc:	f240 113f 	movw	r1, #319	; 0x13f
 80059d0:	2053      	movs	r0, #83	; 0x53
 80059d2:	f7fb fc57 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 80059d6:	2100      	movs	r1, #0
 80059d8:	2061      	movs	r0, #97	; 0x61
 80059da:	f7fb fc53 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80059de:	2100      	movs	r1, #0
 80059e0:	206a      	movs	r0, #106	; 0x6a
 80059e2:	f7fb fc4f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 80059e6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80059ea:	2092      	movs	r0, #146	; 0x92
 80059ec:	f7fb fc4a 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 80059f0:	2105      	movs	r1, #5
 80059f2:	2093      	movs	r0, #147	; 0x93
 80059f4:	f7fb fc46 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80059f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059fc:	2007      	movs	r0, #7
 80059fe:	f7fb fc41 	bl	8001284 <LCD_WriteReg>
 8005a02:	f000 bdf3 	b.w	80065ec <LCD_Init+0x3e34>
 8005a06:	bf00      	nop
 8005a08:	200004b0 	.word	0x200004b0
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 8005a0c:	4bc2      	ldr	r3, [pc, #776]	; (8005d18 <LCD_Init+0x3560>)
 8005a0e:	889b      	ldrh	r3, [r3, #4]
 8005a10:	f648 1289 	movw	r2, #35209	; 0x8989
 8005a14:	4293      	cmp	r3, r2
 8005a16:	f040 80bc 	bne.w	8005b92 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	f7fb fc31 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 8005a22:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 8005a26:	2003      	movs	r0, #3
 8005a28:	f7fb fc2c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	200c      	movs	r0, #12
 8005a30:	f7fb fc28 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 8005a34:	f640 010c 	movw	r1, #2060	; 0x80c
 8005a38:	200d      	movs	r0, #13
 8005a3a:	f7fb fc23 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 8005a3e:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8005a42:	200e      	movs	r0, #14
 8005a44:	f7fb fc1e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8005a48:	21b0      	movs	r1, #176	; 0xb0
 8005a4a:	201e      	movs	r0, #30
 8005a4c:	f7fb fc1a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8005a50:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8005a54:	2001      	movs	r0, #1
 8005a56:	f7fb fc15 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 8005a5a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a5e:	2002      	movs	r0, #2
 8005a60:	f7fb fc10 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8005a64:	2100      	movs	r1, #0
 8005a66:	2010      	movs	r0, #16
 8005a68:	f7fb fc0c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8005a6c:	f246 0178 	movw	r1, #24696	; 0x6078
 8005a70:	2011      	movs	r0, #17
 8005a72:	f7fb fc07 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8005a76:	2100      	movs	r1, #0
 8005a78:	2005      	movs	r0, #5
 8005a7a:	f7fb fc03 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8005a7e:	2100      	movs	r1, #0
 8005a80:	2006      	movs	r0, #6
 8005a82:	f7fb fbff 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8005a86:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8005a8a:	2016      	movs	r0, #22
 8005a8c:	f7fb fbfa 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8005a90:	2103      	movs	r1, #3
 8005a92:	2017      	movs	r0, #23
 8005a94:	f7fb fbf6 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8005a98:	f240 2133 	movw	r1, #563	; 0x233
 8005a9c:	2007      	movs	r0, #7
 8005a9e:	f7fb fbf1 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	200b      	movs	r0, #11
 8005aa6:	f7fb fbed 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8005aaa:	2100      	movs	r1, #0
 8005aac:	200f      	movs	r0, #15
 8005aae:	f7fb fbe9 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	2041      	movs	r0, #65	; 0x41
 8005ab6:	f7fb fbe5 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8005aba:	2100      	movs	r1, #0
 8005abc:	2042      	movs	r0, #66	; 0x42
 8005abe:	f7fb fbe1 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	2048      	movs	r0, #72	; 0x48
 8005ac6:	f7fb fbdd 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8005aca:	f240 113f 	movw	r1, #319	; 0x13f
 8005ace:	2049      	movs	r0, #73	; 0x49
 8005ad0:	f7fb fbd8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	204a      	movs	r0, #74	; 0x4a
 8005ad8:	f7fb fbd4 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 8005adc:	2100      	movs	r1, #0
 8005ade:	204b      	movs	r0, #75	; 0x4b
 8005ae0:	f7fb fbd0 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8005ae4:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8005ae8:	2044      	movs	r0, #68	; 0x44
 8005aea:	f7fb fbcb 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 8005aee:	2100      	movs	r1, #0
 8005af0:	2045      	movs	r0, #69	; 0x45
 8005af2:	f7fb fbc7 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 8005af6:	f240 113f 	movw	r1, #319	; 0x13f
 8005afa:	2046      	movs	r0, #70	; 0x46
 8005afc:	f7fb fbc2 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8005b00:	f240 7107 	movw	r1, #1799	; 0x707
 8005b04:	2030      	movs	r0, #48	; 0x30
 8005b06:	f7fb fbbd 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 8005b0a:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005b0e:	2031      	movs	r0, #49	; 0x31
 8005b10:	f7fb fbb8 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 8005b14:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005b18:	2032      	movs	r0, #50	; 0x32
 8005b1a:	f7fb fbb3 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 8005b1e:	f240 5102 	movw	r1, #1282	; 0x502
 8005b22:	2033      	movs	r0, #51	; 0x33
 8005b24:	f7fb fbae 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8005b28:	f240 5107 	movw	r1, #1287	; 0x507
 8005b2c:	2034      	movs	r0, #52	; 0x34
 8005b2e:	f7fb fba9 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8005b32:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005b36:	2035      	movs	r0, #53	; 0x35
 8005b38:	f7fb fba4 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 8005b3c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005b40:	2036      	movs	r0, #54	; 0x36
 8005b42:	f7fb fb9f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 8005b46:	f240 5102 	movw	r1, #1282	; 0x502
 8005b4a:	2037      	movs	r0, #55	; 0x37
 8005b4c:	f7fb fb9a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8005b50:	f240 3102 	movw	r1, #770	; 0x302
 8005b54:	203a      	movs	r0, #58	; 0x3a
 8005b56:	f7fb fb95 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 8005b5a:	f240 3102 	movw	r1, #770	; 0x302
 8005b5e:	203b      	movs	r0, #59	; 0x3b
 8005b60:	f7fb fb90 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8005b64:	2100      	movs	r1, #0
 8005b66:	2023      	movs	r0, #35	; 0x23
 8005b68:	f7fb fb8c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	2024      	movs	r0, #36	; 0x24
 8005b70:	f7fb fb88 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8005b74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b78:	2025      	movs	r0, #37	; 0x25
 8005b7a:	f7fb fb83 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8005b7e:	2100      	movs	r1, #0
 8005b80:	204f      	movs	r0, #79	; 0x4f
 8005b82:	f7fb fb7f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8005b86:	2100      	movs	r1, #0
 8005b88:	204e      	movs	r0, #78	; 0x4e
 8005b8a:	f7fb fb7b 	bl	8001284 <LCD_WriteReg>
 8005b8e:	f000 bd2d 	b.w	80065ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8005b92:	4b61      	ldr	r3, [pc, #388]	; (8005d18 <LCD_Init+0x3560>)
 8005b94:	889b      	ldrh	r3, [r3, #4]
 8005b96:	f244 5231 	movw	r2, #17713	; 0x4531
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	f040 80be 	bne.w	8005d1c <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	f7fb fb6e 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(10);
 8005ba8:	200a      	movs	r0, #10
 8005baa:	f002 f983 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8005bae:	f241 6128 	movw	r1, #5672	; 0x1628
 8005bb2:	2010      	movs	r0, #16
 8005bb4:	f7fb fb66 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8005bb8:	210e      	movs	r1, #14
 8005bba:	2012      	movs	r0, #18
 8005bbc:	f7fb fb62 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8005bc0:	f640 2139 	movw	r1, #2617	; 0xa39
 8005bc4:	2013      	movs	r0, #19
 8005bc6:	f7fb fb5d 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(10);
 8005bca:	200a      	movs	r0, #10
 8005bcc:	f002 f972 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8005bd0:	2140      	movs	r1, #64	; 0x40
 8005bd2:	2011      	movs	r0, #17
 8005bd4:	f7fb fb56 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8005bd8:	2150      	movs	r1, #80	; 0x50
 8005bda:	2015      	movs	r0, #21
 8005bdc:	f7fb fb52 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(10);
 8005be0:	200a      	movs	r0, #10
 8005be2:	f002 f967 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8005be6:	211e      	movs	r1, #30
 8005be8:	2012      	movs	r0, #18
 8005bea:	f7fb fb4b 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(10);
 8005bee:	200a      	movs	r0, #10
 8005bf0:	f002 f960 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 8005bf4:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8005bf8:	2010      	movs	r0, #16
 8005bfa:	f7fb fb43 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 8005bfe:	f642 2139 	movw	r1, #10809	; 0x2a39
 8005c02:	2013      	movs	r0, #19
 8005c04:	f7fb fb3e 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(10);
 8005c08:	200a      	movs	r0, #10
 8005c0a:	f002 f953 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 8005c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c12:	2001      	movs	r0, #1
 8005c14:	f7fb fb36 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005c18:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005c1c:	2002      	movs	r0, #2
 8005c1e:	f7fb fb31 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 8005c22:	f241 0138 	movw	r1, #4152	; 0x1038
 8005c26:	2003      	movs	r0, #3
 8005c28:	f7fb fb2c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 8005c2c:	f240 2102 	movw	r1, #514	; 0x202
 8005c30:	2008      	movs	r0, #8
 8005c32:	f7fb fb27 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8005c36:	2108      	movs	r1, #8
 8005c38:	200a      	movs	r0, #10
 8005c3a:	f7fb fb23 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 8005c3e:	2100      	movs	r1, #0
 8005c40:	2030      	movs	r0, #48	; 0x30
 8005c42:	f7fb fb1f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005c46:	f240 4102 	movw	r1, #1026	; 0x402
 8005c4a:	2031      	movs	r0, #49	; 0x31
 8005c4c:	f7fb fb1a 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8005c50:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005c54:	2032      	movs	r0, #50	; 0x32
 8005c56:	f7fb fb15 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 8005c5a:	f240 5103 	movw	r1, #1283	; 0x503
 8005c5e:	2033      	movs	r0, #51	; 0x33
 8005c60:	f7fb fb10 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8005c64:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005c68:	2034      	movs	r0, #52	; 0x34
 8005c6a:	f7fb fb0b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 8005c6e:	f240 3101 	movw	r1, #769	; 0x301
 8005c72:	2035      	movs	r0, #53	; 0x35
 8005c74:	f7fb fb06 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005c78:	f240 7107 	movw	r1, #1799	; 0x707
 8005c7c:	2036      	movs	r0, #54	; 0x36
 8005c7e:	f7fb fb01 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005c82:	f240 3105 	movw	r1, #773	; 0x305
 8005c86:	2037      	movs	r0, #55	; 0x37
 8005c88:	f7fb fafc 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8005c8c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005c90:	2038      	movs	r0, #56	; 0x38
 8005c92:	f7fb faf7 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8005c96:	f640 710b 	movw	r1, #3851	; 0xf0b
 8005c9a:	2039      	movs	r0, #57	; 0x39
 8005c9c:	f7fb faf2 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8005ca0:	2102      	movs	r1, #2
 8005ca2:	2041      	movs	r0, #65	; 0x41
 8005ca4:	f7fb faee 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005ca8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005cac:	2060      	movs	r0, #96	; 0x60
 8005cae:	f7fb fae9 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	2061      	movs	r0, #97	; 0x61
 8005cb6:	f7fb fae5 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8005cba:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005cbe:	2090      	movs	r0, #144	; 0x90
 8005cc0:	f7fb fae0 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8005cc4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005cc8:	2092      	movs	r0, #146	; 0x92
 8005cca:	f7fb fadb 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 8005cce:	2104      	movs	r1, #4
 8005cd0:	2093      	movs	r0, #147	; 0x93
 8005cd2:	f7fb fad7 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8005cd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005cda:	20a0      	movs	r0, #160	; 0xa0
 8005cdc:	f7fb fad2 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	2007      	movs	r0, #7
 8005ce4:	f7fb face 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005ce8:	2121      	movs	r1, #33	; 0x21
 8005cea:	2007      	movs	r0, #7
 8005cec:	f7fb faca 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005cf0:	2123      	movs	r1, #35	; 0x23
 8005cf2:	2007      	movs	r0, #7
 8005cf4:	f7fb fac6 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005cf8:	2133      	movs	r1, #51	; 0x33
 8005cfa:	2007      	movs	r0, #7
 8005cfc:	f7fb fac2 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005d00:	f240 1133 	movw	r1, #307	; 0x133
 8005d04:	2007      	movs	r0, #7
 8005d06:	f7fb fabd 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	20a0      	movs	r0, #160	; 0xa0
 8005d0e:	f7fb fab9 	bl	8001284 <LCD_WriteReg>
 8005d12:	f000 bc6b 	b.w	80065ec <LCD_Init+0x3e34>
 8005d16:	bf00      	nop
 8005d18:	200004b0 	.word	0x200004b0
	} else if (lcddev.id == 0x4535) {
 8005d1c:	4b5b      	ldr	r3, [pc, #364]	; (8005e8c <LCD_Init+0x36d4>)
 8005d1e:	889b      	ldrh	r3, [r3, #4]
 8005d20:	f244 5235 	movw	r2, #17717	; 0x4535
 8005d24:	4293      	cmp	r3, r2
 8005d26:	f040 80b3 	bne.w	8005e90 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 8005d2a:	2130      	movs	r1, #48	; 0x30
 8005d2c:	2015      	movs	r0, #21
 8005d2e:	f7fb faa9 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 8005d32:	2110      	movs	r1, #16
 8005d34:	209a      	movs	r0, #154	; 0x9a
 8005d36:	f7fb faa5 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 8005d3a:	2120      	movs	r1, #32
 8005d3c:	2011      	movs	r0, #17
 8005d3e:	f7fb faa1 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 8005d42:	f243 4128 	movw	r1, #13352	; 0x3428
 8005d46:	2010      	movs	r0, #16
 8005d48:	f7fb fa9c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 8005d4c:	2102      	movs	r1, #2
 8005d4e:	2012      	movs	r0, #18
 8005d50:	f7fb fa98 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8005d54:	f241 0138 	movw	r1, #4152	; 0x1038
 8005d58:	2013      	movs	r0, #19
 8005d5a:	f7fb fa93 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(40);
 8005d5e:	2028      	movs	r0, #40	; 0x28
 8005d60:	f002 f8a8 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8005d64:	2112      	movs	r1, #18
 8005d66:	2012      	movs	r0, #18
 8005d68:	f7fb fa8c 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(40);
 8005d6c:	2028      	movs	r0, #40	; 0x28
 8005d6e:	f002 f8a1 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8005d72:	f243 4120 	movw	r1, #13344	; 0x3420
 8005d76:	2010      	movs	r0, #16
 8005d78:	f7fb fa84 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 8005d7c:	f243 0138 	movw	r1, #12344	; 0x3038
 8005d80:	2013      	movs	r0, #19
 8005d82:	f7fb fa7f 	bl	8001284 <LCD_WriteReg>
		HAL_Delay(70);
 8005d86:	2046      	movs	r0, #70	; 0x46
 8005d88:	f002 f894 	bl	8007eb4 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	2030      	movs	r0, #48	; 0x30
 8005d90:	f7fb fa78 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005d94:	f240 4102 	movw	r1, #1026	; 0x402
 8005d98:	2031      	movs	r0, #49	; 0x31
 8005d9a:	f7fb fa73 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 8005d9e:	f240 3107 	movw	r1, #775	; 0x307
 8005da2:	2032      	movs	r0, #50	; 0x32
 8005da4:	f7fb fa6e 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005da8:	f44f 7141 	mov.w	r1, #772	; 0x304
 8005dac:	2033      	movs	r0, #51	; 0x33
 8005dae:	f7fb fa69 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 8005db2:	2104      	movs	r1, #4
 8005db4:	2034      	movs	r0, #52	; 0x34
 8005db6:	f7fb fa65 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 8005dba:	f240 4101 	movw	r1, #1025	; 0x401
 8005dbe:	2035      	movs	r0, #53	; 0x35
 8005dc0:	f7fb fa60 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005dc4:	f240 7107 	movw	r1, #1799	; 0x707
 8005dc8:	2036      	movs	r0, #54	; 0x36
 8005dca:	f7fb fa5b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005dce:	f240 3105 	movw	r1, #773	; 0x305
 8005dd2:	2037      	movs	r0, #55	; 0x37
 8005dd4:	f7fb fa56 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8005dd8:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005ddc:	2038      	movs	r0, #56	; 0x38
 8005dde:	f7fb fa51 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 8005de2:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005de6:	2039      	movs	r0, #57	; 0x39
 8005de8:	f7fb fa4c 	bl	8001284 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 8005dec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005df0:	2001      	movs	r0, #1
 8005df2:	f7fb fa47 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005df6:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005dfa:	2002      	movs	r0, #2
 8005dfc:	f7fb fa42 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8005e00:	f241 0130 	movw	r1, #4144	; 0x1030
 8005e04:	2003      	movs	r0, #3
 8005e06:	f7fb fa3d 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 8005e0a:	f640 0108 	movw	r1, #2056	; 0x808
 8005e0e:	2008      	movs	r0, #8
 8005e10:	f7fb fa38 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8005e14:	2108      	movs	r1, #8
 8005e16:	200a      	movs	r0, #10
 8005e18:	f7fb fa34 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005e1c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005e20:	2060      	movs	r0, #96	; 0x60
 8005e22:	f7fb fa2f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8005e26:	2101      	movs	r1, #1
 8005e28:	2061      	movs	r0, #97	; 0x61
 8005e2a:	f7fb fa2b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 8005e2e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005e32:	2090      	movs	r0, #144	; 0x90
 8005e34:	f7fb fa26 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8005e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e3c:	2092      	movs	r0, #146	; 0x92
 8005e3e:	f7fb fa21 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 8005e42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e46:	2093      	movs	r0, #147	; 0x93
 8005e48:	f7fb fa1c 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 8005e4c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005e50:	20a0      	movs	r0, #160	; 0xa0
 8005e52:	f7fb fa17 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8005e56:	2110      	movs	r1, #16
 8005e58:	20a3      	movs	r0, #163	; 0xa3
 8005e5a:	f7fb fa13 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005e5e:	2101      	movs	r1, #1
 8005e60:	2007      	movs	r0, #7
 8005e62:	f7fb fa0f 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005e66:	2121      	movs	r1, #33	; 0x21
 8005e68:	2007      	movs	r0, #7
 8005e6a:	f7fb fa0b 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005e6e:	2123      	movs	r1, #35	; 0x23
 8005e70:	2007      	movs	r0, #7
 8005e72:	f7fb fa07 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005e76:	2133      	movs	r1, #51	; 0x33
 8005e78:	2007      	movs	r0, #7
 8005e7a:	f7fb fa03 	bl	8001284 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005e7e:	f240 1133 	movw	r1, #307	; 0x133
 8005e82:	2007      	movs	r0, #7
 8005e84:	f7fb f9fe 	bl	8001284 <LCD_WriteReg>
 8005e88:	e3b0      	b.n	80065ec <LCD_Init+0x3e34>
 8005e8a:	bf00      	nop
 8005e8c:	200004b0 	.word	0x200004b0
	} else if (lcddev.id == 0X1963) {
 8005e90:	4ba8      	ldr	r3, [pc, #672]	; (8006134 <LCD_Init+0x397c>)
 8005e92:	889b      	ldrh	r3, [r3, #4]
 8005e94:	f641 1263 	movw	r2, #6499	; 0x1963
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	f040 83a7 	bne.w	80065ec <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8005e9e:	20e2      	movs	r0, #226	; 0xe2
 8005ea0:	f7fb f964 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 8005ea4:	4ba4      	ldr	r3, [pc, #656]	; (8006138 <LCD_Init+0x3980>)
 8005ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eaa:	611a      	str	r2, [r3, #16]
 8005eac:	4ba2      	ldr	r3, [pc, #648]	; (8006138 <LCD_Init+0x3980>)
 8005eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eb2:	615a      	str	r2, [r3, #20]
 8005eb4:	4ba1      	ldr	r3, [pc, #644]	; (800613c <LCD_Init+0x3984>)
 8005eb6:	221d      	movs	r2, #29
 8005eb8:	60da      	str	r2, [r3, #12]
 8005eba:	4b9f      	ldr	r3, [pc, #636]	; (8006138 <LCD_Init+0x3980>)
 8005ebc:	2280      	movs	r2, #128	; 0x80
 8005ebe:	615a      	str	r2, [r3, #20]
 8005ec0:	4b9d      	ldr	r3, [pc, #628]	; (8006138 <LCD_Init+0x3980>)
 8005ec2:	2280      	movs	r2, #128	; 0x80
 8005ec4:	611a      	str	r2, [r3, #16]
 8005ec6:	4b9c      	ldr	r3, [pc, #624]	; (8006138 <LCD_Init+0x3980>)
 8005ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ecc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8005ece:	4b9a      	ldr	r3, [pc, #616]	; (8006138 <LCD_Init+0x3980>)
 8005ed0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ed4:	611a      	str	r2, [r3, #16]
 8005ed6:	4b98      	ldr	r3, [pc, #608]	; (8006138 <LCD_Init+0x3980>)
 8005ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005edc:	615a      	str	r2, [r3, #20]
 8005ede:	4b97      	ldr	r3, [pc, #604]	; (800613c <LCD_Init+0x3984>)
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	60da      	str	r2, [r3, #12]
 8005ee4:	4b94      	ldr	r3, [pc, #592]	; (8006138 <LCD_Init+0x3980>)
 8005ee6:	2280      	movs	r2, #128	; 0x80
 8005ee8:	615a      	str	r2, [r3, #20]
 8005eea:	4b93      	ldr	r3, [pc, #588]	; (8006138 <LCD_Init+0x3980>)
 8005eec:	2280      	movs	r2, #128	; 0x80
 8005eee:	611a      	str	r2, [r3, #16]
 8005ef0:	4b91      	ldr	r3, [pc, #580]	; (8006138 <LCD_Init+0x3980>)
 8005ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ef6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8005ef8:	4b8f      	ldr	r3, [pc, #572]	; (8006138 <LCD_Init+0x3980>)
 8005efa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005efe:	611a      	str	r2, [r3, #16]
 8005f00:	4b8d      	ldr	r3, [pc, #564]	; (8006138 <LCD_Init+0x3980>)
 8005f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f06:	615a      	str	r2, [r3, #20]
 8005f08:	4b8c      	ldr	r3, [pc, #560]	; (800613c <LCD_Init+0x3984>)
 8005f0a:	2204      	movs	r2, #4
 8005f0c:	60da      	str	r2, [r3, #12]
 8005f0e:	4b8a      	ldr	r3, [pc, #552]	; (8006138 <LCD_Init+0x3980>)
 8005f10:	2280      	movs	r2, #128	; 0x80
 8005f12:	615a      	str	r2, [r3, #20]
 8005f14:	4b88      	ldr	r3, [pc, #544]	; (8006138 <LCD_Init+0x3980>)
 8005f16:	2280      	movs	r2, #128	; 0x80
 8005f18:	611a      	str	r2, [r3, #16]
 8005f1a:	4b87      	ldr	r3, [pc, #540]	; (8006138 <LCD_Init+0x3980>)
 8005f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f20:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 8005f22:	2001      	movs	r0, #1
 8005f24:	f001 ffc6 	bl	8007eb4 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005f28:	20e0      	movs	r0, #224	; 0xe0
 8005f2a:	f7fb f91f 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8005f2e:	4b82      	ldr	r3, [pc, #520]	; (8006138 <LCD_Init+0x3980>)
 8005f30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f34:	611a      	str	r2, [r3, #16]
 8005f36:	4b80      	ldr	r3, [pc, #512]	; (8006138 <LCD_Init+0x3980>)
 8005f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f3c:	615a      	str	r2, [r3, #20]
 8005f3e:	4b7f      	ldr	r3, [pc, #508]	; (800613c <LCD_Init+0x3984>)
 8005f40:	2201      	movs	r2, #1
 8005f42:	60da      	str	r2, [r3, #12]
 8005f44:	4b7c      	ldr	r3, [pc, #496]	; (8006138 <LCD_Init+0x3980>)
 8005f46:	2280      	movs	r2, #128	; 0x80
 8005f48:	615a      	str	r2, [r3, #20]
 8005f4a:	4b7b      	ldr	r3, [pc, #492]	; (8006138 <LCD_Init+0x3980>)
 8005f4c:	2280      	movs	r2, #128	; 0x80
 8005f4e:	611a      	str	r2, [r3, #16]
 8005f50:	4b79      	ldr	r3, [pc, #484]	; (8006138 <LCD_Init+0x3980>)
 8005f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f56:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005f58:	200a      	movs	r0, #10
 8005f5a:	f001 ffab 	bl	8007eb4 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8005f5e:	20e0      	movs	r0, #224	; 0xe0
 8005f60:	f7fb f904 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8005f64:	4b74      	ldr	r3, [pc, #464]	; (8006138 <LCD_Init+0x3980>)
 8005f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f6a:	611a      	str	r2, [r3, #16]
 8005f6c:	4b72      	ldr	r3, [pc, #456]	; (8006138 <LCD_Init+0x3980>)
 8005f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f72:	615a      	str	r2, [r3, #20]
 8005f74:	4b71      	ldr	r3, [pc, #452]	; (800613c <LCD_Init+0x3984>)
 8005f76:	2203      	movs	r2, #3
 8005f78:	60da      	str	r2, [r3, #12]
 8005f7a:	4b6f      	ldr	r3, [pc, #444]	; (8006138 <LCD_Init+0x3980>)
 8005f7c:	2280      	movs	r2, #128	; 0x80
 8005f7e:	615a      	str	r2, [r3, #20]
 8005f80:	4b6d      	ldr	r3, [pc, #436]	; (8006138 <LCD_Init+0x3980>)
 8005f82:	2280      	movs	r2, #128	; 0x80
 8005f84:	611a      	str	r2, [r3, #16]
 8005f86:	4b6c      	ldr	r3, [pc, #432]	; (8006138 <LCD_Init+0x3980>)
 8005f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f8c:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 8005f8e:	200c      	movs	r0, #12
 8005f90:	f001 ff90 	bl	8007eb4 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8005f94:	2001      	movs	r0, #1
 8005f96:	f7fb f8e9 	bl	800116c <LCD_WR_REG>
		HAL_Delay(10);
 8005f9a:	200a      	movs	r0, #10
 8005f9c:	f001 ff8a 	bl	8007eb4 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005fa0:	20e6      	movs	r0, #230	; 0xe6
 8005fa2:	f7fb f8e3 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8005fa6:	4b64      	ldr	r3, [pc, #400]	; (8006138 <LCD_Init+0x3980>)
 8005fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fac:	611a      	str	r2, [r3, #16]
 8005fae:	4b62      	ldr	r3, [pc, #392]	; (8006138 <LCD_Init+0x3980>)
 8005fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fb4:	615a      	str	r2, [r3, #20]
 8005fb6:	4b61      	ldr	r3, [pc, #388]	; (800613c <LCD_Init+0x3984>)
 8005fb8:	222f      	movs	r2, #47	; 0x2f
 8005fba:	60da      	str	r2, [r3, #12]
 8005fbc:	4b5e      	ldr	r3, [pc, #376]	; (8006138 <LCD_Init+0x3980>)
 8005fbe:	2280      	movs	r2, #128	; 0x80
 8005fc0:	615a      	str	r2, [r3, #20]
 8005fc2:	4b5d      	ldr	r3, [pc, #372]	; (8006138 <LCD_Init+0x3980>)
 8005fc4:	2280      	movs	r2, #128	; 0x80
 8005fc6:	611a      	str	r2, [r3, #16]
 8005fc8:	4b5b      	ldr	r3, [pc, #364]	; (8006138 <LCD_Init+0x3980>)
 8005fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fce:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005fd0:	4b59      	ldr	r3, [pc, #356]	; (8006138 <LCD_Init+0x3980>)
 8005fd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fd6:	611a      	str	r2, [r3, #16]
 8005fd8:	4b57      	ldr	r3, [pc, #348]	; (8006138 <LCD_Init+0x3980>)
 8005fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fde:	615a      	str	r2, [r3, #20]
 8005fe0:	4b56      	ldr	r3, [pc, #344]	; (800613c <LCD_Init+0x3984>)
 8005fe2:	22ff      	movs	r2, #255	; 0xff
 8005fe4:	60da      	str	r2, [r3, #12]
 8005fe6:	4b54      	ldr	r3, [pc, #336]	; (8006138 <LCD_Init+0x3980>)
 8005fe8:	2280      	movs	r2, #128	; 0x80
 8005fea:	615a      	str	r2, [r3, #20]
 8005fec:	4b52      	ldr	r3, [pc, #328]	; (8006138 <LCD_Init+0x3980>)
 8005fee:	2280      	movs	r2, #128	; 0x80
 8005ff0:	611a      	str	r2, [r3, #16]
 8005ff2:	4b51      	ldr	r3, [pc, #324]	; (8006138 <LCD_Init+0x3980>)
 8005ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ff8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005ffa:	4b4f      	ldr	r3, [pc, #316]	; (8006138 <LCD_Init+0x3980>)
 8005ffc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006000:	611a      	str	r2, [r3, #16]
 8006002:	4b4d      	ldr	r3, [pc, #308]	; (8006138 <LCD_Init+0x3980>)
 8006004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006008:	615a      	str	r2, [r3, #20]
 800600a:	4b4c      	ldr	r3, [pc, #304]	; (800613c <LCD_Init+0x3984>)
 800600c:	22ff      	movs	r2, #255	; 0xff
 800600e:	60da      	str	r2, [r3, #12]
 8006010:	4b49      	ldr	r3, [pc, #292]	; (8006138 <LCD_Init+0x3980>)
 8006012:	2280      	movs	r2, #128	; 0x80
 8006014:	615a      	str	r2, [r3, #20]
 8006016:	4b48      	ldr	r3, [pc, #288]	; (8006138 <LCD_Init+0x3980>)
 8006018:	2280      	movs	r2, #128	; 0x80
 800601a:	611a      	str	r2, [r3, #16]
 800601c:	4b46      	ldr	r3, [pc, #280]	; (8006138 <LCD_Init+0x3980>)
 800601e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006022:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 8006024:	20b0      	movs	r0, #176	; 0xb0
 8006026:	f7fb f8a1 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 800602a:	4b43      	ldr	r3, [pc, #268]	; (8006138 <LCD_Init+0x3980>)
 800602c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006030:	611a      	str	r2, [r3, #16]
 8006032:	4b41      	ldr	r3, [pc, #260]	; (8006138 <LCD_Init+0x3980>)
 8006034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006038:	615a      	str	r2, [r3, #20]
 800603a:	4b40      	ldr	r3, [pc, #256]	; (800613c <LCD_Init+0x3984>)
 800603c:	2220      	movs	r2, #32
 800603e:	60da      	str	r2, [r3, #12]
 8006040:	4b3d      	ldr	r3, [pc, #244]	; (8006138 <LCD_Init+0x3980>)
 8006042:	2280      	movs	r2, #128	; 0x80
 8006044:	615a      	str	r2, [r3, #20]
 8006046:	4b3c      	ldr	r3, [pc, #240]	; (8006138 <LCD_Init+0x3980>)
 8006048:	2280      	movs	r2, #128	; 0x80
 800604a:	611a      	str	r2, [r3, #16]
 800604c:	4b3a      	ldr	r3, [pc, #232]	; (8006138 <LCD_Init+0x3980>)
 800604e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006052:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8006054:	4b38      	ldr	r3, [pc, #224]	; (8006138 <LCD_Init+0x3980>)
 8006056:	f44f 7280 	mov.w	r2, #256	; 0x100
 800605a:	611a      	str	r2, [r3, #16]
 800605c:	4b36      	ldr	r3, [pc, #216]	; (8006138 <LCD_Init+0x3980>)
 800605e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006062:	615a      	str	r2, [r3, #20]
 8006064:	4b35      	ldr	r3, [pc, #212]	; (800613c <LCD_Init+0x3984>)
 8006066:	2200      	movs	r2, #0
 8006068:	60da      	str	r2, [r3, #12]
 800606a:	4b33      	ldr	r3, [pc, #204]	; (8006138 <LCD_Init+0x3980>)
 800606c:	2280      	movs	r2, #128	; 0x80
 800606e:	615a      	str	r2, [r3, #20]
 8006070:	4b31      	ldr	r3, [pc, #196]	; (8006138 <LCD_Init+0x3980>)
 8006072:	2280      	movs	r2, #128	; 0x80
 8006074:	611a      	str	r2, [r3, #16]
 8006076:	4b30      	ldr	r3, [pc, #192]	; (8006138 <LCD_Init+0x3980>)
 8006078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800607c:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 800607e:	4b2e      	ldr	r3, [pc, #184]	; (8006138 <LCD_Init+0x3980>)
 8006080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006084:	611a      	str	r2, [r3, #16]
 8006086:	4b2c      	ldr	r3, [pc, #176]	; (8006138 <LCD_Init+0x3980>)
 8006088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800608c:	615a      	str	r2, [r3, #20]
 800608e:	4b2b      	ldr	r3, [pc, #172]	; (800613c <LCD_Init+0x3984>)
 8006090:	2203      	movs	r2, #3
 8006092:	60da      	str	r2, [r3, #12]
 8006094:	4b28      	ldr	r3, [pc, #160]	; (8006138 <LCD_Init+0x3980>)
 8006096:	2280      	movs	r2, #128	; 0x80
 8006098:	615a      	str	r2, [r3, #20]
 800609a:	4b27      	ldr	r3, [pc, #156]	; (8006138 <LCD_Init+0x3980>)
 800609c:	2280      	movs	r2, #128	; 0x80
 800609e:	611a      	str	r2, [r3, #16]
 80060a0:	4b25      	ldr	r3, [pc, #148]	; (8006138 <LCD_Init+0x3980>)
 80060a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060a6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 80060a8:	4b23      	ldr	r3, [pc, #140]	; (8006138 <LCD_Init+0x3980>)
 80060aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060ae:	611a      	str	r2, [r3, #16]
 80060b0:	4b21      	ldr	r3, [pc, #132]	; (8006138 <LCD_Init+0x3980>)
 80060b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060b6:	615a      	str	r2, [r3, #20]
 80060b8:	4b20      	ldr	r3, [pc, #128]	; (800613c <LCD_Init+0x3984>)
 80060ba:	f240 321f 	movw	r2, #799	; 0x31f
 80060be:	60da      	str	r2, [r3, #12]
 80060c0:	4b1d      	ldr	r3, [pc, #116]	; (8006138 <LCD_Init+0x3980>)
 80060c2:	2280      	movs	r2, #128	; 0x80
 80060c4:	615a      	str	r2, [r3, #20]
 80060c6:	4b1c      	ldr	r3, [pc, #112]	; (8006138 <LCD_Init+0x3980>)
 80060c8:	2280      	movs	r2, #128	; 0x80
 80060ca:	611a      	str	r2, [r3, #16]
 80060cc:	4b1a      	ldr	r3, [pc, #104]	; (8006138 <LCD_Init+0x3980>)
 80060ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060d2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 80060d4:	4b18      	ldr	r3, [pc, #96]	; (8006138 <LCD_Init+0x3980>)
 80060d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060da:	611a      	str	r2, [r3, #16]
 80060dc:	4b16      	ldr	r3, [pc, #88]	; (8006138 <LCD_Init+0x3980>)
 80060de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060e2:	615a      	str	r2, [r3, #20]
 80060e4:	4b15      	ldr	r3, [pc, #84]	; (800613c <LCD_Init+0x3984>)
 80060e6:	2201      	movs	r2, #1
 80060e8:	60da      	str	r2, [r3, #12]
 80060ea:	4b13      	ldr	r3, [pc, #76]	; (8006138 <LCD_Init+0x3980>)
 80060ec:	2280      	movs	r2, #128	; 0x80
 80060ee:	615a      	str	r2, [r3, #20]
 80060f0:	4b11      	ldr	r3, [pc, #68]	; (8006138 <LCD_Init+0x3980>)
 80060f2:	2280      	movs	r2, #128	; 0x80
 80060f4:	611a      	str	r2, [r3, #16]
 80060f6:	4b10      	ldr	r3, [pc, #64]	; (8006138 <LCD_Init+0x3980>)
 80060f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060fc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 80060fe:	4b0e      	ldr	r3, [pc, #56]	; (8006138 <LCD_Init+0x3980>)
 8006100:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006104:	611a      	str	r2, [r3, #16]
 8006106:	4b0c      	ldr	r3, [pc, #48]	; (8006138 <LCD_Init+0x3980>)
 8006108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800610c:	615a      	str	r2, [r3, #20]
 800610e:	4b0b      	ldr	r3, [pc, #44]	; (800613c <LCD_Init+0x3984>)
 8006110:	f240 12df 	movw	r2, #479	; 0x1df
 8006114:	60da      	str	r2, [r3, #12]
 8006116:	4b08      	ldr	r3, [pc, #32]	; (8006138 <LCD_Init+0x3980>)
 8006118:	2280      	movs	r2, #128	; 0x80
 800611a:	615a      	str	r2, [r3, #20]
 800611c:	4b06      	ldr	r3, [pc, #24]	; (8006138 <LCD_Init+0x3980>)
 800611e:	2280      	movs	r2, #128	; 0x80
 8006120:	611a      	str	r2, [r3, #16]
 8006122:	4b05      	ldr	r3, [pc, #20]	; (8006138 <LCD_Init+0x3980>)
 8006124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006128:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 800612a:	4b03      	ldr	r3, [pc, #12]	; (8006138 <LCD_Init+0x3980>)
 800612c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006130:	e006      	b.n	8006140 <LCD_Init+0x3988>
 8006132:	bf00      	nop
 8006134:	200004b0 	.word	0x200004b0
 8006138:	40011000 	.word	0x40011000
 800613c:	40010c00 	.word	0x40010c00
 8006140:	611a      	str	r2, [r3, #16]
 8006142:	4ba3      	ldr	r3, [pc, #652]	; (80063d0 <LCD_Init+0x3c18>)
 8006144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006148:	615a      	str	r2, [r3, #20]
 800614a:	4ba2      	ldr	r3, [pc, #648]	; (80063d4 <LCD_Init+0x3c1c>)
 800614c:	2200      	movs	r2, #0
 800614e:	60da      	str	r2, [r3, #12]
 8006150:	4b9f      	ldr	r3, [pc, #636]	; (80063d0 <LCD_Init+0x3c18>)
 8006152:	2280      	movs	r2, #128	; 0x80
 8006154:	615a      	str	r2, [r3, #20]
 8006156:	4b9e      	ldr	r3, [pc, #632]	; (80063d0 <LCD_Init+0x3c18>)
 8006158:	2280      	movs	r2, #128	; 0x80
 800615a:	611a      	str	r2, [r3, #16]
 800615c:	4b9c      	ldr	r3, [pc, #624]	; (80063d0 <LCD_Init+0x3c18>)
 800615e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006162:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8006164:	20b4      	movs	r0, #180	; 0xb4
 8006166:	f7fb f801 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 800616a:	4b99      	ldr	r3, [pc, #612]	; (80063d0 <LCD_Init+0x3c18>)
 800616c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006170:	611a      	str	r2, [r3, #16]
 8006172:	4b97      	ldr	r3, [pc, #604]	; (80063d0 <LCD_Init+0x3c18>)
 8006174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006178:	615a      	str	r2, [r3, #20]
 800617a:	4b96      	ldr	r3, [pc, #600]	; (80063d4 <LCD_Init+0x3c1c>)
 800617c:	2204      	movs	r2, #4
 800617e:	60da      	str	r2, [r3, #12]
 8006180:	4b93      	ldr	r3, [pc, #588]	; (80063d0 <LCD_Init+0x3c18>)
 8006182:	2280      	movs	r2, #128	; 0x80
 8006184:	615a      	str	r2, [r3, #20]
 8006186:	4b92      	ldr	r3, [pc, #584]	; (80063d0 <LCD_Init+0x3c18>)
 8006188:	2280      	movs	r2, #128	; 0x80
 800618a:	611a      	str	r2, [r3, #16]
 800618c:	4b90      	ldr	r3, [pc, #576]	; (80063d0 <LCD_Init+0x3c18>)
 800618e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006192:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8006194:	4b8e      	ldr	r3, [pc, #568]	; (80063d0 <LCD_Init+0x3c18>)
 8006196:	f44f 7280 	mov.w	r2, #256	; 0x100
 800619a:	611a      	str	r2, [r3, #16]
 800619c:	4b8c      	ldr	r3, [pc, #560]	; (80063d0 <LCD_Init+0x3c18>)
 800619e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061a2:	615a      	str	r2, [r3, #20]
 80061a4:	4b8b      	ldr	r3, [pc, #556]	; (80063d4 <LCD_Init+0x3c1c>)
 80061a6:	f240 421f 	movw	r2, #1055	; 0x41f
 80061aa:	60da      	str	r2, [r3, #12]
 80061ac:	4b88      	ldr	r3, [pc, #544]	; (80063d0 <LCD_Init+0x3c18>)
 80061ae:	2280      	movs	r2, #128	; 0x80
 80061b0:	615a      	str	r2, [r3, #20]
 80061b2:	4b87      	ldr	r3, [pc, #540]	; (80063d0 <LCD_Init+0x3c18>)
 80061b4:	2280      	movs	r2, #128	; 0x80
 80061b6:	611a      	str	r2, [r3, #16]
 80061b8:	4b85      	ldr	r3, [pc, #532]	; (80063d0 <LCD_Init+0x3c18>)
 80061ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061be:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 80061c0:	4b83      	ldr	r3, [pc, #524]	; (80063d0 <LCD_Init+0x3c18>)
 80061c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061c6:	611a      	str	r2, [r3, #16]
 80061c8:	4b81      	ldr	r3, [pc, #516]	; (80063d0 <LCD_Init+0x3c18>)
 80061ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061ce:	615a      	str	r2, [r3, #20]
 80061d0:	4b80      	ldr	r3, [pc, #512]	; (80063d4 <LCD_Init+0x3c1c>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	60da      	str	r2, [r3, #12]
 80061d6:	4b7e      	ldr	r3, [pc, #504]	; (80063d0 <LCD_Init+0x3c18>)
 80061d8:	2280      	movs	r2, #128	; 0x80
 80061da:	615a      	str	r2, [r3, #20]
 80061dc:	4b7c      	ldr	r3, [pc, #496]	; (80063d0 <LCD_Init+0x3c18>)
 80061de:	2280      	movs	r2, #128	; 0x80
 80061e0:	611a      	str	r2, [r3, #16]
 80061e2:	4b7b      	ldr	r3, [pc, #492]	; (80063d0 <LCD_Init+0x3c18>)
 80061e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061e8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 80061ea:	4b79      	ldr	r3, [pc, #484]	; (80063d0 <LCD_Init+0x3c18>)
 80061ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061f0:	611a      	str	r2, [r3, #16]
 80061f2:	4b77      	ldr	r3, [pc, #476]	; (80063d0 <LCD_Init+0x3c18>)
 80061f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061f8:	615a      	str	r2, [r3, #20]
 80061fa:	4b76      	ldr	r3, [pc, #472]	; (80063d4 <LCD_Init+0x3c1c>)
 80061fc:	222e      	movs	r2, #46	; 0x2e
 80061fe:	60da      	str	r2, [r3, #12]
 8006200:	4b73      	ldr	r3, [pc, #460]	; (80063d0 <LCD_Init+0x3c18>)
 8006202:	2280      	movs	r2, #128	; 0x80
 8006204:	615a      	str	r2, [r3, #20]
 8006206:	4b72      	ldr	r3, [pc, #456]	; (80063d0 <LCD_Init+0x3c18>)
 8006208:	2280      	movs	r2, #128	; 0x80
 800620a:	611a      	str	r2, [r3, #16]
 800620c:	4b70      	ldr	r3, [pc, #448]	; (80063d0 <LCD_Init+0x3c18>)
 800620e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006212:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8006214:	4b6e      	ldr	r3, [pc, #440]	; (80063d0 <LCD_Init+0x3c18>)
 8006216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800621a:	611a      	str	r2, [r3, #16]
 800621c:	4b6c      	ldr	r3, [pc, #432]	; (80063d0 <LCD_Init+0x3c18>)
 800621e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006222:	615a      	str	r2, [r3, #20]
 8006224:	4b6b      	ldr	r3, [pc, #428]	; (80063d4 <LCD_Init+0x3c1c>)
 8006226:	2200      	movs	r2, #0
 8006228:	60da      	str	r2, [r3, #12]
 800622a:	4b69      	ldr	r3, [pc, #420]	; (80063d0 <LCD_Init+0x3c18>)
 800622c:	2280      	movs	r2, #128	; 0x80
 800622e:	615a      	str	r2, [r3, #20]
 8006230:	4b67      	ldr	r3, [pc, #412]	; (80063d0 <LCD_Init+0x3c18>)
 8006232:	2280      	movs	r2, #128	; 0x80
 8006234:	611a      	str	r2, [r3, #16]
 8006236:	4b66      	ldr	r3, [pc, #408]	; (80063d0 <LCD_Init+0x3c18>)
 8006238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800623c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 800623e:	4b64      	ldr	r3, [pc, #400]	; (80063d0 <LCD_Init+0x3c18>)
 8006240:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006244:	611a      	str	r2, [r3, #16]
 8006246:	4b62      	ldr	r3, [pc, #392]	; (80063d0 <LCD_Init+0x3c18>)
 8006248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800624c:	615a      	str	r2, [r3, #20]
 800624e:	4b61      	ldr	r3, [pc, #388]	; (80063d4 <LCD_Init+0x3c1c>)
 8006250:	2200      	movs	r2, #0
 8006252:	60da      	str	r2, [r3, #12]
 8006254:	4b5e      	ldr	r3, [pc, #376]	; (80063d0 <LCD_Init+0x3c18>)
 8006256:	2280      	movs	r2, #128	; 0x80
 8006258:	615a      	str	r2, [r3, #20]
 800625a:	4b5d      	ldr	r3, [pc, #372]	; (80063d0 <LCD_Init+0x3c18>)
 800625c:	2280      	movs	r2, #128	; 0x80
 800625e:	611a      	str	r2, [r3, #16]
 8006260:	4b5b      	ldr	r3, [pc, #364]	; (80063d0 <LCD_Init+0x3c18>)
 8006262:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006266:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8006268:	4b59      	ldr	r3, [pc, #356]	; (80063d0 <LCD_Init+0x3c18>)
 800626a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800626e:	611a      	str	r2, [r3, #16]
 8006270:	4b57      	ldr	r3, [pc, #348]	; (80063d0 <LCD_Init+0x3c18>)
 8006272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006276:	615a      	str	r2, [r3, #20]
 8006278:	4b56      	ldr	r3, [pc, #344]	; (80063d4 <LCD_Init+0x3c1c>)
 800627a:	2200      	movs	r2, #0
 800627c:	60da      	str	r2, [r3, #12]
 800627e:	4b54      	ldr	r3, [pc, #336]	; (80063d0 <LCD_Init+0x3c18>)
 8006280:	2280      	movs	r2, #128	; 0x80
 8006282:	615a      	str	r2, [r3, #20]
 8006284:	4b52      	ldr	r3, [pc, #328]	; (80063d0 <LCD_Init+0x3c18>)
 8006286:	2280      	movs	r2, #128	; 0x80
 8006288:	611a      	str	r2, [r3, #16]
 800628a:	4b51      	ldr	r3, [pc, #324]	; (80063d0 <LCD_Init+0x3c18>)
 800628c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006290:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8006292:	4b4f      	ldr	r3, [pc, #316]	; (80063d0 <LCD_Init+0x3c18>)
 8006294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006298:	611a      	str	r2, [r3, #16]
 800629a:	4b4d      	ldr	r3, [pc, #308]	; (80063d0 <LCD_Init+0x3c18>)
 800629c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062a0:	615a      	str	r2, [r3, #20]
 80062a2:	4b4c      	ldr	r3, [pc, #304]	; (80063d4 <LCD_Init+0x3c1c>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	60da      	str	r2, [r3, #12]
 80062a8:	4b49      	ldr	r3, [pc, #292]	; (80063d0 <LCD_Init+0x3c18>)
 80062aa:	2280      	movs	r2, #128	; 0x80
 80062ac:	615a      	str	r2, [r3, #20]
 80062ae:	4b48      	ldr	r3, [pc, #288]	; (80063d0 <LCD_Init+0x3c18>)
 80062b0:	2280      	movs	r2, #128	; 0x80
 80062b2:	611a      	str	r2, [r3, #16]
 80062b4:	4b46      	ldr	r3, [pc, #280]	; (80063d0 <LCD_Init+0x3c18>)
 80062b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062ba:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 80062bc:	20b6      	movs	r0, #182	; 0xb6
 80062be:	f7fa ff55 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 80062c2:	4b43      	ldr	r3, [pc, #268]	; (80063d0 <LCD_Init+0x3c18>)
 80062c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062c8:	611a      	str	r2, [r3, #16]
 80062ca:	4b41      	ldr	r3, [pc, #260]	; (80063d0 <LCD_Init+0x3c18>)
 80062cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062d0:	615a      	str	r2, [r3, #20]
 80062d2:	4b40      	ldr	r3, [pc, #256]	; (80063d4 <LCD_Init+0x3c1c>)
 80062d4:	2202      	movs	r2, #2
 80062d6:	60da      	str	r2, [r3, #12]
 80062d8:	4b3d      	ldr	r3, [pc, #244]	; (80063d0 <LCD_Init+0x3c18>)
 80062da:	2280      	movs	r2, #128	; 0x80
 80062dc:	615a      	str	r2, [r3, #20]
 80062de:	4b3c      	ldr	r3, [pc, #240]	; (80063d0 <LCD_Init+0x3c18>)
 80062e0:	2280      	movs	r2, #128	; 0x80
 80062e2:	611a      	str	r2, [r3, #16]
 80062e4:	4b3a      	ldr	r3, [pc, #232]	; (80063d0 <LCD_Init+0x3c18>)
 80062e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062ea:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 80062ec:	4b38      	ldr	r3, [pc, #224]	; (80063d0 <LCD_Init+0x3c18>)
 80062ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062f2:	611a      	str	r2, [r3, #16]
 80062f4:	4b36      	ldr	r3, [pc, #216]	; (80063d0 <LCD_Init+0x3c18>)
 80062f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062fa:	615a      	str	r2, [r3, #20]
 80062fc:	4b35      	ldr	r3, [pc, #212]	; (80063d4 <LCD_Init+0x3c1c>)
 80062fe:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8006302:	60da      	str	r2, [r3, #12]
 8006304:	4b32      	ldr	r3, [pc, #200]	; (80063d0 <LCD_Init+0x3c18>)
 8006306:	2280      	movs	r2, #128	; 0x80
 8006308:	615a      	str	r2, [r3, #20]
 800630a:	4b31      	ldr	r3, [pc, #196]	; (80063d0 <LCD_Init+0x3c18>)
 800630c:	2280      	movs	r2, #128	; 0x80
 800630e:	611a      	str	r2, [r3, #16]
 8006310:	4b2f      	ldr	r3, [pc, #188]	; (80063d0 <LCD_Init+0x3c18>)
 8006312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006316:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8006318:	4b2d      	ldr	r3, [pc, #180]	; (80063d0 <LCD_Init+0x3c18>)
 800631a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800631e:	611a      	str	r2, [r3, #16]
 8006320:	4b2b      	ldr	r3, [pc, #172]	; (80063d0 <LCD_Init+0x3c18>)
 8006322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006326:	615a      	str	r2, [r3, #20]
 8006328:	4b2a      	ldr	r3, [pc, #168]	; (80063d4 <LCD_Init+0x3c1c>)
 800632a:	2200      	movs	r2, #0
 800632c:	60da      	str	r2, [r3, #12]
 800632e:	4b28      	ldr	r3, [pc, #160]	; (80063d0 <LCD_Init+0x3c18>)
 8006330:	2280      	movs	r2, #128	; 0x80
 8006332:	615a      	str	r2, [r3, #20]
 8006334:	4b26      	ldr	r3, [pc, #152]	; (80063d0 <LCD_Init+0x3c18>)
 8006336:	2280      	movs	r2, #128	; 0x80
 8006338:	611a      	str	r2, [r3, #16]
 800633a:	4b25      	ldr	r3, [pc, #148]	; (80063d0 <LCD_Init+0x3c18>)
 800633c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006340:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8006342:	4b23      	ldr	r3, [pc, #140]	; (80063d0 <LCD_Init+0x3c18>)
 8006344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006348:	611a      	str	r2, [r3, #16]
 800634a:	4b21      	ldr	r3, [pc, #132]	; (80063d0 <LCD_Init+0x3c18>)
 800634c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006350:	615a      	str	r2, [r3, #20]
 8006352:	4b20      	ldr	r3, [pc, #128]	; (80063d4 <LCD_Init+0x3c1c>)
 8006354:	2217      	movs	r2, #23
 8006356:	60da      	str	r2, [r3, #12]
 8006358:	4b1d      	ldr	r3, [pc, #116]	; (80063d0 <LCD_Init+0x3c18>)
 800635a:	2280      	movs	r2, #128	; 0x80
 800635c:	615a      	str	r2, [r3, #20]
 800635e:	4b1c      	ldr	r3, [pc, #112]	; (80063d0 <LCD_Init+0x3c18>)
 8006360:	2280      	movs	r2, #128	; 0x80
 8006362:	611a      	str	r2, [r3, #16]
 8006364:	4b1a      	ldr	r3, [pc, #104]	; (80063d0 <LCD_Init+0x3c18>)
 8006366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800636a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 800636c:	4b18      	ldr	r3, [pc, #96]	; (80063d0 <LCD_Init+0x3c18>)
 800636e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006372:	611a      	str	r2, [r3, #16]
 8006374:	4b16      	ldr	r3, [pc, #88]	; (80063d0 <LCD_Init+0x3c18>)
 8006376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800637a:	615a      	str	r2, [r3, #20]
 800637c:	4b15      	ldr	r3, [pc, #84]	; (80063d4 <LCD_Init+0x3c1c>)
 800637e:	2215      	movs	r2, #21
 8006380:	60da      	str	r2, [r3, #12]
 8006382:	4b13      	ldr	r3, [pc, #76]	; (80063d0 <LCD_Init+0x3c18>)
 8006384:	2280      	movs	r2, #128	; 0x80
 8006386:	615a      	str	r2, [r3, #20]
 8006388:	4b11      	ldr	r3, [pc, #68]	; (80063d0 <LCD_Init+0x3c18>)
 800638a:	2280      	movs	r2, #128	; 0x80
 800638c:	611a      	str	r2, [r3, #16]
 800638e:	4b10      	ldr	r3, [pc, #64]	; (80063d0 <LCD_Init+0x3c18>)
 8006390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006394:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8006396:	4b0e      	ldr	r3, [pc, #56]	; (80063d0 <LCD_Init+0x3c18>)
 8006398:	f44f 7280 	mov.w	r2, #256	; 0x100
 800639c:	611a      	str	r2, [r3, #16]
 800639e:	4b0c      	ldr	r3, [pc, #48]	; (80063d0 <LCD_Init+0x3c18>)
 80063a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063a4:	615a      	str	r2, [r3, #20]
 80063a6:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <LCD_Init+0x3c1c>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	60da      	str	r2, [r3, #12]
 80063ac:	4b08      	ldr	r3, [pc, #32]	; (80063d0 <LCD_Init+0x3c18>)
 80063ae:	2280      	movs	r2, #128	; 0x80
 80063b0:	615a      	str	r2, [r3, #20]
 80063b2:	4b07      	ldr	r3, [pc, #28]	; (80063d0 <LCD_Init+0x3c18>)
 80063b4:	2280      	movs	r2, #128	; 0x80
 80063b6:	611a      	str	r2, [r3, #16]
 80063b8:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <LCD_Init+0x3c18>)
 80063ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063be:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80063c0:	4b03      	ldr	r3, [pc, #12]	; (80063d0 <LCD_Init+0x3c18>)
 80063c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063c6:	611a      	str	r2, [r3, #16]
 80063c8:	4b01      	ldr	r3, [pc, #4]	; (80063d0 <LCD_Init+0x3c18>)
 80063ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ce:	e003      	b.n	80063d8 <LCD_Init+0x3c20>
 80063d0:	40011000 	.word	0x40011000
 80063d4:	40010c00 	.word	0x40010c00
 80063d8:	615a      	str	r2, [r3, #20]
 80063da:	4b8b      	ldr	r3, [pc, #556]	; (8006608 <LCD_Init+0x3e50>)
 80063dc:	2200      	movs	r2, #0
 80063de:	60da      	str	r2, [r3, #12]
 80063e0:	4b8a      	ldr	r3, [pc, #552]	; (800660c <LCD_Init+0x3e54>)
 80063e2:	2280      	movs	r2, #128	; 0x80
 80063e4:	615a      	str	r2, [r3, #20]
 80063e6:	4b89      	ldr	r3, [pc, #548]	; (800660c <LCD_Init+0x3e54>)
 80063e8:	2280      	movs	r2, #128	; 0x80
 80063ea:	611a      	str	r2, [r3, #16]
 80063ec:	4b87      	ldr	r3, [pc, #540]	; (800660c <LCD_Init+0x3e54>)
 80063ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063f2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 80063f4:	20f0      	movs	r0, #240	; 0xf0
 80063f6:	f7fa feb9 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 80063fa:	4b84      	ldr	r3, [pc, #528]	; (800660c <LCD_Init+0x3e54>)
 80063fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006400:	611a      	str	r2, [r3, #16]
 8006402:	4b82      	ldr	r3, [pc, #520]	; (800660c <LCD_Init+0x3e54>)
 8006404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006408:	615a      	str	r2, [r3, #20]
 800640a:	4b7f      	ldr	r3, [pc, #508]	; (8006608 <LCD_Init+0x3e50>)
 800640c:	2203      	movs	r2, #3
 800640e:	60da      	str	r2, [r3, #12]
 8006410:	4b7e      	ldr	r3, [pc, #504]	; (800660c <LCD_Init+0x3e54>)
 8006412:	2280      	movs	r2, #128	; 0x80
 8006414:	615a      	str	r2, [r3, #20]
 8006416:	4b7d      	ldr	r3, [pc, #500]	; (800660c <LCD_Init+0x3e54>)
 8006418:	2280      	movs	r2, #128	; 0x80
 800641a:	611a      	str	r2, [r3, #16]
 800641c:	4b7b      	ldr	r3, [pc, #492]	; (800660c <LCD_Init+0x3e54>)
 800641e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006422:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8006424:	2029      	movs	r0, #41	; 0x29
 8006426:	f7fa fea1 	bl	800116c <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 800642a:	20d0      	movs	r0, #208	; 0xd0
 800642c:	f7fa fe9e 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8006430:	4b76      	ldr	r3, [pc, #472]	; (800660c <LCD_Init+0x3e54>)
 8006432:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006436:	611a      	str	r2, [r3, #16]
 8006438:	4b74      	ldr	r3, [pc, #464]	; (800660c <LCD_Init+0x3e54>)
 800643a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800643e:	615a      	str	r2, [r3, #20]
 8006440:	4b71      	ldr	r3, [pc, #452]	; (8006608 <LCD_Init+0x3e50>)
 8006442:	2200      	movs	r2, #0
 8006444:	60da      	str	r2, [r3, #12]
 8006446:	4b71      	ldr	r3, [pc, #452]	; (800660c <LCD_Init+0x3e54>)
 8006448:	2280      	movs	r2, #128	; 0x80
 800644a:	615a      	str	r2, [r3, #20]
 800644c:	4b6f      	ldr	r3, [pc, #444]	; (800660c <LCD_Init+0x3e54>)
 800644e:	2280      	movs	r2, #128	; 0x80
 8006450:	611a      	str	r2, [r3, #16]
 8006452:	4b6e      	ldr	r3, [pc, #440]	; (800660c <LCD_Init+0x3e54>)
 8006454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006458:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 800645a:	20be      	movs	r0, #190	; 0xbe
 800645c:	f7fa fe86 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8006460:	4b6a      	ldr	r3, [pc, #424]	; (800660c <LCD_Init+0x3e54>)
 8006462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006466:	611a      	str	r2, [r3, #16]
 8006468:	4b68      	ldr	r3, [pc, #416]	; (800660c <LCD_Init+0x3e54>)
 800646a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800646e:	615a      	str	r2, [r3, #20]
 8006470:	4b65      	ldr	r3, [pc, #404]	; (8006608 <LCD_Init+0x3e50>)
 8006472:	2205      	movs	r2, #5
 8006474:	60da      	str	r2, [r3, #12]
 8006476:	4b65      	ldr	r3, [pc, #404]	; (800660c <LCD_Init+0x3e54>)
 8006478:	2280      	movs	r2, #128	; 0x80
 800647a:	615a      	str	r2, [r3, #20]
 800647c:	4b63      	ldr	r3, [pc, #396]	; (800660c <LCD_Init+0x3e54>)
 800647e:	2280      	movs	r2, #128	; 0x80
 8006480:	611a      	str	r2, [r3, #16]
 8006482:	4b62      	ldr	r3, [pc, #392]	; (800660c <LCD_Init+0x3e54>)
 8006484:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006488:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 800648a:	4b60      	ldr	r3, [pc, #384]	; (800660c <LCD_Init+0x3e54>)
 800648c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006490:	611a      	str	r2, [r3, #16]
 8006492:	4b5e      	ldr	r3, [pc, #376]	; (800660c <LCD_Init+0x3e54>)
 8006494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006498:	615a      	str	r2, [r3, #20]
 800649a:	4b5b      	ldr	r3, [pc, #364]	; (8006608 <LCD_Init+0x3e50>)
 800649c:	22fe      	movs	r2, #254	; 0xfe
 800649e:	60da      	str	r2, [r3, #12]
 80064a0:	4b5a      	ldr	r3, [pc, #360]	; (800660c <LCD_Init+0x3e54>)
 80064a2:	2280      	movs	r2, #128	; 0x80
 80064a4:	615a      	str	r2, [r3, #20]
 80064a6:	4b59      	ldr	r3, [pc, #356]	; (800660c <LCD_Init+0x3e54>)
 80064a8:	2280      	movs	r2, #128	; 0x80
 80064aa:	611a      	str	r2, [r3, #16]
 80064ac:	4b57      	ldr	r3, [pc, #348]	; (800660c <LCD_Init+0x3e54>)
 80064ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064b2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 80064b4:	4b55      	ldr	r3, [pc, #340]	; (800660c <LCD_Init+0x3e54>)
 80064b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064ba:	611a      	str	r2, [r3, #16]
 80064bc:	4b53      	ldr	r3, [pc, #332]	; (800660c <LCD_Init+0x3e54>)
 80064be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064c2:	615a      	str	r2, [r3, #20]
 80064c4:	4b50      	ldr	r3, [pc, #320]	; (8006608 <LCD_Init+0x3e50>)
 80064c6:	2201      	movs	r2, #1
 80064c8:	60da      	str	r2, [r3, #12]
 80064ca:	4b50      	ldr	r3, [pc, #320]	; (800660c <LCD_Init+0x3e54>)
 80064cc:	2280      	movs	r2, #128	; 0x80
 80064ce:	615a      	str	r2, [r3, #20]
 80064d0:	4b4e      	ldr	r3, [pc, #312]	; (800660c <LCD_Init+0x3e54>)
 80064d2:	2280      	movs	r2, #128	; 0x80
 80064d4:	611a      	str	r2, [r3, #16]
 80064d6:	4b4d      	ldr	r3, [pc, #308]	; (800660c <LCD_Init+0x3e54>)
 80064d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064dc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 80064de:	4b4b      	ldr	r3, [pc, #300]	; (800660c <LCD_Init+0x3e54>)
 80064e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064e4:	611a      	str	r2, [r3, #16]
 80064e6:	4b49      	ldr	r3, [pc, #292]	; (800660c <LCD_Init+0x3e54>)
 80064e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064ec:	615a      	str	r2, [r3, #20]
 80064ee:	4b46      	ldr	r3, [pc, #280]	; (8006608 <LCD_Init+0x3e50>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	60da      	str	r2, [r3, #12]
 80064f4:	4b45      	ldr	r3, [pc, #276]	; (800660c <LCD_Init+0x3e54>)
 80064f6:	2280      	movs	r2, #128	; 0x80
 80064f8:	615a      	str	r2, [r3, #20]
 80064fa:	4b44      	ldr	r3, [pc, #272]	; (800660c <LCD_Init+0x3e54>)
 80064fc:	2280      	movs	r2, #128	; 0x80
 80064fe:	611a      	str	r2, [r3, #16]
 8006500:	4b42      	ldr	r3, [pc, #264]	; (800660c <LCD_Init+0x3e54>)
 8006502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006506:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8006508:	4b40      	ldr	r3, [pc, #256]	; (800660c <LCD_Init+0x3e54>)
 800650a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800650e:	611a      	str	r2, [r3, #16]
 8006510:	4b3e      	ldr	r3, [pc, #248]	; (800660c <LCD_Init+0x3e54>)
 8006512:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006516:	615a      	str	r2, [r3, #20]
 8006518:	4b3b      	ldr	r3, [pc, #236]	; (8006608 <LCD_Init+0x3e50>)
 800651a:	2200      	movs	r2, #0
 800651c:	60da      	str	r2, [r3, #12]
 800651e:	4b3b      	ldr	r3, [pc, #236]	; (800660c <LCD_Init+0x3e54>)
 8006520:	2280      	movs	r2, #128	; 0x80
 8006522:	615a      	str	r2, [r3, #20]
 8006524:	4b39      	ldr	r3, [pc, #228]	; (800660c <LCD_Init+0x3e54>)
 8006526:	2280      	movs	r2, #128	; 0x80
 8006528:	611a      	str	r2, [r3, #16]
 800652a:	4b38      	ldr	r3, [pc, #224]	; (800660c <LCD_Init+0x3e54>)
 800652c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006530:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8006532:	4b36      	ldr	r3, [pc, #216]	; (800660c <LCD_Init+0x3e54>)
 8006534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006538:	611a      	str	r2, [r3, #16]
 800653a:	4b34      	ldr	r3, [pc, #208]	; (800660c <LCD_Init+0x3e54>)
 800653c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006540:	615a      	str	r2, [r3, #20]
 8006542:	4b31      	ldr	r3, [pc, #196]	; (8006608 <LCD_Init+0x3e50>)
 8006544:	2200      	movs	r2, #0
 8006546:	60da      	str	r2, [r3, #12]
 8006548:	4b30      	ldr	r3, [pc, #192]	; (800660c <LCD_Init+0x3e54>)
 800654a:	2280      	movs	r2, #128	; 0x80
 800654c:	615a      	str	r2, [r3, #20]
 800654e:	4b2f      	ldr	r3, [pc, #188]	; (800660c <LCD_Init+0x3e54>)
 8006550:	2280      	movs	r2, #128	; 0x80
 8006552:	611a      	str	r2, [r3, #16]
 8006554:	4b2d      	ldr	r3, [pc, #180]	; (800660c <LCD_Init+0x3e54>)
 8006556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800655a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 800655c:	20b8      	movs	r0, #184	; 0xb8
 800655e:	f7fa fe05 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8006562:	4b2a      	ldr	r3, [pc, #168]	; (800660c <LCD_Init+0x3e54>)
 8006564:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006568:	611a      	str	r2, [r3, #16]
 800656a:	4b28      	ldr	r3, [pc, #160]	; (800660c <LCD_Init+0x3e54>)
 800656c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006570:	615a      	str	r2, [r3, #20]
 8006572:	4b25      	ldr	r3, [pc, #148]	; (8006608 <LCD_Init+0x3e50>)
 8006574:	2203      	movs	r2, #3
 8006576:	60da      	str	r2, [r3, #12]
 8006578:	4b24      	ldr	r3, [pc, #144]	; (800660c <LCD_Init+0x3e54>)
 800657a:	2280      	movs	r2, #128	; 0x80
 800657c:	615a      	str	r2, [r3, #20]
 800657e:	4b23      	ldr	r3, [pc, #140]	; (800660c <LCD_Init+0x3e54>)
 8006580:	2280      	movs	r2, #128	; 0x80
 8006582:	611a      	str	r2, [r3, #16]
 8006584:	4b21      	ldr	r3, [pc, #132]	; (800660c <LCD_Init+0x3e54>)
 8006586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800658a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 800658c:	4b1f      	ldr	r3, [pc, #124]	; (800660c <LCD_Init+0x3e54>)
 800658e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006592:	611a      	str	r2, [r3, #16]
 8006594:	4b1d      	ldr	r3, [pc, #116]	; (800660c <LCD_Init+0x3e54>)
 8006596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800659a:	615a      	str	r2, [r3, #20]
 800659c:	4b1a      	ldr	r3, [pc, #104]	; (8006608 <LCD_Init+0x3e50>)
 800659e:	2201      	movs	r2, #1
 80065a0:	60da      	str	r2, [r3, #12]
 80065a2:	4b1a      	ldr	r3, [pc, #104]	; (800660c <LCD_Init+0x3e54>)
 80065a4:	2280      	movs	r2, #128	; 0x80
 80065a6:	615a      	str	r2, [r3, #20]
 80065a8:	4b18      	ldr	r3, [pc, #96]	; (800660c <LCD_Init+0x3e54>)
 80065aa:	2280      	movs	r2, #128	; 0x80
 80065ac:	611a      	str	r2, [r3, #16]
 80065ae:	4b17      	ldr	r3, [pc, #92]	; (800660c <LCD_Init+0x3e54>)
 80065b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065b4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 80065b6:	20ba      	movs	r0, #186	; 0xba
 80065b8:	f7fa fdd8 	bl	800116c <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 80065bc:	4b13      	ldr	r3, [pc, #76]	; (800660c <LCD_Init+0x3e54>)
 80065be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065c2:	611a      	str	r2, [r3, #16]
 80065c4:	4b11      	ldr	r3, [pc, #68]	; (800660c <LCD_Init+0x3e54>)
 80065c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ca:	615a      	str	r2, [r3, #20]
 80065cc:	4b0e      	ldr	r3, [pc, #56]	; (8006608 <LCD_Init+0x3e50>)
 80065ce:	2201      	movs	r2, #1
 80065d0:	60da      	str	r2, [r3, #12]
 80065d2:	4b0e      	ldr	r3, [pc, #56]	; (800660c <LCD_Init+0x3e54>)
 80065d4:	2280      	movs	r2, #128	; 0x80
 80065d6:	615a      	str	r2, [r3, #20]
 80065d8:	4b0c      	ldr	r3, [pc, #48]	; (800660c <LCD_Init+0x3e54>)
 80065da:	2280      	movs	r2, #128	; 0x80
 80065dc:	611a      	str	r2, [r3, #16]
 80065de:	4b0b      	ldr	r3, [pc, #44]	; (800660c <LCD_Init+0x3e54>)
 80065e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065e4:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 80065e6:	2064      	movs	r0, #100	; 0x64
 80065e8:	f7fb ff36 	bl	8002458 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 80065ec:	2000      	movs	r0, #0
 80065ee:	f7fb ffd7 	bl	80025a0 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 80065f2:	4b07      	ldr	r3, [pc, #28]	; (8006610 <LCD_Init+0x3e58>)
 80065f4:	2201      	movs	r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 80065f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80065fc:	f000 f80a 	bl	8006614 <LCD_Clear>
}
 8006600:	bf00      	nop
 8006602:	3718      	adds	r7, #24
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	40010c00 	.word	0x40010c00
 800660c:	40011000 	.word	0x40011000
 8006610:	422201a8 	.word	0x422201a8

08006614 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	4603      	mov	r3, r0
 800661c:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 800661e:	2300      	movs	r3, #0
 8006620:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8006622:	4b2a      	ldr	r3, [pc, #168]	; (80066cc <LCD_Clear+0xb8>)
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8006628:	4b28      	ldr	r3, [pc, #160]	; (80066cc <LCD_Clear+0xb8>)
 800662a:	885b      	ldrh	r3, [r3, #2]
 800662c:	461a      	mov	r2, r3
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	fb02 f303 	mul.w	r3, r2, r3
 8006634:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8006636:	4b25      	ldr	r3, [pc, #148]	; (80066cc <LCD_Clear+0xb8>)
 8006638:	889b      	ldrh	r3, [r3, #4]
 800663a:	f646 0204 	movw	r2, #26628	; 0x6804
 800663e:	4293      	cmp	r3, r2
 8006640:	d11a      	bne.n	8006678 <LCD_Clear+0x64>
 8006642:	4b22      	ldr	r3, [pc, #136]	; (80066cc <LCD_Clear+0xb8>)
 8006644:	799b      	ldrb	r3, [r3, #6]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d116      	bne.n	8006678 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 800664a:	4b20      	ldr	r3, [pc, #128]	; (80066cc <LCD_Clear+0xb8>)
 800664c:	2200      	movs	r2, #0
 800664e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8006650:	4b1e      	ldr	r3, [pc, #120]	; (80066cc <LCD_Clear+0xb8>)
 8006652:	222a      	movs	r2, #42	; 0x2a
 8006654:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8006656:	4b1d      	ldr	r3, [pc, #116]	; (80066cc <LCD_Clear+0xb8>)
 8006658:	222b      	movs	r2, #43	; 0x2b
 800665a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 800665c:	2100      	movs	r1, #0
 800665e:	2000      	movs	r0, #0
 8006660:	f7fa fe56 	bl	8001310 <LCD_SetCursor>
		lcddev.dir = 1;
 8006664:	4b19      	ldr	r3, [pc, #100]	; (80066cc <LCD_Clear+0xb8>)
 8006666:	2201      	movs	r2, #1
 8006668:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 800666a:	4b18      	ldr	r3, [pc, #96]	; (80066cc <LCD_Clear+0xb8>)
 800666c:	222b      	movs	r2, #43	; 0x2b
 800666e:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8006670:	4b16      	ldr	r3, [pc, #88]	; (80066cc <LCD_Clear+0xb8>)
 8006672:	222a      	movs	r2, #42	; 0x2a
 8006674:	819a      	strh	r2, [r3, #12]
 8006676:	e003      	b.n	8006680 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8006678:	2100      	movs	r1, #0
 800667a:	2000      	movs	r0, #0
 800667c:	f7fa fe48 	bl	8001310 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8006680:	f7fa fe3a 	bl	80012f8 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	e017      	b.n	80066ba <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 800668a:	4b11      	ldr	r3, [pc, #68]	; (80066d0 <LCD_Clear+0xbc>)
 800668c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006690:	611a      	str	r2, [r3, #16]
 8006692:	4b0f      	ldr	r3, [pc, #60]	; (80066d0 <LCD_Clear+0xbc>)
 8006694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006698:	615a      	str	r2, [r3, #20]
 800669a:	4a0e      	ldr	r2, [pc, #56]	; (80066d4 <LCD_Clear+0xc0>)
 800669c:	88fb      	ldrh	r3, [r7, #6]
 800669e:	60d3      	str	r3, [r2, #12]
 80066a0:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <LCD_Clear+0xbc>)
 80066a2:	2280      	movs	r2, #128	; 0x80
 80066a4:	615a      	str	r2, [r3, #20]
 80066a6:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <LCD_Clear+0xbc>)
 80066a8:	2280      	movs	r2, #128	; 0x80
 80066aa:	611a      	str	r2, [r3, #16]
 80066ac:	4b08      	ldr	r3, [pc, #32]	; (80066d0 <LCD_Clear+0xbc>)
 80066ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066b2:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3301      	adds	r3, #1
 80066b8:	60fb      	str	r3, [r7, #12]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d3e3      	bcc.n	800668a <LCD_Clear+0x76>
}
 80066c2:	bf00      	nop
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	200004b0 	.word	0x200004b0
 80066d0:	40011000 	.word	0x40011000
 80066d4:	40010c00 	.word	0x40010c00

080066d8 <LCD_Fill>:
// Fill the area with color
// :(xend-xsta+1)*(yend-ysta+1)
void LCD_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t color) {
 80066d8:	b590      	push	{r4, r7, lr}
 80066da:	b087      	sub	sp, #28
 80066dc:	af02      	add	r7, sp, #8
 80066de:	4604      	mov	r4, r0
 80066e0:	4608      	mov	r0, r1
 80066e2:	4611      	mov	r1, r2
 80066e4:	461a      	mov	r2, r3
 80066e6:	4623      	mov	r3, r4
 80066e8:	80fb      	strh	r3, [r7, #6]
 80066ea:	4603      	mov	r3, r0
 80066ec:	80bb      	strh	r3, [r7, #4]
 80066ee:	460b      	mov	r3, r1
 80066f0:	807b      	strh	r3, [r7, #2]
 80066f2:	4613      	mov	r3, r2
 80066f4:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	uint16_t xlen = 0;
 80066f6:	2300      	movs	r3, #0
 80066f8:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1))	//6804横屏的时候特殊处理
 80066fa:	4b3a      	ldr	r3, [pc, #232]	; (80067e4 <LCD_Fill+0x10c>)
 80066fc:	889b      	ldrh	r3, [r3, #4]
 80066fe:	f646 0204 	movw	r2, #26628	; 0x6804
 8006702:	4293      	cmp	r3, r2
 8006704:	d133      	bne.n	800676e <LCD_Fill+0x96>
 8006706:	4b37      	ldr	r3, [pc, #220]	; (80067e4 <LCD_Fill+0x10c>)
 8006708:	799b      	ldrb	r3, [r3, #6]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d12f      	bne.n	800676e <LCD_Fill+0x96>
			{
		temp = sx;
 800670e:	88fb      	ldrh	r3, [r7, #6]
 8006710:	813b      	strh	r3, [r7, #8]
		sx = sy;
 8006712:	88bb      	ldrh	r3, [r7, #4]
 8006714:	80fb      	strh	r3, [r7, #6]
		sy = lcddev.width - ex - 1;
 8006716:	4b33      	ldr	r3, [pc, #204]	; (80067e4 <LCD_Fill+0x10c>)
 8006718:	881a      	ldrh	r2, [r3, #0]
 800671a:	887b      	ldrh	r3, [r7, #2]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	b29b      	uxth	r3, r3
 8006720:	3b01      	subs	r3, #1
 8006722:	80bb      	strh	r3, [r7, #4]
		ex = ey;
 8006724:	883b      	ldrh	r3, [r7, #0]
 8006726:	807b      	strh	r3, [r7, #2]
		ey = lcddev.width - temp - 1;
 8006728:	4b2e      	ldr	r3, [pc, #184]	; (80067e4 <LCD_Fill+0x10c>)
 800672a:	881a      	ldrh	r2, [r3, #0]
 800672c:	893b      	ldrh	r3, [r7, #8]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	b29b      	uxth	r3, r3
 8006732:	3b01      	subs	r3, #1
 8006734:	803b      	strh	r3, [r7, #0]
		lcddev.dir = 0;
 8006736:	4b2b      	ldr	r3, [pc, #172]	; (80067e4 <LCD_Fill+0x10c>)
 8006738:	2200      	movs	r2, #0
 800673a:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 800673c:	4b29      	ldr	r3, [pc, #164]	; (80067e4 <LCD_Fill+0x10c>)
 800673e:	222a      	movs	r2, #42	; 0x2a
 8006740:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8006742:	4b28      	ldr	r3, [pc, #160]	; (80067e4 <LCD_Fill+0x10c>)
 8006744:	222b      	movs	r2, #43	; 0x2b
 8006746:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx, sy, ex, ey, color);
 8006748:	883c      	ldrh	r4, [r7, #0]
 800674a:	887a      	ldrh	r2, [r7, #2]
 800674c:	88b9      	ldrh	r1, [r7, #4]
 800674e:	88f8      	ldrh	r0, [r7, #6]
 8006750:	8c3b      	ldrh	r3, [r7, #32]
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	4623      	mov	r3, r4
 8006756:	f7ff ffbf 	bl	80066d8 <LCD_Fill>
		lcddev.dir = 1;
 800675a:	4b22      	ldr	r3, [pc, #136]	; (80067e4 <LCD_Fill+0x10c>)
 800675c:	2201      	movs	r2, #1
 800675e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8006760:	4b20      	ldr	r3, [pc, #128]	; (80067e4 <LCD_Fill+0x10c>)
 8006762:	222b      	movs	r2, #43	; 0x2b
 8006764:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8006766:	4b1f      	ldr	r3, [pc, #124]	; (80067e4 <LCD_Fill+0x10c>)
 8006768:	222a      	movs	r2, #42	; 0x2a
 800676a:	819a      	strh	r2, [r3, #12]
 800676c:	e036      	b.n	80067dc <LCD_Fill+0x104>
	} else {
		xlen = ex - sx + 1;
 800676e:	887a      	ldrh	r2, [r7, #2]
 8006770:	88fb      	ldrh	r3, [r7, #6]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	b29b      	uxth	r3, r3
 8006776:	3301      	adds	r3, #1
 8006778:	817b      	strh	r3, [r7, #10]
		for (i = sy; i <= ey; i++) {
 800677a:	88bb      	ldrh	r3, [r7, #4]
 800677c:	81fb      	strh	r3, [r7, #14]
 800677e:	e029      	b.n	80067d4 <LCD_Fill+0xfc>
			LCD_SetCursor(sx, i);      				//设置光标位置
 8006780:	89fa      	ldrh	r2, [r7, #14]
 8006782:	88fb      	ldrh	r3, [r7, #6]
 8006784:	4611      	mov	r1, r2
 8006786:	4618      	mov	r0, r3
 8006788:	f7fa fdc2 	bl	8001310 <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM	  
 800678c:	f7fa fdb4 	bl	80012f8 <LCD_WriteRAM_Prepare>
			for (j = 0; j < xlen; j++)
 8006790:	2300      	movs	r3, #0
 8006792:	81bb      	strh	r3, [r7, #12]
 8006794:	e017      	b.n	80067c6 <LCD_Fill+0xee>
				LCD_WR_DATA(color);	//设置光标位置
 8006796:	4b14      	ldr	r3, [pc, #80]	; (80067e8 <LCD_Fill+0x110>)
 8006798:	f44f 7280 	mov.w	r2, #256	; 0x100
 800679c:	611a      	str	r2, [r3, #16]
 800679e:	4b12      	ldr	r3, [pc, #72]	; (80067e8 <LCD_Fill+0x110>)
 80067a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067a4:	615a      	str	r2, [r3, #20]
 80067a6:	4a11      	ldr	r2, [pc, #68]	; (80067ec <LCD_Fill+0x114>)
 80067a8:	8c3b      	ldrh	r3, [r7, #32]
 80067aa:	60d3      	str	r3, [r2, #12]
 80067ac:	4b0e      	ldr	r3, [pc, #56]	; (80067e8 <LCD_Fill+0x110>)
 80067ae:	2280      	movs	r2, #128	; 0x80
 80067b0:	615a      	str	r2, [r3, #20]
 80067b2:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <LCD_Fill+0x110>)
 80067b4:	2280      	movs	r2, #128	; 0x80
 80067b6:	611a      	str	r2, [r3, #16]
 80067b8:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <LCD_Fill+0x110>)
 80067ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067be:	611a      	str	r2, [r3, #16]
			for (j = 0; j < xlen; j++)
 80067c0:	89bb      	ldrh	r3, [r7, #12]
 80067c2:	3301      	adds	r3, #1
 80067c4:	81bb      	strh	r3, [r7, #12]
 80067c6:	89ba      	ldrh	r2, [r7, #12]
 80067c8:	897b      	ldrh	r3, [r7, #10]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d3e3      	bcc.n	8006796 <LCD_Fill+0xbe>
		for (i = sy; i <= ey; i++) {
 80067ce:	89fb      	ldrh	r3, [r7, #14]
 80067d0:	3301      	adds	r3, #1
 80067d2:	81fb      	strh	r3, [r7, #14]
 80067d4:	89fa      	ldrh	r2, [r7, #14]
 80067d6:	883b      	ldrh	r3, [r7, #0]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d9d1      	bls.n	8006780 <LCD_Fill+0xa8>
		}
	}
}
 80067dc:	bf00      	nop
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd90      	pop	{r4, r7, pc}
 80067e4:	200004b0 	.word	0x200004b0
 80067e8:	40011000 	.word	0x40011000
 80067ec:	40010c00 	.word	0x40010c00

080067f0 <LCD_DrawLine>:
	}
}
// Draw a line
//x1,y1: coordinate of starting point
//x2,y2: coordinate of terminal point
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80067f0:	b590      	push	{r4, r7, lr}
 80067f2:	b08d      	sub	sp, #52	; 0x34
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	4604      	mov	r4, r0
 80067f8:	4608      	mov	r0, r1
 80067fa:	4611      	mov	r1, r2
 80067fc:	461a      	mov	r2, r3
 80067fe:	4623      	mov	r3, r4
 8006800:	80fb      	strh	r3, [r7, #6]
 8006802:	4603      	mov	r3, r0
 8006804:	80bb      	strh	r3, [r7, #4]
 8006806:	460b      	mov	r3, r1
 8006808:	807b      	strh	r3, [r7, #2]
 800680a:	4613      	mov	r3, r2
 800680c:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 800680e:	2300      	movs	r3, #0
 8006810:	62bb      	str	r3, [r7, #40]	; 0x28
 8006812:	2300      	movs	r3, #0
 8006814:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1; //计算坐标增量
 8006816:	887a      	ldrh	r2, [r7, #2]
 8006818:	88fb      	ldrh	r3, [r7, #6]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 800681e:	883a      	ldrh	r2, [r7, #0]
 8006820:	88bb      	ldrh	r3, [r7, #4]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8006826:	88fb      	ldrh	r3, [r7, #6]
 8006828:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 800682a:	88bb      	ldrh	r3, [r7, #4]
 800682c:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	2b00      	cmp	r3, #0
 8006832:	dd02      	ble.n	800683a <LCD_DrawLine+0x4a>
		incx = 1; //设置单步方向
 8006834:	2301      	movs	r3, #1
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	e00b      	b.n	8006852 <LCD_DrawLine+0x62>
	else if (delta_x == 0)
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d102      	bne.n	8006846 <LCD_DrawLine+0x56>
		incx = 0; //垂直线
 8006840:	2300      	movs	r3, #0
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	e005      	b.n	8006852 <LCD_DrawLine+0x62>
	else {
		incx = -1;
 8006846:	f04f 33ff 	mov.w	r3, #4294967295
 800684a:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	425b      	negs	r3, r3
 8006850:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	2b00      	cmp	r3, #0
 8006856:	dd02      	ble.n	800685e <LCD_DrawLine+0x6e>
		incy = 1;
 8006858:	2301      	movs	r3, #1
 800685a:	613b      	str	r3, [r7, #16]
 800685c:	e00b      	b.n	8006876 <LCD_DrawLine+0x86>
	else if (delta_y == 0)
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d102      	bne.n	800686a <LCD_DrawLine+0x7a>
		incy = 0; //水平线
 8006864:	2300      	movs	r3, #0
 8006866:	613b      	str	r3, [r7, #16]
 8006868:	e005      	b.n	8006876 <LCD_DrawLine+0x86>
	else {
		incy = -1;
 800686a:	f04f 33ff 	mov.w	r3, #4294967295
 800686e:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	425b      	negs	r3, r3
 8006874:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 8006876:	6a3a      	ldr	r2, [r7, #32]
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	429a      	cmp	r2, r3
 800687c:	dd02      	ble.n	8006884 <LCD_DrawLine+0x94>
		distance = delta_x; //选取基本增量坐标轴
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	e001      	b.n	8006888 <LCD_DrawLine+0x98>
	else
		distance = delta_y;
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	61bb      	str	r3, [r7, #24]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8006888:	2300      	movs	r3, #0
 800688a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800688c:	e02a      	b.n	80068e4 <LCD_DrawLine+0xf4>
			{
		LCD_DrawPoint(uRow, uCol); //画点
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	b29b      	uxth	r3, r3
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	b292      	uxth	r2, r2
 8006896:	4611      	mov	r1, r2
 8006898:	4618      	mov	r0, r3
 800689a:	f7fb fb17 	bl	8001ecc <LCD_DrawPoint>
		xerr += delta_x;
 800689e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	4413      	add	r3, r2
 80068a4:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 80068a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	4413      	add	r3, r2
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
		if (xerr > distance) {
 80068ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	dd07      	ble.n	80068c6 <LCD_DrawLine+0xd6>
			xerr -= distance;
 80068b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	4413      	add	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance) {
 80068c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	dd07      	ble.n	80068de <LCD_DrawLine+0xee>
			yerr -= distance;
 80068ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	4413      	add	r3, r2
 80068dc:	60bb      	str	r3, [r7, #8]
	for (t = 0; t <= distance + 1; t++) //画线输出
 80068de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068e0:	3301      	adds	r3, #1
 80068e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80068e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	3301      	adds	r3, #1
 80068ea:	429a      	cmp	r2, r3
 80068ec:	ddcf      	ble.n	800688e <LCD_DrawLine+0x9e>
		}
	}
}
 80068ee:	bf00      	nop
 80068f0:	3734      	adds	r7, #52	; 0x34
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd90      	pop	{r4, r7, pc}

080068f6 <LCD_DrawRectangle>:
//Draw a rectangle
//(x1,y1),(x2,y2): coordinates of the upper left point and bottom right point of a rectangle
void LCD_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80068f6:	b590      	push	{r4, r7, lr}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	4604      	mov	r4, r0
 80068fe:	4608      	mov	r0, r1
 8006900:	4611      	mov	r1, r2
 8006902:	461a      	mov	r2, r3
 8006904:	4623      	mov	r3, r4
 8006906:	80fb      	strh	r3, [r7, #6]
 8006908:	4603      	mov	r3, r0
 800690a:	80bb      	strh	r3, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	807b      	strh	r3, [r7, #2]
 8006910:	4613      	mov	r3, r2
 8006912:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1, y1, x2, y1);
 8006914:	88bb      	ldrh	r3, [r7, #4]
 8006916:	887a      	ldrh	r2, [r7, #2]
 8006918:	88b9      	ldrh	r1, [r7, #4]
 800691a:	88f8      	ldrh	r0, [r7, #6]
 800691c:	f7ff ff68 	bl	80067f0 <LCD_DrawLine>
	LCD_DrawLine(x1, y1, x1, y2);
 8006920:	883b      	ldrh	r3, [r7, #0]
 8006922:	88fa      	ldrh	r2, [r7, #6]
 8006924:	88b9      	ldrh	r1, [r7, #4]
 8006926:	88f8      	ldrh	r0, [r7, #6]
 8006928:	f7ff ff62 	bl	80067f0 <LCD_DrawLine>
	LCD_DrawLine(x1, y2, x2, y2);
 800692c:	883b      	ldrh	r3, [r7, #0]
 800692e:	887a      	ldrh	r2, [r7, #2]
 8006930:	8839      	ldrh	r1, [r7, #0]
 8006932:	88f8      	ldrh	r0, [r7, #6]
 8006934:	f7ff ff5c 	bl	80067f0 <LCD_DrawLine>
	LCD_DrawLine(x2, y1, x2, y2);
 8006938:	883b      	ldrh	r3, [r7, #0]
 800693a:	887a      	ldrh	r2, [r7, #2]
 800693c:	88b9      	ldrh	r1, [r7, #4]
 800693e:	8878      	ldrh	r0, [r7, #2]
 8006940:	f7ff ff56 	bl	80067f0 <LCD_DrawLine>
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	bd90      	pop	{r4, r7, pc}

0800694c <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 800694c:	b590      	push	{r4, r7, lr}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	4604      	mov	r4, r0
 8006954:	4608      	mov	r0, r1
 8006956:	4611      	mov	r1, r2
 8006958:	461a      	mov	r2, r3
 800695a:	4623      	mov	r3, r4
 800695c:	80fb      	strh	r3, [r7, #6]
 800695e:	4603      	mov	r3, r0
 8006960:	80bb      	strh	r3, [r7, #4]
 8006962:	460b      	mov	r3, r1
 8006964:	70fb      	strb	r3, [r7, #3]
 8006966:	4613      	mov	r3, r2
 8006968:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 800696a:	88bb      	ldrh	r3, [r7, #4]
 800696c:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 800696e:	78bb      	ldrb	r3, [r7, #2]
 8006970:	08db      	lsrs	r3, r3, #3
 8006972:	b2db      	uxtb	r3, r3
 8006974:	461a      	mov	r2, r3
 8006976:	78bb      	ldrb	r3, [r7, #2]
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	bf14      	ite	ne
 8006982:	2301      	movne	r3, #1
 8006984:	2300      	moveq	r3, #0
 8006986:	b2db      	uxtb	r3, r3
 8006988:	4413      	add	r3, r2
 800698a:	b2db      	uxtb	r3, r3
 800698c:	78ba      	ldrb	r2, [r7, #2]
 800698e:	0852      	lsrs	r2, r2, #1
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	fb02 f303 	mul.w	r3, r2, r3
 8006996:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	3b20      	subs	r3, #32
 800699c:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 800699e:	2300      	movs	r3, #0
 80069a0:	737b      	strb	r3, [r7, #13]
 80069a2:	e069      	b.n	8006a78 <LCD_ShowChar+0x12c>
		if (size == 12)
 80069a4:	78bb      	ldrb	r3, [r7, #2]
 80069a6:	2b0c      	cmp	r3, #12
 80069a8:	d10b      	bne.n	80069c2 <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 80069aa:	78fa      	ldrb	r2, [r7, #3]
 80069ac:	7b79      	ldrb	r1, [r7, #13]
 80069ae:	4838      	ldr	r0, [pc, #224]	; (8006a90 <LCD_ShowChar+0x144>)
 80069b0:	4613      	mov	r3, r2
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	4413      	add	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4403      	add	r3, r0
 80069ba:	440b      	add	r3, r1
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	73fb      	strb	r3, [r7, #15]
 80069c0:	e019      	b.n	80069f6 <LCD_ShowChar+0xaa>
		else if (size == 16)
 80069c2:	78bb      	ldrb	r3, [r7, #2]
 80069c4:	2b10      	cmp	r3, #16
 80069c6:	d108      	bne.n	80069da <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 80069c8:	78fa      	ldrb	r2, [r7, #3]
 80069ca:	7b7b      	ldrb	r3, [r7, #13]
 80069cc:	4931      	ldr	r1, [pc, #196]	; (8006a94 <LCD_ShowChar+0x148>)
 80069ce:	0112      	lsls	r2, r2, #4
 80069d0:	440a      	add	r2, r1
 80069d2:	4413      	add	r3, r2
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	73fb      	strb	r3, [r7, #15]
 80069d8:	e00d      	b.n	80069f6 <LCD_ShowChar+0xaa>
		else if (size == 24)
 80069da:	78bb      	ldrb	r3, [r7, #2]
 80069dc:	2b18      	cmp	r3, #24
 80069de:	d150      	bne.n	8006a82 <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 80069e0:	78fa      	ldrb	r2, [r7, #3]
 80069e2:	7b79      	ldrb	r1, [r7, #13]
 80069e4:	482c      	ldr	r0, [pc, #176]	; (8006a98 <LCD_ShowChar+0x14c>)
 80069e6:	4613      	mov	r3, r2
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	4413      	add	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4403      	add	r3, r0
 80069f0:	440b      	add	r3, r1
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 80069f6:	2300      	movs	r3, #0
 80069f8:	73bb      	strb	r3, [r7, #14]
 80069fa:	e035      	b.n	8006a68 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 80069fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	da07      	bge.n	8006a14 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8006a04:	4b25      	ldr	r3, [pc, #148]	; (8006a9c <LCD_ShowChar+0x150>)
 8006a06:	881a      	ldrh	r2, [r3, #0]
 8006a08:	88b9      	ldrh	r1, [r7, #4]
 8006a0a:	88fb      	ldrh	r3, [r7, #6]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fb fa8d 	bl	8001f2c <LCD_Fast_DrawPoint>
 8006a12:	e00a      	b.n	8006a2a <LCD_ShowChar+0xde>
			else if (mode == 0)
 8006a14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d106      	bne.n	8006a2a <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8006a1c:	4b20      	ldr	r3, [pc, #128]	; (8006aa0 <LCD_ShowChar+0x154>)
 8006a1e:	881a      	ldrh	r2, [r3, #0]
 8006a20:	88b9      	ldrh	r1, [r7, #4]
 8006a22:	88fb      	ldrh	r3, [r7, #6]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fb fa81 	bl	8001f2c <LCD_Fast_DrawPoint>
			temp <<= 1;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	73fb      	strb	r3, [r7, #15]
			y++;
 8006a30:	88bb      	ldrh	r3, [r7, #4]
 8006a32:	3301      	adds	r3, #1
 8006a34:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8006a36:	4b1b      	ldr	r3, [pc, #108]	; (8006aa4 <LCD_ShowChar+0x158>)
 8006a38:	885b      	ldrh	r3, [r3, #2]
 8006a3a:	88ba      	ldrh	r2, [r7, #4]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d222      	bcs.n	8006a86 <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8006a40:	88ba      	ldrh	r2, [r7, #4]
 8006a42:	897b      	ldrh	r3, [r7, #10]
 8006a44:	1ad2      	subs	r2, r2, r3
 8006a46:	78bb      	ldrb	r3, [r7, #2]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d10a      	bne.n	8006a62 <LCD_ShowChar+0x116>
				y = y0;
 8006a4c:	897b      	ldrh	r3, [r7, #10]
 8006a4e:	80bb      	strh	r3, [r7, #4]
				x++;
 8006a50:	88fb      	ldrh	r3, [r7, #6]
 8006a52:	3301      	adds	r3, #1
 8006a54:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8006a56:	4b13      	ldr	r3, [pc, #76]	; (8006aa4 <LCD_ShowChar+0x158>)
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	88fa      	ldrh	r2, [r7, #6]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d307      	bcc.n	8006a70 <LCD_ShowChar+0x124>
					return;	//超区域了
 8006a60:	e012      	b.n	8006a88 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8006a62:	7bbb      	ldrb	r3, [r7, #14]
 8006a64:	3301      	adds	r3, #1
 8006a66:	73bb      	strb	r3, [r7, #14]
 8006a68:	7bbb      	ldrb	r3, [r7, #14]
 8006a6a:	2b07      	cmp	r3, #7
 8006a6c:	d9c6      	bls.n	80069fc <LCD_ShowChar+0xb0>
 8006a6e:	e000      	b.n	8006a72 <LCD_ShowChar+0x126>
				break;
 8006a70:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8006a72:	7b7b      	ldrb	r3, [r7, #13]
 8006a74:	3301      	adds	r3, #1
 8006a76:	737b      	strb	r3, [r7, #13]
 8006a78:	7b7a      	ldrb	r2, [r7, #13]
 8006a7a:	7a7b      	ldrb	r3, [r7, #9]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d391      	bcc.n	80069a4 <LCD_ShowChar+0x58>
 8006a80:	e002      	b.n	8006a88 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8006a82:	bf00      	nop
 8006a84:	e000      	b.n	8006a88 <LCD_ShowChar+0x13c>
				return;		//超区域了
 8006a86:	bf00      	nop
			}
		}
	}
}
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd90      	pop	{r4, r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	0800b284 	.word	0x0800b284
 8006a94:	0800b6f8 	.word	0x0800b6f8
 8006a98:	0800bce8 	.word	0x0800bce8
 8006a9c:	20000098 	.word	0x20000098
 8006aa0:	20000004 	.word	0x20000004
 8006aa4:	200004b0 	.word	0x200004b0

08006aa8 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8006aa8:	b590      	push	{r4, r7, lr}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af02      	add	r7, sp, #8
 8006aae:	4604      	mov	r4, r0
 8006ab0:	4608      	mov	r0, r1
 8006ab2:	4611      	mov	r1, r2
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	4623      	mov	r3, r4
 8006ab8:	80fb      	strh	r3, [r7, #6]
 8006aba:	4603      	mov	r3, r0
 8006abc:	80bb      	strh	r3, [r7, #4]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	807b      	strh	r3, [r7, #2]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 8006ac6:	88fb      	ldrh	r3, [r7, #6]
 8006ac8:	73fb      	strb	r3, [r7, #15]
	width += x;
 8006aca:	887a      	ldrh	r2, [r7, #2]
 8006acc:	88fb      	ldrh	r3, [r7, #6]
 8006ace:	4413      	add	r3, r2
 8006ad0:	807b      	strh	r3, [r7, #2]
	height += y;
 8006ad2:	883a      	ldrh	r2, [r7, #0]
 8006ad4:	88bb      	ldrh	r3, [r7, #4]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8006ada:	e025      	b.n	8006b28 <LCD_ShowString+0x80>
	{
		if (x >= width) {
 8006adc:	88fa      	ldrh	r2, [r7, #6]
 8006ade:	887b      	ldrh	r3, [r7, #2]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d307      	bcc.n	8006af4 <LCD_ShowString+0x4c>
			x = x0;
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	80fb      	strh	r3, [r7, #6]
			y += size;
 8006ae8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	88bb      	ldrh	r3, [r7, #4]
 8006af0:	4413      	add	r3, r2
 8006af2:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8006af4:	88ba      	ldrh	r2, [r7, #4]
 8006af6:	883b      	ldrh	r3, [r7, #0]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d21e      	bcs.n	8006b3a <LCD_ShowString+0x92>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	781a      	ldrb	r2, [r3, #0]
 8006b00:	f897 4020 	ldrb.w	r4, [r7, #32]
 8006b04:	88b9      	ldrh	r1, [r7, #4]
 8006b06:	88f8      	ldrh	r0, [r7, #6]
 8006b08:	2300      	movs	r3, #0
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	4623      	mov	r3, r4
 8006b0e:	f7ff ff1d 	bl	800694c <LCD_ShowChar>
		x += size / 2;
 8006b12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b16:	085b      	lsrs	r3, r3, #1
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	88fb      	ldrh	r3, [r7, #6]
 8006b1e:	4413      	add	r3, r2
 8006b20:	80fb      	strh	r3, [r7, #6]
		p++;
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	3301      	adds	r3, #1
 8006b26:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b7e      	cmp	r3, #126	; 0x7e
 8006b2e:	d805      	bhi.n	8006b3c <LCD_ShowString+0x94>
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b1f      	cmp	r3, #31
 8006b36:	d8d1      	bhi.n	8006adc <LCD_ShowString+0x34>
	}
}
 8006b38:	e000      	b.n	8006b3c <LCD_ShowString+0x94>
			break;	//退出
 8006b3a:	bf00      	nop
}
 8006b3c:	bf00      	nop
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd90      	pop	{r4, r7, pc}

08006b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006b4a:	f001 f951 	bl	8007df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006b4e:	f000 f84b 	bl	8006be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006b52:	f7fa f9bb 	bl	8000ecc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8006b56:	f001 f8a7 	bl	8007ca8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8006b5a:	f000 fe2f 	bl	80077bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // init
  HAL_TIM_Base_Start_IT(&htim3);
 8006b5e:	481d      	ldr	r0, [pc, #116]	; (8006bd4 <main+0x90>)
 8006b60:	f002 f9e3 	bl	8008f2a <HAL_TIM_Base_Start_IT>
  button_init();
 8006b64:	f7f9 ff56 	bl	8000a14 <button_init>
//    millis_init();
//    uart_init(9600);
    LCD_Init();
 8006b68:	f7fb fe26 	bl	80027b8 <LCD_Init>
    // save_rank_list();
//    read_rank_list();
    // get into game scene
//    sprintf(hiscore.name, "%s%d", "Player", (rand()%9)+1);
    game_reset();
 8006b6c:	f7fa f98e 	bl	8000e8c <game_reset>
    sw_game_scene();
 8006b70:	f000 f8e4 	bl	8006d3c <sw_game_scene>


  uint32_t button_task_stamp = millis();
 8006b74:	f000 fa5c 	bl	8007030 <millis>
 8006b78:	6178      	str	r0, [r7, #20]
  {
	  char msg[20];
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(millis() - button_task_stamp >= button_scan_interval){
 8006b7a:	f000 fa59 	bl	8007030 <millis>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	1ad2      	subs	r2, r2, r3
 8006b84:	4b14      	ldr	r3, [pc, #80]	; (8006bd8 <main+0x94>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d31a      	bcc.n	8006bc2 <main+0x7e>
		button_task_stamp += button_scan_interval;
 8006b8c:	4b12      	ldr	r3, [pc, #72]	; (8006bd8 <main+0x94>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	4413      	add	r3, r2
 8006b94:	617b      	str	r3, [r7, #20]
	  	button_task();
 8006b96:	f7f9 ff99 	bl	8000acc <button_task>
	  	sprintf(msg, "time:%ld\r\n",millis());
 8006b9a:	f000 fa49 	bl	8007030 <millis>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	463b      	mov	r3, r7
 8006ba2:	490e      	ldr	r1, [pc, #56]	; (8006bdc <main+0x98>)
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f003 fa0f 	bl	8009fc8 <siprintf>
	  	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 0xffff);
 8006baa:	463b      	mov	r3, r7
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7f9 fb3b 	bl	8000228 <strlen>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	4639      	mov	r1, r7
 8006bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006bbc:	4808      	ldr	r0, [pc, #32]	; (8006be0 <main+0x9c>)
 8006bbe:	f002 fd6e 	bl	800969e <HAL_UART_Transmit>
	}
	if(scene_task){
 8006bc2:	4b08      	ldr	r3, [pc, #32]	; (8006be4 <main+0xa0>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0d7      	beq.n	8006b7a <main+0x36>
		scene_task();
 8006bca:	4b06      	ldr	r3, [pc, #24]	; (8006be4 <main+0xa0>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4798      	blx	r3
  {
 8006bd0:	e7d3      	b.n	8006b7a <main+0x36>
 8006bd2:	bf00      	nop
 8006bd4:	20000634 	.word	0x20000634
 8006bd8:	20000000 	.word	0x20000000
 8006bdc:	0800b124 	.word	0x0800b124
 8006be0:	20000674 	.word	0x20000674
 8006be4:	20000538 	.word	0x20000538

08006be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b090      	sub	sp, #64	; 0x40
 8006bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006bee:	f107 0318 	add.w	r3, r7, #24
 8006bf2:	2228      	movs	r2, #40	; 0x28
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f003 f96e 	bl	8009ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006bfc:	1d3b      	adds	r3, r7, #4
 8006bfe:	2200      	movs	r2, #0
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	605a      	str	r2, [r3, #4]
 8006c04:	609a      	str	r2, [r3, #8]
 8006c06:	60da      	str	r2, [r3, #12]
 8006c08:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006c0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006c14:	2300      	movs	r3, #0
 8006c16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006c26:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006c2c:	f107 0318 	add.w	r3, r7, #24
 8006c30:	4618      	mov	r0, r3
 8006c32:	f001 fd33 	bl	800869c <HAL_RCC_OscConfig>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8006c3c:	f000 f819 	bl	8006c72 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006c40:	230f      	movs	r3, #15
 8006c42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006c44:	2302      	movs	r3, #2
 8006c46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006c52:	2300      	movs	r3, #0
 8006c54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006c56:	1d3b      	adds	r3, r7, #4
 8006c58:	2102      	movs	r1, #2
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f001 ff9e 	bl	8008b9c <HAL_RCC_ClockConfig>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d001      	beq.n	8006c6a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8006c66:	f000 f804 	bl	8006c72 <Error_Handler>
  }
}
 8006c6a:	bf00      	nop
 8006c6c:	3740      	adds	r7, #64	; 0x40
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006c72:	b480      	push	{r7}
 8006c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006c76:	bf00      	nop
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bc80      	pop	{r7}
 8006c7c:	4770      	bx	lr
	...

08006c80 <add_rank>:
//
//void read_rank_list() {
//  STMFLASH_Read(FLASH_SAVE_ADDR,(uint16_t*)rank_list,sizeof(rank_list));
//}

void add_rank(Hiscore_t hiscore){
 8006c80:	b490      	push	{r4, r7}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	1d3b      	adds	r3, r7, #4
 8006c88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  Hiscore_t tmp;
  for(uint8_t i=0; i<RANK_LIST_LEN; i++){
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	77fb      	strb	r3, [r7, #31]
 8006c90:	e02e      	b.n	8006cf0 <add_rank+0x70>
    if(hiscore.score >= rank_list[i].score){
 8006c92:	89f9      	ldrh	r1, [r7, #14]
 8006c94:	7ffa      	ldrb	r2, [r7, #31]
 8006c96:	481a      	ldr	r0, [pc, #104]	; (8006d00 <add_rank+0x80>)
 8006c98:	4613      	mov	r3, r2
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4403      	add	r3, r0
 8006ca2:	330a      	adds	r3, #10
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	4299      	cmp	r1, r3
 8006ca8:	d31f      	bcc.n	8006cea <add_rank+0x6a>
      tmp = rank_list[i];
 8006caa:	7ffa      	ldrb	r2, [r7, #31]
 8006cac:	4914      	ldr	r1, [pc, #80]	; (8006d00 <add_rank+0x80>)
 8006cae:	4613      	mov	r3, r2
 8006cb0:	005b      	lsls	r3, r3, #1
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	18ca      	adds	r2, r1, r3
 8006cb8:	f107 0310 	add.w	r3, r7, #16
 8006cbc:	6810      	ldr	r0, [r2, #0]
 8006cbe:	6851      	ldr	r1, [r2, #4]
 8006cc0:	6892      	ldr	r2, [r2, #8]
 8006cc2:	c307      	stmia	r3!, {r0, r1, r2}
      rank_list[i] = hiscore;
 8006cc4:	7ffa      	ldrb	r2, [r7, #31]
 8006cc6:	490e      	ldr	r1, [pc, #56]	; (8006d00 <add_rank+0x80>)
 8006cc8:	4613      	mov	r3, r2
 8006cca:	005b      	lsls	r3, r3, #1
 8006ccc:	4413      	add	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	440b      	add	r3, r1
 8006cd2:	461c      	mov	r4, r3
 8006cd4:	1d3b      	adds	r3, r7, #4
 8006cd6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006cd8:	6020      	str	r0, [r4, #0]
 8006cda:	6061      	str	r1, [r4, #4]
 8006cdc:	60a2      	str	r2, [r4, #8]
      hiscore = tmp;
 8006cde:	1d3b      	adds	r3, r7, #4
 8006ce0:	f107 0210 	add.w	r2, r7, #16
 8006ce4:	ca07      	ldmia	r2, {r0, r1, r2}
 8006ce6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  for(uint8_t i=0; i<RANK_LIST_LEN; i++){
 8006cea:	7ffb      	ldrb	r3, [r7, #31]
 8006cec:	3301      	adds	r3, #1
 8006cee:	77fb      	strb	r3, [r7, #31]
 8006cf0:	7ffb      	ldrb	r3, [r7, #31]
 8006cf2:	2b09      	cmp	r3, #9
 8006cf4:	d9cd      	bls.n	8006c92 <add_rank+0x12>
    }
  }
//  save_rank_list();
}
 8006cf6:	bf00      	nop
 8006cf8:	3720      	adds	r7, #32
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bc90      	pop	{r4, r7}
 8006cfe:	4770      	bx	lr
 8006d00:	200004c0 	.word	0x200004c0

08006d04 <game_scene>:

void rank_scene() {
  ;
}

void game_scene() {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	af00      	add	r7, sp, #0
  // tetromino fall down task
  if(millis() - fall_task_stamp >= tet_fall_interval){
 8006d08:	f000 f992 	bl	8007030 <millis>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	4b09      	ldr	r3, [pc, #36]	; (8006d34 <game_scene+0x30>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	1ad2      	subs	r2, r2, r3
 8006d14:	4b08      	ldr	r3, [pc, #32]	; (8006d38 <game_scene+0x34>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d308      	bcc.n	8006d2e <game_scene+0x2a>
    fall_task_stamp += tet_fall_interval;
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <game_scene+0x30>)
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <game_scene+0x34>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4413      	add	r3, r2
 8006d26:	4a03      	ldr	r2, [pc, #12]	; (8006d34 <game_scene+0x30>)
 8006d28:	6013      	str	r3, [r2, #0]
    fall_down_task();
 8006d2a:	f7fa f853 	bl	8000dd4 <fall_down_task>
  }
}
 8006d2e:	bf00      	nop
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	20000140 	.word	0x20000140
 8006d38:	2000013c 	.word	0x2000013c

08006d3c <sw_game_scene>:

void sw_game_scene(){
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	af00      	add	r7, sp, #0
  // asign button function
  r_up->press_fun = tet_rotation;
 8006d40:	4b31      	ldr	r3, [pc, #196]	; (8006e08 <sw_game_scene+0xcc>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a31      	ldr	r2, [pc, #196]	; (8006e0c <sw_game_scene+0xd0>)
 8006d46:	605a      	str	r2, [r3, #4]
  r_down->press_fun = tet_fall_speedup;
 8006d48:	4b31      	ldr	r3, [pc, #196]	; (8006e10 <sw_game_scene+0xd4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a31      	ldr	r2, [pc, #196]	; (8006e14 <sw_game_scene+0xd8>)
 8006d4e:	605a      	str	r2, [r3, #4]
  r_left->press_fun = tet_move_left;
 8006d50:	4b31      	ldr	r3, [pc, #196]	; (8006e18 <sw_game_scene+0xdc>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a31      	ldr	r2, [pc, #196]	; (8006e1c <sw_game_scene+0xe0>)
 8006d56:	605a      	str	r2, [r3, #4]
  r_right->press_fun = tet_move_right;
 8006d58:	4b31      	ldr	r3, [pc, #196]	; (8006e20 <sw_game_scene+0xe4>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a31      	ldr	r2, [pc, #196]	; (8006e24 <sw_game_scene+0xe8>)
 8006d5e:	605a      	str	r2, [r3, #4]
  r_confirm->press_fun = sw_rank_sence;
 8006d60:	4b31      	ldr	r3, [pc, #196]	; (8006e28 <sw_game_scene+0xec>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a31      	ldr	r2, [pc, #196]	; (8006e2c <sw_game_scene+0xf0>)
 8006d66:	605a      	str	r2, [r3, #4]
  r_return->press_fun = NULL;
 8006d68:	4b31      	ldr	r3, [pc, #196]	; (8006e30 <sw_game_scene+0xf4>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	605a      	str	r2, [r3, #4]
  k_wakeup->press_fun = tet_rotation;
 8006d70:	4b30      	ldr	r3, [pc, #192]	; (8006e34 <sw_game_scene+0xf8>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a25      	ldr	r2, [pc, #148]	; (8006e0c <sw_game_scene+0xd0>)
 8006d76:	605a      	str	r2, [r3, #4]
  k_key0->press_fun = tet_move_right;
 8006d78:	4b2f      	ldr	r3, [pc, #188]	; (8006e38 <sw_game_scene+0xfc>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a29      	ldr	r2, [pc, #164]	; (8006e24 <sw_game_scene+0xe8>)
 8006d7e:	605a      	str	r2, [r3, #4]
  k_key1->press_fun = tet_move_left;
 8006d80:	4b2e      	ldr	r3, [pc, #184]	; (8006e3c <sw_game_scene+0x100>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a25      	ldr	r2, [pc, #148]	; (8006e1c <sw_game_scene+0xe0>)
 8006d86:	605a      	str	r2, [r3, #4]
  r_up->release_fun = NULL;
 8006d88:	4b1f      	ldr	r3, [pc, #124]	; (8006e08 <sw_game_scene+0xcc>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	609a      	str	r2, [r3, #8]
  r_down->release_fun = tet_fall_normal;
 8006d90:	4b1f      	ldr	r3, [pc, #124]	; (8006e10 <sw_game_scene+0xd4>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a2a      	ldr	r2, [pc, #168]	; (8006e40 <sw_game_scene+0x104>)
 8006d96:	609a      	str	r2, [r3, #8]
  r_left->release_fun = NULL;
 8006d98:	4b1f      	ldr	r3, [pc, #124]	; (8006e18 <sw_game_scene+0xdc>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	609a      	str	r2, [r3, #8]
  r_right->release_fun = NULL;
 8006da0:	4b1f      	ldr	r3, [pc, #124]	; (8006e20 <sw_game_scene+0xe4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2200      	movs	r2, #0
 8006da6:	609a      	str	r2, [r3, #8]
  r_confirm->release_fun = NULL;
 8006da8:	4b1f      	ldr	r3, [pc, #124]	; (8006e28 <sw_game_scene+0xec>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2200      	movs	r2, #0
 8006dae:	609a      	str	r2, [r3, #8]
  r_return->release_fun = NULL;
 8006db0:	4b1f      	ldr	r3, [pc, #124]	; (8006e30 <sw_game_scene+0xf4>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2200      	movs	r2, #0
 8006db6:	609a      	str	r2, [r3, #8]
  k_wakeup->release_fun = NULL;
 8006db8:	4b1e      	ldr	r3, [pc, #120]	; (8006e34 <sw_game_scene+0xf8>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	609a      	str	r2, [r3, #8]
  k_key0->release_fun = NULL;
 8006dc0:	4b1d      	ldr	r3, [pc, #116]	; (8006e38 <sw_game_scene+0xfc>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	609a      	str	r2, [r3, #8]
  k_key1->release_fun = NULL;
 8006dc8:	4b1c      	ldr	r3, [pc, #112]	; (8006e3c <sw_game_scene+0x100>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	609a      	str	r2, [r3, #8]
  // scene_task
  scene_task = game_scene;
 8006dd0:	4b1c      	ldr	r3, [pc, #112]	; (8006e44 <sw_game_scene+0x108>)
 8006dd2:	4a1d      	ldr	r2, [pc, #116]	; (8006e48 <sw_game_scene+0x10c>)
 8006dd4:	601a      	str	r2, [r3, #0]
  fall_task_stamp = millis();
 8006dd6:	f000 f92b 	bl	8007030 <millis>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	4b1b      	ldr	r3, [pc, #108]	; (8006e4c <sw_game_scene+0x110>)
 8006dde:	601a      	str	r2, [r3, #0]
  // display
  LCD_Clear(WHITE);
 8006de0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006de4:	f7ff fc16 	bl	8006614 <LCD_Clear>
  draw_bg();
 8006de8:	f000 fd5c 	bl	80078a4 <draw_bg>
  draw_name(hiscore.name);
 8006dec:	4818      	ldr	r0, [pc, #96]	; (8006e50 <sw_game_scene+0x114>)
 8006dee:	f000 fec5 	bl	8007b7c <draw_name>
  grid_render();
 8006df2:	f000 fdeb 	bl	80079cc <grid_render>
  draw_tetromino(0);
 8006df6:	2000      	movs	r0, #0
 8006df8:	f000 fe2c 	bl	8007a54 <draw_tetromino>
  draw_next_tetromino(0);
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	f000 fe79 	bl	8007af4 <draw_next_tetromino>
}
 8006e02:	bf00      	nop
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	200000b0 	.word	0x200000b0
 8006e0c:	08000ce9 	.word	0x08000ce9
 8006e10:	200000ac 	.word	0x200000ac
 8006e14:	08000cb9 	.word	0x08000cb9
 8006e18:	200000c8 	.word	0x200000c8
 8006e1c:	08000c51 	.word	0x08000c51
 8006e20:	200000c0 	.word	0x200000c0
 8006e24:	08000c85 	.word	0x08000c85
 8006e28:	200000c4 	.word	0x200000c4
 8006e2c:	08006e55 	.word	0x08006e55
 8006e30:	20000138 	.word	0x20000138
 8006e34:	200000b8 	.word	0x200000b8
 8006e38:	200000b4 	.word	0x200000b4
 8006e3c:	200000bc 	.word	0x200000bc
 8006e40:	08000cd1 	.word	0x08000cd1
 8006e44:	20000538 	.word	0x20000538
 8006e48:	08006d05 	.word	0x08006d05
 8006e4c:	20000140 	.word	0x20000140
 8006e50:	20000144 	.word	0x20000144

08006e54 <sw_rank_sence>:

void sw_rank_sence() {
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
  // asign button function
  r_up->press_fun = NULL;
 8006e58:	4b27      	ldr	r3, [pc, #156]	; (8006ef8 <sw_rank_sence+0xa4>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	605a      	str	r2, [r3, #4]
  r_down->press_fun = NULL;
 8006e60:	4b26      	ldr	r3, [pc, #152]	; (8006efc <sw_rank_sence+0xa8>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2200      	movs	r2, #0
 8006e66:	605a      	str	r2, [r3, #4]
  r_left->press_fun = NULL;
 8006e68:	4b25      	ldr	r3, [pc, #148]	; (8006f00 <sw_rank_sence+0xac>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	605a      	str	r2, [r3, #4]
  r_right->press_fun = NULL;
 8006e70:	4b24      	ldr	r3, [pc, #144]	; (8006f04 <sw_rank_sence+0xb0>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2200      	movs	r2, #0
 8006e76:	605a      	str	r2, [r3, #4]
  r_confirm->press_fun = sw_game_scene;
 8006e78:	4b23      	ldr	r3, [pc, #140]	; (8006f08 <sw_rank_sence+0xb4>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a23      	ldr	r2, [pc, #140]	; (8006f0c <sw_rank_sence+0xb8>)
 8006e7e:	605a      	str	r2, [r3, #4]
  r_return->press_fun = NULL;
 8006e80:	4b23      	ldr	r3, [pc, #140]	; (8006f10 <sw_rank_sence+0xbc>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2200      	movs	r2, #0
 8006e86:	605a      	str	r2, [r3, #4]
  k_wakeup->press_fun = NULL;
 8006e88:	4b22      	ldr	r3, [pc, #136]	; (8006f14 <sw_rank_sence+0xc0>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	605a      	str	r2, [r3, #4]
  k_key0->press_fun = NULL;
 8006e90:	4b21      	ldr	r3, [pc, #132]	; (8006f18 <sw_rank_sence+0xc4>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2200      	movs	r2, #0
 8006e96:	605a      	str	r2, [r3, #4]
  k_key1->press_fun = NULL;
 8006e98:	4b20      	ldr	r3, [pc, #128]	; (8006f1c <sw_rank_sence+0xc8>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	605a      	str	r2, [r3, #4]
  r_up->release_fun = NULL;
 8006ea0:	4b15      	ldr	r3, [pc, #84]	; (8006ef8 <sw_rank_sence+0xa4>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	609a      	str	r2, [r3, #8]
  r_down->release_fun = NULL;
 8006ea8:	4b14      	ldr	r3, [pc, #80]	; (8006efc <sw_rank_sence+0xa8>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2200      	movs	r2, #0
 8006eae:	609a      	str	r2, [r3, #8]
  r_left->release_fun = NULL;
 8006eb0:	4b13      	ldr	r3, [pc, #76]	; (8006f00 <sw_rank_sence+0xac>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	609a      	str	r2, [r3, #8]
  r_right->release_fun = NULL;
 8006eb8:	4b12      	ldr	r3, [pc, #72]	; (8006f04 <sw_rank_sence+0xb0>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	609a      	str	r2, [r3, #8]
  r_confirm->release_fun = NULL;
 8006ec0:	4b11      	ldr	r3, [pc, #68]	; (8006f08 <sw_rank_sence+0xb4>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	609a      	str	r2, [r3, #8]
  r_return->release_fun = NULL;
 8006ec8:	4b11      	ldr	r3, [pc, #68]	; (8006f10 <sw_rank_sence+0xbc>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	609a      	str	r2, [r3, #8]
  k_wakeup->release_fun = NULL;
 8006ed0:	4b10      	ldr	r3, [pc, #64]	; (8006f14 <sw_rank_sence+0xc0>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	609a      	str	r2, [r3, #8]
  k_key0->release_fun = NULL;
 8006ed8:	4b0f      	ldr	r3, [pc, #60]	; (8006f18 <sw_rank_sence+0xc4>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2200      	movs	r2, #0
 8006ede:	609a      	str	r2, [r3, #8]
  k_key1->release_fun = NULL;
 8006ee0:	4b0e      	ldr	r3, [pc, #56]	; (8006f1c <sw_rank_sence+0xc8>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	609a      	str	r2, [r3, #8]
  // scence task
  scene_task = NULL;
 8006ee8:	4b0d      	ldr	r3, [pc, #52]	; (8006f20 <sw_rank_sence+0xcc>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	601a      	str	r2, [r3, #0]
  // display
  draw_rank_list();
 8006eee:	f000 fe8b 	bl	8007c08 <draw_rank_list>
}
 8006ef2:	bf00      	nop
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	200000b0 	.word	0x200000b0
 8006efc:	200000ac 	.word	0x200000ac
 8006f00:	200000c8 	.word	0x200000c8
 8006f04:	200000c0 	.word	0x200000c0
 8006f08:	200000c4 	.word	0x200000c4
 8006f0c:	08006d3d 	.word	0x08006d3d
 8006f10:	20000138 	.word	0x20000138
 8006f14:	200000b8 	.word	0x200000b8
 8006f18:	200000b4 	.word	0x200000b4
 8006f1c:	200000bc 	.word	0x200000bc
 8006f20:	20000538 	.word	0x20000538

08006f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006f2a:	4b15      	ldr	r3, [pc, #84]	; (8006f80 <HAL_MspInit+0x5c>)
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	4a14      	ldr	r2, [pc, #80]	; (8006f80 <HAL_MspInit+0x5c>)
 8006f30:	f043 0301 	orr.w	r3, r3, #1
 8006f34:	6193      	str	r3, [r2, #24]
 8006f36:	4b12      	ldr	r3, [pc, #72]	; (8006f80 <HAL_MspInit+0x5c>)
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	60bb      	str	r3, [r7, #8]
 8006f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f42:	4b0f      	ldr	r3, [pc, #60]	; (8006f80 <HAL_MspInit+0x5c>)
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	4a0e      	ldr	r2, [pc, #56]	; (8006f80 <HAL_MspInit+0x5c>)
 8006f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f4c:	61d3      	str	r3, [r2, #28]
 8006f4e:	4b0c      	ldr	r3, [pc, #48]	; (8006f80 <HAL_MspInit+0x5c>)
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f56:	607b      	str	r3, [r7, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006f5a:	4b0a      	ldr	r3, [pc, #40]	; (8006f84 <HAL_MspInit+0x60>)
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	60fb      	str	r3, [r7, #12]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	4a04      	ldr	r2, [pc, #16]	; (8006f84 <HAL_MspInit+0x60>)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006f76:	bf00      	nop
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bc80      	pop	{r7}
 8006f7e:	4770      	bx	lr
 8006f80:	40021000 	.word	0x40021000
 8006f84:	40010000 	.word	0x40010000

08006f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006f8c:	bf00      	nop
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bc80      	pop	{r7}
 8006f92:	4770      	bx	lr

08006f94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f98:	e7fe      	b.n	8006f98 <HardFault_Handler+0x4>

08006f9a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f9e:	e7fe      	b.n	8006f9e <MemManage_Handler+0x4>

08006fa0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006fa4:	e7fe      	b.n	8006fa4 <BusFault_Handler+0x4>

08006fa6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006faa:	e7fe      	b.n	8006faa <UsageFault_Handler+0x4>

08006fac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006fac:	b480      	push	{r7}
 8006fae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006fb0:	bf00      	nop
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bc80      	pop	{r7}
 8006fb6:	4770      	bx	lr

08006fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006fbc:	bf00      	nop
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bc80      	pop	{r7}
 8006fc2:	4770      	bx	lr

08006fc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006fc8:	bf00      	nop
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bc80      	pop	{r7}
 8006fce:	4770      	bx	lr

08006fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006fd4:	f000 ff52 	bl	8007e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006fd8:	bf00      	nop
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8006fe0:	2001      	movs	r0, #1
 8006fe2:	f001 fb39 	bl	8008658 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006fe6:	bf00      	nop
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8006fee:	2020      	movs	r0, #32
 8006ff0:	f001 fb32 	bl	8008658 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006ff4:	bf00      	nop
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006ffc:	4802      	ldr	r0, [pc, #8]	; (8007008 <TIM3_IRQHandler+0x10>)
 8006ffe:	f001 ffb7 	bl	8008f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007002:	bf00      	nop
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20000634 	.word	0x20000634

0800700c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007010:	4802      	ldr	r0, [pc, #8]	; (800701c <USART1_IRQHandler+0x10>)
 8007012:	f002 fbdd 	bl	80097d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007016:	bf00      	nop
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	20000674 	.word	0x20000674

08007020 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007024:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007028:	f001 fb16 	bl	8008658 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800702c:	bf00      	nop
 800702e:	bd80      	pop	{r7, pc}

08007030 <millis>:

/* USER CODE BEGIN 1 */
uint32_t millis(void){
 8007030:	b480      	push	{r7}
 8007032:	af00      	add	r7, sp, #0
  return time_ms;
 8007034:	4b02      	ldr	r3, [pc, #8]	; (8007040 <millis+0x10>)
 8007036:	681b      	ldr	r3, [r3, #0]
}
 8007038:	4618      	mov	r0, r3
 800703a:	46bd      	mov	sp, r7
 800703c:	bc80      	pop	{r7}
 800703e:	4770      	bx	lr
 8007040:	2000009c 	.word	0x2000009c

08007044 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
	time_ms++;
 800704c:	4b04      	ldr	r3, [pc, #16]	; (8007060 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3301      	adds	r3, #1
 8007052:	4a03      	ldr	r2, [pc, #12]	; (8007060 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007054:	6013      	str	r3, [r2, #0]
}
 8007056:	bf00      	nop
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	bc80      	pop	{r7}
 800705e:	4770      	bx	lr
 8007060:	2000009c 	.word	0x2000009c

08007064 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007070:	2300      	movs	r3, #0
 8007072:	617b      	str	r3, [r7, #20]
 8007074:	e00a      	b.n	800708c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007076:	f3af 8000 	nop.w
 800707a:	4601      	mov	r1, r0
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	60ba      	str	r2, [r7, #8]
 8007082:	b2ca      	uxtb	r2, r1
 8007084:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	3301      	adds	r3, #1
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	429a      	cmp	r2, r3
 8007092:	dbf0      	blt.n	8007076 <_read+0x12>
	}

return len;
 8007094:	687b      	ldr	r3, [r7, #4]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3718      	adds	r7, #24
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b086      	sub	sp, #24
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	60f8      	str	r0, [r7, #12]
 80070a6:	60b9      	str	r1, [r7, #8]
 80070a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070aa:	2300      	movs	r3, #0
 80070ac:	617b      	str	r3, [r7, #20]
 80070ae:	e009      	b.n	80070c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	60ba      	str	r2, [r7, #8]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	3301      	adds	r3, #1
 80070c2:	617b      	str	r3, [r7, #20]
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	dbf1      	blt.n	80070b0 <_write+0x12>
	}
	return len;
 80070cc:	687b      	ldr	r3, [r7, #4]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3718      	adds	r7, #24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <_close>:

int _close(int file)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b083      	sub	sp, #12
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
	return -1;
 80070de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bc80      	pop	{r7}
 80070ea:	4770      	bx	lr

080070ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80070fc:	605a      	str	r2, [r3, #4]
	return 0;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	bc80      	pop	{r7}
 8007108:	4770      	bx	lr

0800710a <_isatty>:

int _isatty(int file)
{
 800710a:	b480      	push	{r7}
 800710c:	b083      	sub	sp, #12
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
	return 1;
 8007112:	2301      	movs	r3, #1
}
 8007114:	4618      	mov	r0, r3
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	bc80      	pop	{r7}
 800711c:	4770      	bx	lr

0800711e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800711e:	b480      	push	{r7}
 8007120:	b085      	sub	sp, #20
 8007122:	af00      	add	r7, sp, #0
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	607a      	str	r2, [r7, #4]
	return 0;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3714      	adds	r7, #20
 8007130:	46bd      	mov	sp, r7
 8007132:	bc80      	pop	{r7}
 8007134:	4770      	bx	lr
	...

08007138 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007140:	4b11      	ldr	r3, [pc, #68]	; (8007188 <_sbrk+0x50>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d102      	bne.n	800714e <_sbrk+0x16>
		heap_end = &end;
 8007148:	4b0f      	ldr	r3, [pc, #60]	; (8007188 <_sbrk+0x50>)
 800714a:	4a10      	ldr	r2, [pc, #64]	; (800718c <_sbrk+0x54>)
 800714c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800714e:	4b0e      	ldr	r3, [pc, #56]	; (8007188 <_sbrk+0x50>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007154:	4b0c      	ldr	r3, [pc, #48]	; (8007188 <_sbrk+0x50>)
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4413      	add	r3, r2
 800715c:	466a      	mov	r2, sp
 800715e:	4293      	cmp	r3, r2
 8007160:	d907      	bls.n	8007172 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007162:	f002 fe8f 	bl	8009e84 <__errno>
 8007166:	4602      	mov	r2, r0
 8007168:	230c      	movs	r3, #12
 800716a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800716c:	f04f 33ff 	mov.w	r3, #4294967295
 8007170:	e006      	b.n	8007180 <_sbrk+0x48>
	}

	heap_end += incr;
 8007172:	4b05      	ldr	r3, [pc, #20]	; (8007188 <_sbrk+0x50>)
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4413      	add	r3, r2
 800717a:	4a03      	ldr	r2, [pc, #12]	; (8007188 <_sbrk+0x50>)
 800717c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800717e:	68fb      	ldr	r3, [r7, #12]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	200000a0 	.word	0x200000a0
 800718c:	200006c0 	.word	0x200006c0

08007190 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007190:	b480      	push	{r7}
 8007192:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8007194:	4b15      	ldr	r3, [pc, #84]	; (80071ec <SystemInit+0x5c>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a14      	ldr	r2, [pc, #80]	; (80071ec <SystemInit+0x5c>)
 800719a:	f043 0301 	orr.w	r3, r3, #1
 800719e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80071a0:	4b12      	ldr	r3, [pc, #72]	; (80071ec <SystemInit+0x5c>)
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	4911      	ldr	r1, [pc, #68]	; (80071ec <SystemInit+0x5c>)
 80071a6:	4b12      	ldr	r3, [pc, #72]	; (80071f0 <SystemInit+0x60>)
 80071a8:	4013      	ands	r3, r2
 80071aa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80071ac:	4b0f      	ldr	r3, [pc, #60]	; (80071ec <SystemInit+0x5c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a0e      	ldr	r2, [pc, #56]	; (80071ec <SystemInit+0x5c>)
 80071b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80071b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80071bc:	4b0b      	ldr	r3, [pc, #44]	; (80071ec <SystemInit+0x5c>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a0a      	ldr	r2, [pc, #40]	; (80071ec <SystemInit+0x5c>)
 80071c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80071c8:	4b08      	ldr	r3, [pc, #32]	; (80071ec <SystemInit+0x5c>)
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	4a07      	ldr	r2, [pc, #28]	; (80071ec <SystemInit+0x5c>)
 80071ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80071d2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80071d4:	4b05      	ldr	r3, [pc, #20]	; (80071ec <SystemInit+0x5c>)
 80071d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80071da:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80071dc:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <SystemInit+0x64>)
 80071de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80071e2:	609a      	str	r2, [r3, #8]
#endif 
}
 80071e4:	bf00      	nop
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bc80      	pop	{r7}
 80071ea:	4770      	bx	lr
 80071ec:	40021000 	.word	0x40021000
 80071f0:	f8ff0000 	.word	0xf8ff0000
 80071f4:	e000ed00 	.word	0xe000ed00

080071f8 <left_shift_check>:

Tetromino_t tetromino;
Tetromino_t tetromino_next;
Image_t tetimg_list[SHAPE_NUM];

uint8_t left_shift_check() {
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
	int8_t a, b;
	uint8_t i;
	Image_t* it = &tetimg_list[tetromino.shape];
 80071fe:	4b2b      	ldr	r3, [pc, #172]	; (80072ac <left_shift_check+0xb4>)
 8007200:	789b      	ldrb	r3, [r3, #2]
 8007202:	461a      	mov	r2, r3
 8007204:	4613      	mov	r3, r2
 8007206:	011b      	lsls	r3, r3, #4
 8007208:	4413      	add	r3, r2
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	4a28      	ldr	r2, [pc, #160]	; (80072b0 <left_shift_check+0xb8>)
 800720e:	4413      	add	r3, r2
 8007210:	60bb      	str	r3, [r7, #8]
	for(i=0;i<4;i++)
 8007212:	2300      	movs	r3, #0
 8007214:	73fb      	strb	r3, [r7, #15]
 8007216:	e03f      	b.n	8007298 <left_shift_check+0xa0>
	{
	  a = it->x[tetromino.rotation][i]+tetromino.x - 1;
 8007218:	4b24      	ldr	r3, [pc, #144]	; (80072ac <left_shift_check+0xb4>)
 800721a:	78db      	ldrb	r3, [r3, #3]
 800721c:	461a      	mov	r2, r3
 800721e:	7bfb      	ldrb	r3, [r7, #15]
 8007220:	68b9      	ldr	r1, [r7, #8]
 8007222:	0092      	lsls	r2, r2, #2
 8007224:	440a      	add	r2, r1
 8007226:	4413      	add	r3, r2
 8007228:	f993 3000 	ldrsb.w	r3, [r3]
 800722c:	b2da      	uxtb	r2, r3
 800722e:	4b1f      	ldr	r3, [pc, #124]	; (80072ac <left_shift_check+0xb4>)
 8007230:	f993 3000 	ldrsb.w	r3, [r3]
 8007234:	b2db      	uxtb	r3, r3
 8007236:	4413      	add	r3, r2
 8007238:	b2db      	uxtb	r3, r3
 800723a:	3b01      	subs	r3, #1
 800723c:	b2db      	uxtb	r3, r3
 800723e:	71fb      	strb	r3, [r7, #7]
	  b = it->y[tetromino.rotation][i]+tetromino.y;
 8007240:	4b1a      	ldr	r3, [pc, #104]	; (80072ac <left_shift_check+0xb4>)
 8007242:	78db      	ldrb	r3, [r3, #3]
 8007244:	461a      	mov	r2, r3
 8007246:	7bfb      	ldrb	r3, [r7, #15]
 8007248:	68b9      	ldr	r1, [r7, #8]
 800724a:	0092      	lsls	r2, r2, #2
 800724c:	440a      	add	r2, r1
 800724e:	4413      	add	r3, r2
 8007250:	3310      	adds	r3, #16
 8007252:	f993 3000 	ldrsb.w	r3, [r3]
 8007256:	b2da      	uxtb	r2, r3
 8007258:	4b14      	ldr	r3, [pc, #80]	; (80072ac <left_shift_check+0xb4>)
 800725a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	4413      	add	r3, r2
 8007262:	b2db      	uxtb	r3, r3
 8007264:	71bb      	strb	r3, [r7, #6]
		if(a<0)
 8007266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800726a:	2b00      	cmp	r3, #0
 800726c:	da01      	bge.n	8007272 <left_shift_check+0x7a>
		{
			return 0;
 800726e:	2300      	movs	r3, #0
 8007270:	e016      	b.n	80072a0 <left_shift_check+0xa8>
		}
	  if(!grid[b][a].isEmpty)
 8007272:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8007276:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800727a:	480e      	ldr	r0, [pc, #56]	; (80072b4 <left_shift_check+0xbc>)
 800727c:	4613      	mov	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	440b      	add	r3, r1
 8007286:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <left_shift_check+0x9a>
	  {
			return 0;
 800728e:	2300      	movs	r3, #0
 8007290:	e006      	b.n	80072a0 <left_shift_check+0xa8>
	for(i=0;i<4;i++)
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	3301      	adds	r3, #1
 8007296:	73fb      	strb	r3, [r7, #15]
 8007298:	7bfb      	ldrb	r3, [r7, #15]
 800729a:	2b03      	cmp	r3, #3
 800729c:	d9bc      	bls.n	8007218 <left_shift_check+0x20>
	  }
  }
  return 1;
 800729e:	2301      	movs	r3, #1
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bc80      	pop	{r7}
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	2000062c 	.word	0x2000062c
 80072b0:	2000053c 	.word	0x2000053c
 80072b4:	20000150 	.word	0x20000150

080072b8 <right_shift_check>:

uint8_t right_shift_check() {
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
	int8_t a, b;
	uint8_t i;
	Image_t* it = &tetimg_list[tetromino.shape];
 80072be:	4b2b      	ldr	r3, [pc, #172]	; (800736c <right_shift_check+0xb4>)
 80072c0:	789b      	ldrb	r3, [r3, #2]
 80072c2:	461a      	mov	r2, r3
 80072c4:	4613      	mov	r3, r2
 80072c6:	011b      	lsls	r3, r3, #4
 80072c8:	4413      	add	r3, r2
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	4a28      	ldr	r2, [pc, #160]	; (8007370 <right_shift_check+0xb8>)
 80072ce:	4413      	add	r3, r2
 80072d0:	60bb      	str	r3, [r7, #8]
	for(i=0;i<4;i++)
 80072d2:	2300      	movs	r3, #0
 80072d4:	73fb      	strb	r3, [r7, #15]
 80072d6:	e03f      	b.n	8007358 <right_shift_check+0xa0>
	{
	  a = it->x[tetromino.rotation][i]+tetromino.x + 1;
 80072d8:	4b24      	ldr	r3, [pc, #144]	; (800736c <right_shift_check+0xb4>)
 80072da:	78db      	ldrb	r3, [r3, #3]
 80072dc:	461a      	mov	r2, r3
 80072de:	7bfb      	ldrb	r3, [r7, #15]
 80072e0:	68b9      	ldr	r1, [r7, #8]
 80072e2:	0092      	lsls	r2, r2, #2
 80072e4:	440a      	add	r2, r1
 80072e6:	4413      	add	r3, r2
 80072e8:	f993 3000 	ldrsb.w	r3, [r3]
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	4b1f      	ldr	r3, [pc, #124]	; (800736c <right_shift_check+0xb4>)
 80072f0:	f993 3000 	ldrsb.w	r3, [r3]
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	4413      	add	r3, r2
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	3301      	adds	r3, #1
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	71fb      	strb	r3, [r7, #7]
	  b = it->y[tetromino.rotation][i]+tetromino.y;
 8007300:	4b1a      	ldr	r3, [pc, #104]	; (800736c <right_shift_check+0xb4>)
 8007302:	78db      	ldrb	r3, [r3, #3]
 8007304:	461a      	mov	r2, r3
 8007306:	7bfb      	ldrb	r3, [r7, #15]
 8007308:	68b9      	ldr	r1, [r7, #8]
 800730a:	0092      	lsls	r2, r2, #2
 800730c:	440a      	add	r2, r1
 800730e:	4413      	add	r3, r2
 8007310:	3310      	adds	r3, #16
 8007312:	f993 3000 	ldrsb.w	r3, [r3]
 8007316:	b2da      	uxtb	r2, r3
 8007318:	4b14      	ldr	r3, [pc, #80]	; (800736c <right_shift_check+0xb4>)
 800731a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800731e:	b2db      	uxtb	r3, r3
 8007320:	4413      	add	r3, r2
 8007322:	b2db      	uxtb	r3, r3
 8007324:	71bb      	strb	r3, [r7, #6]
		if(a>=GRID_WIDTH) {return 0;}
 8007326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800732a:	2b09      	cmp	r3, #9
 800732c:	dd01      	ble.n	8007332 <right_shift_check+0x7a>
 800732e:	2300      	movs	r3, #0
 8007330:	e016      	b.n	8007360 <right_shift_check+0xa8>
	  if(!grid[b][a].isEmpty) {return 0;}
 8007332:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8007336:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800733a:	480e      	ldr	r0, [pc, #56]	; (8007374 <right_shift_check+0xbc>)
 800733c:	4613      	mov	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	440b      	add	r3, r1
 8007346:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <right_shift_check+0x9a>
 800734e:	2300      	movs	r3, #0
 8007350:	e006      	b.n	8007360 <right_shift_check+0xa8>
	for(i=0;i<4;i++)
 8007352:	7bfb      	ldrb	r3, [r7, #15]
 8007354:	3301      	adds	r3, #1
 8007356:	73fb      	strb	r3, [r7, #15]
 8007358:	7bfb      	ldrb	r3, [r7, #15]
 800735a:	2b03      	cmp	r3, #3
 800735c:	d9bc      	bls.n	80072d8 <right_shift_check+0x20>
  }
  return 1;
 800735e:	2301      	movs	r3, #1
}
 8007360:	4618      	mov	r0, r3
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	bc80      	pop	{r7}
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	2000062c 	.word	0x2000062c
 8007370:	2000053c 	.word	0x2000053c
 8007374:	20000150 	.word	0x20000150

08007378 <down_shift_check>:

uint8_t down_shift_check() {
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
	int8_t a, b;
	uint8_t i;
	Image_t* it = &tetimg_list[tetromino.shape];
 800737e:	4b2b      	ldr	r3, [pc, #172]	; (800742c <down_shift_check+0xb4>)
 8007380:	789b      	ldrb	r3, [r3, #2]
 8007382:	461a      	mov	r2, r3
 8007384:	4613      	mov	r3, r2
 8007386:	011b      	lsls	r3, r3, #4
 8007388:	4413      	add	r3, r2
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	4a28      	ldr	r2, [pc, #160]	; (8007430 <down_shift_check+0xb8>)
 800738e:	4413      	add	r3, r2
 8007390:	60bb      	str	r3, [r7, #8]
	for(i=0;i<4;i++)
 8007392:	2300      	movs	r3, #0
 8007394:	73fb      	strb	r3, [r7, #15]
 8007396:	e03f      	b.n	8007418 <down_shift_check+0xa0>
	{
	  a = it->x[tetromino.rotation][i]+tetromino.x;
 8007398:	4b24      	ldr	r3, [pc, #144]	; (800742c <down_shift_check+0xb4>)
 800739a:	78db      	ldrb	r3, [r3, #3]
 800739c:	461a      	mov	r2, r3
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	68b9      	ldr	r1, [r7, #8]
 80073a2:	0092      	lsls	r2, r2, #2
 80073a4:	440a      	add	r2, r1
 80073a6:	4413      	add	r3, r2
 80073a8:	f993 3000 	ldrsb.w	r3, [r3]
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	4b1f      	ldr	r3, [pc, #124]	; (800742c <down_shift_check+0xb4>)
 80073b0:	f993 3000 	ldrsb.w	r3, [r3]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	4413      	add	r3, r2
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	71fb      	strb	r3, [r7, #7]
	  b = it->y[tetromino.rotation][i]+tetromino.y - 1;
 80073bc:	4b1b      	ldr	r3, [pc, #108]	; (800742c <down_shift_check+0xb4>)
 80073be:	78db      	ldrb	r3, [r3, #3]
 80073c0:	461a      	mov	r2, r3
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
 80073c4:	68b9      	ldr	r1, [r7, #8]
 80073c6:	0092      	lsls	r2, r2, #2
 80073c8:	440a      	add	r2, r1
 80073ca:	4413      	add	r3, r2
 80073cc:	3310      	adds	r3, #16
 80073ce:	f993 3000 	ldrsb.w	r3, [r3]
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	4b15      	ldr	r3, [pc, #84]	; (800742c <down_shift_check+0xb4>)
 80073d6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	4413      	add	r3, r2
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	71bb      	strb	r3, [r7, #6]
		if(b<0) {return 0;}
 80073e6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	da01      	bge.n	80073f2 <down_shift_check+0x7a>
 80073ee:	2300      	movs	r3, #0
 80073f0:	e016      	b.n	8007420 <down_shift_check+0xa8>
	  if(!grid[b][a].isEmpty) {return 0;}
 80073f2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80073f6:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80073fa:	480e      	ldr	r0, [pc, #56]	; (8007434 <down_shift_check+0xbc>)
 80073fc:	4613      	mov	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	005b      	lsls	r3, r3, #1
 8007404:	440b      	add	r3, r1
 8007406:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <down_shift_check+0x9a>
 800740e:	2300      	movs	r3, #0
 8007410:	e006      	b.n	8007420 <down_shift_check+0xa8>
	for(i=0;i<4;i++)
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	3301      	adds	r3, #1
 8007416:	73fb      	strb	r3, [r7, #15]
 8007418:	7bfb      	ldrb	r3, [r7, #15]
 800741a:	2b03      	cmp	r3, #3
 800741c:	d9bc      	bls.n	8007398 <down_shift_check+0x20>
  }
  return 1;
 800741e:	2301      	movs	r3, #1
}
 8007420:	4618      	mov	r0, r3
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	bc80      	pop	{r7}
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	2000062c 	.word	0x2000062c
 8007430:	2000053c 	.word	0x2000053c
 8007434:	20000150 	.word	0x20000150

08007438 <rotation_check>:

uint8_t rotation_check() {
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
	int8_t a, b, rot;
	uint8_t i;
	Image_t* it = &tetimg_list[tetromino.shape];
 800743e:	4b34      	ldr	r3, [pc, #208]	; (8007510 <rotation_check+0xd8>)
 8007440:	789b      	ldrb	r3, [r3, #2]
 8007442:	461a      	mov	r2, r3
 8007444:	4613      	mov	r3, r2
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	4413      	add	r3, r2
 800744a:	005b      	lsls	r3, r3, #1
 800744c:	4a31      	ldr	r2, [pc, #196]	; (8007514 <rotation_check+0xdc>)
 800744e:	4413      	add	r3, r2
 8007450:	60bb      	str	r3, [r7, #8]
	for(i=0;i<4;i++)
 8007452:	2300      	movs	r3, #0
 8007454:	73fb      	strb	r3, [r7, #15]
 8007456:	e052      	b.n	80074fe <rotation_check+0xc6>
	{
    rot = (tetromino.rotation+1)%4;
 8007458:	4b2d      	ldr	r3, [pc, #180]	; (8007510 <rotation_check+0xd8>)
 800745a:	78db      	ldrb	r3, [r3, #3]
 800745c:	3301      	adds	r3, #1
 800745e:	425a      	negs	r2, r3
 8007460:	f003 0303 	and.w	r3, r3, #3
 8007464:	f002 0203 	and.w	r2, r2, #3
 8007468:	bf58      	it	pl
 800746a:	4253      	negpl	r3, r2
 800746c:	71fb      	strb	r3, [r7, #7]
	  a = it->x[rot][i]+tetromino.x;
 800746e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8007472:	7bfb      	ldrb	r3, [r7, #15]
 8007474:	68b9      	ldr	r1, [r7, #8]
 8007476:	0092      	lsls	r2, r2, #2
 8007478:	440a      	add	r2, r1
 800747a:	4413      	add	r3, r2
 800747c:	f993 3000 	ldrsb.w	r3, [r3]
 8007480:	b2da      	uxtb	r2, r3
 8007482:	4b23      	ldr	r3, [pc, #140]	; (8007510 <rotation_check+0xd8>)
 8007484:	f993 3000 	ldrsb.w	r3, [r3]
 8007488:	b2db      	uxtb	r3, r3
 800748a:	4413      	add	r3, r2
 800748c:	b2db      	uxtb	r3, r3
 800748e:	71bb      	strb	r3, [r7, #6]
	  b = it->y[rot][i]+tetromino.y;
 8007490:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8007494:	7bfb      	ldrb	r3, [r7, #15]
 8007496:	68b9      	ldr	r1, [r7, #8]
 8007498:	0092      	lsls	r2, r2, #2
 800749a:	440a      	add	r2, r1
 800749c:	4413      	add	r3, r2
 800749e:	3310      	adds	r3, #16
 80074a0:	f993 3000 	ldrsb.w	r3, [r3]
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	4b1a      	ldr	r3, [pc, #104]	; (8007510 <rotation_check+0xd8>)
 80074a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	4413      	add	r3, r2
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	717b      	strb	r3, [r7, #5]
    if(a>=GRID_WIDTH || a<0 || b>=GRID_HEIGHT || b<0) {return 0;}
 80074b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80074b8:	2b09      	cmp	r3, #9
 80074ba:	dc0b      	bgt.n	80074d4 <rotation_check+0x9c>
 80074bc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	db07      	blt.n	80074d4 <rotation_check+0x9c>
 80074c4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80074c8:	2b13      	cmp	r3, #19
 80074ca:	dc03      	bgt.n	80074d4 <rotation_check+0x9c>
 80074cc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	da01      	bge.n	80074d8 <rotation_check+0xa0>
 80074d4:	2300      	movs	r3, #0
 80074d6:	e016      	b.n	8007506 <rotation_check+0xce>
	  if(!grid[b][a].isEmpty) {return 0;}
 80074d8:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80074dc:	f997 1006 	ldrsb.w	r1, [r7, #6]
 80074e0:	480d      	ldr	r0, [pc, #52]	; (8007518 <rotation_check+0xe0>)
 80074e2:	4613      	mov	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	440b      	add	r3, r1
 80074ec:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <rotation_check+0xc0>
 80074f4:	2300      	movs	r3, #0
 80074f6:	e006      	b.n	8007506 <rotation_check+0xce>
	for(i=0;i<4;i++)
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
 80074fa:	3301      	adds	r3, #1
 80074fc:	73fb      	strb	r3, [r7, #15]
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
 8007500:	2b03      	cmp	r3, #3
 8007502:	d9a9      	bls.n	8007458 <rotation_check+0x20>
  }
  return 1;
 8007504:	2301      	movs	r3, #1
}
 8007506:	4618      	mov	r0, r3
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	bc80      	pop	{r7}
 800750e:	4770      	bx	lr
 8007510:	2000062c 	.word	0x2000062c
 8007514:	2000053c 	.word	0x2000053c
 8007518:	20000150 	.word	0x20000150

0800751c <flush_tetromino>:

void flush_tetromino(){
 800751c:	b490      	push	{r4, r7}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
	uint8_t i,a,b;
	Image_t* it = &tetimg_list[tetromino.shape];
 8007522:	4b2a      	ldr	r3, [pc, #168]	; (80075cc <flush_tetromino+0xb0>)
 8007524:	789b      	ldrb	r3, [r3, #2]
 8007526:	461a      	mov	r2, r3
 8007528:	4613      	mov	r3, r2
 800752a:	011b      	lsls	r3, r3, #4
 800752c:	4413      	add	r3, r2
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	4a27      	ldr	r2, [pc, #156]	; (80075d0 <flush_tetromino+0xb4>)
 8007532:	4413      	add	r3, r2
 8007534:	60bb      	str	r3, [r7, #8]
	for(i=0;i<4;i++)
 8007536:	2300      	movs	r3, #0
 8007538:	73fb      	strb	r3, [r7, #15]
 800753a:	e03e      	b.n	80075ba <flush_tetromino+0x9e>
	{
	  a = it->x[tetromino.rotation][i]+tetromino.x;
 800753c:	4b23      	ldr	r3, [pc, #140]	; (80075cc <flush_tetromino+0xb0>)
 800753e:	78db      	ldrb	r3, [r3, #3]
 8007540:	461a      	mov	r2, r3
 8007542:	7bfb      	ldrb	r3, [r7, #15]
 8007544:	68b9      	ldr	r1, [r7, #8]
 8007546:	0092      	lsls	r2, r2, #2
 8007548:	440a      	add	r2, r1
 800754a:	4413      	add	r3, r2
 800754c:	f993 3000 	ldrsb.w	r3, [r3]
 8007550:	b2da      	uxtb	r2, r3
 8007552:	4b1e      	ldr	r3, [pc, #120]	; (80075cc <flush_tetromino+0xb0>)
 8007554:	f993 3000 	ldrsb.w	r3, [r3]
 8007558:	b2db      	uxtb	r3, r3
 800755a:	4413      	add	r3, r2
 800755c:	71fb      	strb	r3, [r7, #7]
	  b = it->y[tetromino.rotation][i]+tetromino.y;
 800755e:	4b1b      	ldr	r3, [pc, #108]	; (80075cc <flush_tetromino+0xb0>)
 8007560:	78db      	ldrb	r3, [r3, #3]
 8007562:	461a      	mov	r2, r3
 8007564:	7bfb      	ldrb	r3, [r7, #15]
 8007566:	68b9      	ldr	r1, [r7, #8]
 8007568:	0092      	lsls	r2, r2, #2
 800756a:	440a      	add	r2, r1
 800756c:	4413      	add	r3, r2
 800756e:	3310      	adds	r3, #16
 8007570:	f993 3000 	ldrsb.w	r3, [r3]
 8007574:	b2da      	uxtb	r2, r3
 8007576:	4b15      	ldr	r3, [pc, #84]	; (80075cc <flush_tetromino+0xb0>)
 8007578:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	4413      	add	r3, r2
 8007580:	71bb      	strb	r3, [r7, #6]
		grid[b][a].isEmpty = 0;
 8007582:	79ba      	ldrb	r2, [r7, #6]
 8007584:	79f9      	ldrb	r1, [r7, #7]
 8007586:	4813      	ldr	r0, [pc, #76]	; (80075d4 <flush_tetromino+0xb8>)
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	440b      	add	r3, r1
 8007592:	2200      	movs	r2, #0
 8007594:	f800 2023 	strb.w	r2, [r0, r3, lsl #2]
		grid[b][a].color = it->color;
 8007598:	79ba      	ldrb	r2, [r7, #6]
 800759a:	79f9      	ldrb	r1, [r7, #7]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	8c1c      	ldrh	r4, [r3, #32]
 80075a0:	480c      	ldr	r0, [pc, #48]	; (80075d4 <flush_tetromino+0xb8>)
 80075a2:	4613      	mov	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4413      	add	r3, r2
 80075a8:	005b      	lsls	r3, r3, #1
 80075aa:	440b      	add	r3, r1
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4403      	add	r3, r0
 80075b0:	4622      	mov	r2, r4
 80075b2:	805a      	strh	r2, [r3, #2]
	for(i=0;i<4;i++)
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
 80075b6:	3301      	adds	r3, #1
 80075b8:	73fb      	strb	r3, [r7, #15]
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d9bd      	bls.n	800753c <flush_tetromino+0x20>
	}
}
 80075c0:	bf00      	nop
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bc90      	pop	{r4, r7}
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	2000062c 	.word	0x2000062c
 80075d0:	2000053c 	.word	0x2000053c
 80075d4:	20000150 	.word	0x20000150

080075d8 <tetromino_reset>:

void tetromino_reset() {
 80075d8:	b598      	push	{r3, r4, r7, lr}
 80075da:	af00      	add	r7, sp, #0
  tetromino = tetromino_next;
 80075dc:	4a15      	ldr	r2, [pc, #84]	; (8007634 <tetromino_reset+0x5c>)
 80075de:	4b16      	ldr	r3, [pc, #88]	; (8007638 <tetromino_reset+0x60>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6013      	str	r3, [r2, #0]
  tetromino_next = (Tetromino_t){
    .x = 3, .y = GRID_HEIGHT-4,
    .shape = rand()%SHAPE_NUM,
 80075e4:	f002 fcbc 	bl	8009f60 <rand>
 80075e8:	4602      	mov	r2, r0
 80075ea:	4b14      	ldr	r3, [pc, #80]	; (800763c <tetromino_reset+0x64>)
 80075ec:	fb83 1302 	smull	r1, r3, r3, r2
 80075f0:	4413      	add	r3, r2
 80075f2:	1099      	asrs	r1, r3, #2
 80075f4:	17d3      	asrs	r3, r2, #31
 80075f6:	1ac9      	subs	r1, r1, r3
 80075f8:	460b      	mov	r3, r1
 80075fa:	00db      	lsls	r3, r3, #3
 80075fc:	1a5b      	subs	r3, r3, r1
 80075fe:	1ad1      	subs	r1, r2, r3
  tetromino_next = (Tetromino_t){
 8007600:	b2cc      	uxtb	r4, r1
    .rotation = rand()%4
 8007602:	f002 fcad 	bl	8009f60 <rand>
 8007606:	4603      	mov	r3, r0
 8007608:	425a      	negs	r2, r3
 800760a:	f003 0303 	and.w	r3, r3, #3
 800760e:	f002 0203 	and.w	r2, r2, #3
 8007612:	bf58      	it	pl
 8007614:	4253      	negpl	r3, r2
  tetromino_next = (Tetromino_t){
 8007616:	b2da      	uxtb	r2, r3
 8007618:	4b07      	ldr	r3, [pc, #28]	; (8007638 <tetromino_reset+0x60>)
 800761a:	2103      	movs	r1, #3
 800761c:	7019      	strb	r1, [r3, #0]
 800761e:	4b06      	ldr	r3, [pc, #24]	; (8007638 <tetromino_reset+0x60>)
 8007620:	2110      	movs	r1, #16
 8007622:	7059      	strb	r1, [r3, #1]
 8007624:	4b04      	ldr	r3, [pc, #16]	; (8007638 <tetromino_reset+0x60>)
 8007626:	4621      	mov	r1, r4
 8007628:	7099      	strb	r1, [r3, #2]
 800762a:	4b03      	ldr	r3, [pc, #12]	; (8007638 <tetromino_reset+0x60>)
 800762c:	70da      	strb	r2, [r3, #3]
  };
}
 800762e:	bf00      	nop
 8007630:	bd98      	pop	{r3, r4, r7, pc}
 8007632:	bf00      	nop
 8007634:	2000062c 	.word	0x2000062c
 8007638:	20000630 	.word	0x20000630
 800763c:	92492493 	.word	0x92492493

08007640 <tetromino_init>:

void tetromino_init() {
 8007640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007642:	af00      	add	r7, sp, #0
  srand(rand());
 8007644:	f002 fc8c 	bl	8009f60 <rand>
 8007648:	4603      	mov	r3, r0
 800764a:	4618      	mov	r0, r3
 800764c:	f002 fc64 	bl	8009f18 <srand>
  tetromino_reset();
 8007650:	f7ff ffc2 	bl	80075d8 <tetromino_reset>
  tetromino_reset();
 8007654:	f7ff ffc0 	bl	80075d8 <tetromino_reset>

  tetimg_list[SHAPE_I] = (Image_t){
 8007658:	4b50      	ldr	r3, [pc, #320]	; (800779c <tetromino_init+0x15c>)
 800765a:	4a51      	ldr	r2, [pc, #324]	; (80077a0 <tetromino_init+0x160>)
 800765c:	4614      	mov	r4, r2
 800765e:	469c      	mov	ip, r3
 8007660:	f104 0e20 	add.w	lr, r4, #32
 8007664:	4665      	mov	r5, ip
 8007666:	4626      	mov	r6, r4
 8007668:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800766a:	6028      	str	r0, [r5, #0]
 800766c:	6069      	str	r1, [r5, #4]
 800766e:	60aa      	str	r2, [r5, #8]
 8007670:	60eb      	str	r3, [r5, #12]
 8007672:	3410      	adds	r4, #16
 8007674:	f10c 0c10 	add.w	ip, ip, #16
 8007678:	4574      	cmp	r4, lr
 800767a:	d1f3      	bne.n	8007664 <tetromino_init+0x24>
 800767c:	4662      	mov	r2, ip
 800767e:	4623      	mov	r3, r4
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	8013      	strh	r3, [r2, #0]
      .x={{0,1,2,3},{2,2,2,2},{0,1,2,3},{2,2,2,2}},
      .y={{3,3,3,3},{0,1,2,3},{3,3,3,3},{0,1,2,3}},
  		.color = RED };
  tetimg_list[SHAPE_J] = (Image_t){
 8007684:	4b45      	ldr	r3, [pc, #276]	; (800779c <tetromino_init+0x15c>)
 8007686:	4a47      	ldr	r2, [pc, #284]	; (80077a4 <tetromino_init+0x164>)
 8007688:	4614      	mov	r4, r2
 800768a:	f103 0c22 	add.w	ip, r3, #34	; 0x22
 800768e:	f104 0e20 	add.w	lr, r4, #32
 8007692:	4665      	mov	r5, ip
 8007694:	4626      	mov	r6, r4
 8007696:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007698:	6028      	str	r0, [r5, #0]
 800769a:	6069      	str	r1, [r5, #4]
 800769c:	60aa      	str	r2, [r5, #8]
 800769e:	60eb      	str	r3, [r5, #12]
 80076a0:	3410      	adds	r4, #16
 80076a2:	f10c 0c10 	add.w	ip, ip, #16
 80076a6:	4574      	cmp	r4, lr
 80076a8:	d1f3      	bne.n	8007692 <tetromino_init+0x52>
 80076aa:	4662      	mov	r2, ip
 80076ac:	4623      	mov	r3, r4
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	8013      	strh	r3, [r2, #0]
      .x={{0,1,2,2},{0,1,1,1},{0,0,1,2},{1,1,1,2}},
      .y={{3,3,3,2},{1,1,2,3},{3,2,2,2},{1,2,3,3}},
  		.color = BRRED };
  tetimg_list[SHAPE_L] = (Image_t){
 80076b2:	4b3a      	ldr	r3, [pc, #232]	; (800779c <tetromino_init+0x15c>)
 80076b4:	4a3c      	ldr	r2, [pc, #240]	; (80077a8 <tetromino_init+0x168>)
 80076b6:	4614      	mov	r4, r2
 80076b8:	f103 0c44 	add.w	ip, r3, #68	; 0x44
 80076bc:	f104 0e20 	add.w	lr, r4, #32
 80076c0:	4665      	mov	r5, ip
 80076c2:	4626      	mov	r6, r4
 80076c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80076c6:	6028      	str	r0, [r5, #0]
 80076c8:	6069      	str	r1, [r5, #4]
 80076ca:	60aa      	str	r2, [r5, #8]
 80076cc:	60eb      	str	r3, [r5, #12]
 80076ce:	3410      	adds	r4, #16
 80076d0:	f10c 0c10 	add.w	ip, ip, #16
 80076d4:	4574      	cmp	r4, lr
 80076d6:	d1f3      	bne.n	80076c0 <tetromino_init+0x80>
 80076d8:	4662      	mov	r2, ip
 80076da:	4623      	mov	r3, r4
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	8013      	strh	r3, [r2, #0]
      .x={{0,0,1,2},{1,2,2,2},{0,1,2,2},{1,1,1,2}},
      .y={{2,3,3,3},{3,3,2,1},{2,2,2,3},{3,2,1,1}},
  		.color = GRAY };
  tetimg_list[SHAPE_O] = (Image_t){
 80076e0:	4b2e      	ldr	r3, [pc, #184]	; (800779c <tetromino_init+0x15c>)
 80076e2:	4a32      	ldr	r2, [pc, #200]	; (80077ac <tetromino_init+0x16c>)
 80076e4:	4614      	mov	r4, r2
 80076e6:	f103 0c66 	add.w	ip, r3, #102	; 0x66
 80076ea:	f104 0e20 	add.w	lr, r4, #32
 80076ee:	4665      	mov	r5, ip
 80076f0:	4626      	mov	r6, r4
 80076f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80076f4:	6028      	str	r0, [r5, #0]
 80076f6:	6069      	str	r1, [r5, #4]
 80076f8:	60aa      	str	r2, [r5, #8]
 80076fa:	60eb      	str	r3, [r5, #12]
 80076fc:	3410      	adds	r4, #16
 80076fe:	f10c 0c10 	add.w	ip, ip, #16
 8007702:	4574      	cmp	r4, lr
 8007704:	d1f3      	bne.n	80076ee <tetromino_init+0xae>
 8007706:	4662      	mov	r2, ip
 8007708:	4623      	mov	r3, r4
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	8013      	strh	r3, [r2, #0]
      .x={{0,1,0,1},{0,1,0,1},{0,1,0,1},{0,1,0,1}},
      .y={{3,3,2,2},{3,3,2,2},{3,3,2,2},{3,3,2,2}},
  		.color = BLUE };
  tetimg_list[SHAPE_S] = (Image_t){
 800770e:	4b23      	ldr	r3, [pc, #140]	; (800779c <tetromino_init+0x15c>)
 8007710:	4a27      	ldr	r2, [pc, #156]	; (80077b0 <tetromino_init+0x170>)
 8007712:	4614      	mov	r4, r2
 8007714:	f103 0c88 	add.w	ip, r3, #136	; 0x88
 8007718:	f104 0e20 	add.w	lr, r4, #32
 800771c:	4665      	mov	r5, ip
 800771e:	4626      	mov	r6, r4
 8007720:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007722:	6028      	str	r0, [r5, #0]
 8007724:	6069      	str	r1, [r5, #4]
 8007726:	60aa      	str	r2, [r5, #8]
 8007728:	60eb      	str	r3, [r5, #12]
 800772a:	3410      	adds	r4, #16
 800772c:	f10c 0c10 	add.w	ip, ip, #16
 8007730:	4574      	cmp	r4, lr
 8007732:	d1f3      	bne.n	800771c <tetromino_init+0xdc>
 8007734:	4662      	mov	r2, ip
 8007736:	4623      	mov	r3, r4
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	8013      	strh	r3, [r2, #0]
      .x={{0,1,1,2},{1,1,2,2},{0,1,1,2},{1,1,2,2}},
      .y={{2,2,3,3},{3,2,2,1},{2,2,3,3},{3,2,2,1}},
  		.color = GREEN };
  tetimg_list[SHAPE_T] = (Image_t){
 800773c:	4b17      	ldr	r3, [pc, #92]	; (800779c <tetromino_init+0x15c>)
 800773e:	4a1d      	ldr	r2, [pc, #116]	; (80077b4 <tetromino_init+0x174>)
 8007740:	4614      	mov	r4, r2
 8007742:	f103 0caa 	add.w	ip, r3, #170	; 0xaa
 8007746:	f104 0e20 	add.w	lr, r4, #32
 800774a:	4665      	mov	r5, ip
 800774c:	4626      	mov	r6, r4
 800774e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007750:	6028      	str	r0, [r5, #0]
 8007752:	6069      	str	r1, [r5, #4]
 8007754:	60aa      	str	r2, [r5, #8]
 8007756:	60eb      	str	r3, [r5, #12]
 8007758:	3410      	adds	r4, #16
 800775a:	f10c 0c10 	add.w	ip, ip, #16
 800775e:	4574      	cmp	r4, lr
 8007760:	d1f3      	bne.n	800774a <tetromino_init+0x10a>
 8007762:	4662      	mov	r2, ip
 8007764:	4623      	mov	r3, r4
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	8013      	strh	r3, [r2, #0]
      .x={{0,1,1,2},{1,2,2,2},{0,1,1,2},{0,0,0,1}},
      .y={{3,3,2,3},{2,3,2,1},{2,3,2,2},{1,2,3,2}},
  		.color = YELLOW };
  tetimg_list[SHAPE_Z] = (Image_t){
 800776a:	4b0c      	ldr	r3, [pc, #48]	; (800779c <tetromino_init+0x15c>)
 800776c:	4a12      	ldr	r2, [pc, #72]	; (80077b8 <tetromino_init+0x178>)
 800776e:	4614      	mov	r4, r2
 8007770:	f103 0ccc 	add.w	ip, r3, #204	; 0xcc
 8007774:	f104 0e20 	add.w	lr, r4, #32
 8007778:	4665      	mov	r5, ip
 800777a:	4626      	mov	r6, r4
 800777c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800777e:	6028      	str	r0, [r5, #0]
 8007780:	6069      	str	r1, [r5, #4]
 8007782:	60aa      	str	r2, [r5, #8]
 8007784:	60eb      	str	r3, [r5, #12]
 8007786:	3410      	adds	r4, #16
 8007788:	f10c 0c10 	add.w	ip, ip, #16
 800778c:	4574      	cmp	r4, lr
 800778e:	d1f3      	bne.n	8007778 <tetromino_init+0x138>
 8007790:	4662      	mov	r2, ip
 8007792:	4623      	mov	r3, r4
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	8013      	strh	r3, [r2, #0]
      .x={{0,1,1,2},{0,0,1,1},{0,1,1,2},{0,0,1,1}},
      .y={{3,3,2,2},{1,2,2,3},{3,3,2,2},{1,2,2,3}},
  		.color = BROWN };
}
 8007798:	bf00      	nop
 800779a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800779c:	2000053c 	.word	0x2000053c
 80077a0:	0800b130 	.word	0x0800b130
 80077a4:	0800b154 	.word	0x0800b154
 80077a8:	0800b178 	.word	0x0800b178
 80077ac:	0800b19c 	.word	0x0800b19c
 80077b0:	0800b1c0 	.word	0x0800b1c0
 80077b4:	0800b1e4 	.word	0x0800b1e4
 80077b8:	0800b208 	.word	0x0800b208

080077bc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80077c2:	f107 0308 	add.w	r3, r7, #8
 80077c6:	2200      	movs	r2, #0
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	605a      	str	r2, [r3, #4]
 80077cc:	609a      	str	r2, [r3, #8]
 80077ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077d0:	463b      	mov	r3, r7
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80077d8:	4b1d      	ldr	r3, [pc, #116]	; (8007850 <MX_TIM3_Init+0x94>)
 80077da:	4a1e      	ldr	r2, [pc, #120]	; (8007854 <MX_TIM3_Init+0x98>)
 80077dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80077de:	4b1c      	ldr	r3, [pc, #112]	; (8007850 <MX_TIM3_Init+0x94>)
 80077e0:	2247      	movs	r2, #71	; 0x47
 80077e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077e4:	4b1a      	ldr	r3, [pc, #104]	; (8007850 <MX_TIM3_Init+0x94>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80077ea:	4b19      	ldr	r3, [pc, #100]	; (8007850 <MX_TIM3_Init+0x94>)
 80077ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80077f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077f2:	4b17      	ldr	r3, [pc, #92]	; (8007850 <MX_TIM3_Init+0x94>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80077f8:	4b15      	ldr	r3, [pc, #84]	; (8007850 <MX_TIM3_Init+0x94>)
 80077fa:	2200      	movs	r2, #0
 80077fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80077fe:	4814      	ldr	r0, [pc, #80]	; (8007850 <MX_TIM3_Init+0x94>)
 8007800:	f001 fb68 	bl	8008ed4 <HAL_TIM_Base_Init>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800780a:	f7ff fa32 	bl	8006c72 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800780e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007812:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007814:	f107 0308 	add.w	r3, r7, #8
 8007818:	4619      	mov	r1, r3
 800781a:	480d      	ldr	r0, [pc, #52]	; (8007850 <MX_TIM3_Init+0x94>)
 800781c:	f001 fcb0 	bl	8009180 <HAL_TIM_ConfigClockSource>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8007826:	f7ff fa24 	bl	8006c72 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800782a:	2300      	movs	r3, #0
 800782c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800782e:	2300      	movs	r3, #0
 8007830:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007832:	463b      	mov	r3, r7
 8007834:	4619      	mov	r1, r3
 8007836:	4806      	ldr	r0, [pc, #24]	; (8007850 <MX_TIM3_Init+0x94>)
 8007838:	f001 fe8e 	bl	8009558 <HAL_TIMEx_MasterConfigSynchronization>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8007842:	f7ff fa16 	bl	8006c72 <Error_Handler>
  }

}
 8007846:	bf00      	nop
 8007848:	3718      	adds	r7, #24
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	20000634 	.word	0x20000634
 8007854:	40000400 	.word	0x40000400

08007858 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a0d      	ldr	r2, [pc, #52]	; (800789c <HAL_TIM_Base_MspInit+0x44>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d113      	bne.n	8007892 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800786a:	4b0d      	ldr	r3, [pc, #52]	; (80078a0 <HAL_TIM_Base_MspInit+0x48>)
 800786c:	69db      	ldr	r3, [r3, #28]
 800786e:	4a0c      	ldr	r2, [pc, #48]	; (80078a0 <HAL_TIM_Base_MspInit+0x48>)
 8007870:	f043 0302 	orr.w	r3, r3, #2
 8007874:	61d3      	str	r3, [r2, #28]
 8007876:	4b0a      	ldr	r3, [pc, #40]	; (80078a0 <HAL_TIM_Base_MspInit+0x48>)
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007882:	2200      	movs	r2, #0
 8007884:	2100      	movs	r1, #0
 8007886:	201d      	movs	r0, #29
 8007888:	f000 fc0d 	bl	80080a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800788c:	201d      	movs	r0, #29
 800788e:	f000 fc26 	bl	80080de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8007892:	bf00      	nop
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	40000400 	.word	0x40000400
 80078a0:	40021000 	.word	0x40021000

080078a4 <draw_bg>:
#include "usart.h"
#include "tetromino.h"
#include "parameter.h"

void draw_bg()
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af02      	add	r7, sp, #8
    POINT_COLOR = BLACK;
 80078aa:	4b18      	ldr	r3, [pc, #96]	; (800790c <draw_bg+0x68>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	801a      	strh	r2, [r3, #0]
    //main window
    LCD_DrawRectangle(9, 9, 161, 311);
 80078b0:	f240 1337 	movw	r3, #311	; 0x137
 80078b4:	22a1      	movs	r2, #161	; 0xa1
 80078b6:	2109      	movs	r1, #9
 80078b8:	2009      	movs	r0, #9
 80078ba:	f7ff f81c 	bl	80068f6 <LCD_DrawRectangle>
    //sub window
    LCD_DrawRectangle(165, 10, 235, 80);
 80078be:	2350      	movs	r3, #80	; 0x50
 80078c0:	22eb      	movs	r2, #235	; 0xeb
 80078c2:	210a      	movs	r1, #10
 80078c4:	20a5      	movs	r0, #165	; 0xa5
 80078c6:	f7ff f816 	bl	80068f6 <LCD_DrawRectangle>
    LCD_ShowString(170, 85, 200, 16, 16, "Next");
 80078ca:	4b11      	ldr	r3, [pc, #68]	; (8007910 <draw_bg+0x6c>)
 80078cc:	9301      	str	r3, [sp, #4]
 80078ce:	2310      	movs	r3, #16
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	2310      	movs	r3, #16
 80078d4:	22c8      	movs	r2, #200	; 0xc8
 80078d6:	2155      	movs	r1, #85	; 0x55
 80078d8:	20aa      	movs	r0, #170	; 0xaa
 80078da:	f7ff f8e5 	bl	8006aa8 <LCD_ShowString>
    LCD_ShowString(170, 230, 200, 16, 16, "Score:");
 80078de:	4b0d      	ldr	r3, [pc, #52]	; (8007914 <draw_bg+0x70>)
 80078e0:	9301      	str	r3, [sp, #4]
 80078e2:	2310      	movs	r3, #16
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	2310      	movs	r3, #16
 80078e8:	22c8      	movs	r2, #200	; 0xc8
 80078ea:	21e6      	movs	r1, #230	; 0xe6
 80078ec:	20aa      	movs	r0, #170	; 0xaa
 80078ee:	f7ff f8db 	bl	8006aa8 <LCD_ShowString>
    LCD_ShowString(170, 250, 200, 16, 16, "     0");
 80078f2:	4b09      	ldr	r3, [pc, #36]	; (8007918 <draw_bg+0x74>)
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	2310      	movs	r3, #16
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	2310      	movs	r3, #16
 80078fc:	22c8      	movs	r2, #200	; 0xc8
 80078fe:	21fa      	movs	r1, #250	; 0xfa
 8007900:	20aa      	movs	r0, #170	; 0xaa
 8007902:	f7ff f8d1 	bl	8006aa8 <LCD_ShowString>
    // LCD_Fill(10,10,25,25,BLUE);
}
 8007906:	bf00      	nop
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	20000098 	.word	0x20000098
 8007910:	0800b22c 	.word	0x0800b22c
 8007914:	0800b234 	.word	0x0800b234
 8007918:	0800b23c 	.word	0x0800b23c

0800791c <draw_block>:
{
    LCD_Fill(170, 15, 230, 75, WHITE);
}

void draw_block(uint8_t x, uint8_t y, uint16_t color, uint8_t mode) //mode 0:main window 1:sub winodw
{
 800791c:	b590      	push	{r4, r7, lr}
 800791e:	b087      	sub	sp, #28
 8007920:	af02      	add	r7, sp, #8
 8007922:	4604      	mov	r4, r0
 8007924:	4608      	mov	r0, r1
 8007926:	4611      	mov	r1, r2
 8007928:	461a      	mov	r2, r3
 800792a:	4623      	mov	r3, r4
 800792c:	71fb      	strb	r3, [r7, #7]
 800792e:	4603      	mov	r3, r0
 8007930:	71bb      	strb	r3, [r7, #6]
 8007932:	460b      	mov	r3, r1
 8007934:	80bb      	strh	r3, [r7, #4]
 8007936:	4613      	mov	r3, r2
 8007938:	70fb      	strb	r3, [r7, #3]
    uint16_t rx, ry;

    if (!mode)
 800793a:	78fb      	ldrb	r3, [r7, #3]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d111      	bne.n	8007964 <draw_block+0x48>
    {
        rx = 10 + x * CELL_LENGTH;
 8007940:	79fb      	ldrb	r3, [r7, #7]
 8007942:	b29b      	uxth	r3, r3
 8007944:	461a      	mov	r2, r3
 8007946:	0112      	lsls	r2, r2, #4
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	b29b      	uxth	r3, r3
 800794c:	330a      	adds	r3, #10
 800794e:	81fb      	strh	r3, [r7, #14]
        ry = 295 - y * CELL_LENGTH;
 8007950:	79bb      	ldrb	r3, [r7, #6]
 8007952:	b29b      	uxth	r3, r3
 8007954:	461a      	mov	r2, r3
 8007956:	011b      	lsls	r3, r3, #4
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	b29b      	uxth	r3, r3
 800795c:	f203 1327 	addw	r3, r3, #295	; 0x127
 8007960:	81bb      	strh	r3, [r7, #12]
 8007962:	e00f      	b.n	8007984 <draw_block+0x68>
    }
    else
    {
        rx = 170 + x * CELL_LENGTH;
 8007964:	79fb      	ldrb	r3, [r7, #7]
 8007966:	b29b      	uxth	r3, r3
 8007968:	461a      	mov	r2, r3
 800796a:	0112      	lsls	r2, r2, #4
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	b29b      	uxth	r3, r3
 8007970:	33aa      	adds	r3, #170	; 0xaa
 8007972:	81fb      	strh	r3, [r7, #14]
        ry = 60 - y * CELL_LENGTH;
 8007974:	79bb      	ldrb	r3, [r7, #6]
 8007976:	b29b      	uxth	r3, r3
 8007978:	461a      	mov	r2, r3
 800797a:	011b      	lsls	r3, r3, #4
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	b29b      	uxth	r3, r3
 8007980:	333c      	adds	r3, #60	; 0x3c
 8007982:	81bb      	strh	r3, [r7, #12]
    }
    POINT_COLOR = color;
 8007984:	4a10      	ldr	r2, [pc, #64]	; (80079c8 <draw_block+0xac>)
 8007986:	88bb      	ldrh	r3, [r7, #4]
 8007988:	8013      	strh	r3, [r2, #0]
    LCD_DrawRectangle(rx, ry, rx + 15, ry + 15);
 800798a:	89fb      	ldrh	r3, [r7, #14]
 800798c:	330f      	adds	r3, #15
 800798e:	b29a      	uxth	r2, r3
 8007990:	89bb      	ldrh	r3, [r7, #12]
 8007992:	330f      	adds	r3, #15
 8007994:	b29b      	uxth	r3, r3
 8007996:	89b9      	ldrh	r1, [r7, #12]
 8007998:	89f8      	ldrh	r0, [r7, #14]
 800799a:	f7fe ffac 	bl	80068f6 <LCD_DrawRectangle>
    LCD_Fill(rx + 2, ry + 2, rx + 13, ry + 13, color);
 800799e:	89fb      	ldrh	r3, [r7, #14]
 80079a0:	3302      	adds	r3, #2
 80079a2:	b298      	uxth	r0, r3
 80079a4:	89bb      	ldrh	r3, [r7, #12]
 80079a6:	3302      	adds	r3, #2
 80079a8:	b299      	uxth	r1, r3
 80079aa:	89fb      	ldrh	r3, [r7, #14]
 80079ac:	330d      	adds	r3, #13
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	89bb      	ldrh	r3, [r7, #12]
 80079b2:	330d      	adds	r3, #13
 80079b4:	b29c      	uxth	r4, r3
 80079b6:	88bb      	ldrh	r3, [r7, #4]
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	4623      	mov	r3, r4
 80079bc:	f7fe fe8c 	bl	80066d8 <LCD_Fill>
}
 80079c0:	bf00      	nop
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd90      	pop	{r4, r7, pc}
 80079c8:	20000098 	.word	0x20000098

080079cc <grid_render>:

void grid_render()
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
    int8_t x, y;
    cell_t cell;
    for (y = GRID_HEIGHT-1; y >= 0; y--)
 80079d2:	2313      	movs	r3, #19
 80079d4:	71bb      	strb	r3, [r7, #6]
 80079d6:	e032      	b.n	8007a3e <grid_render+0x72>
    {
        for (x = 0; x < GRID_WIDTH; x++)
 80079d8:	2300      	movs	r3, #0
 80079da:	71fb      	strb	r3, [r7, #7]
 80079dc:	e025      	b.n	8007a2a <grid_render+0x5e>
        {
            cell = grid[y][x];
 80079de:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80079e2:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80079e6:	481a      	ldr	r0, [pc, #104]	; (8007a50 <grid_render+0x84>)
 80079e8:	4613      	mov	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	005b      	lsls	r3, r3, #1
 80079f0:	440b      	add	r3, r1
 80079f2:	463a      	mov	r2, r7
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4403      	add	r3, r0
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	6010      	str	r0, [r2, #0]
            if (cell.isEmpty){
 80079fc:	783b      	ldrb	r3, [r7, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d007      	beq.n	8007a12 <grid_render+0x46>
              draw_block(x, y, WHITE, 0);
 8007a02:	79f8      	ldrb	r0, [r7, #7]
 8007a04:	79b9      	ldrb	r1, [r7, #6]
 8007a06:	2300      	movs	r3, #0
 8007a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a0c:	f7ff ff86 	bl	800791c <draw_block>
 8007a10:	e005      	b.n	8007a1e <grid_render+0x52>
            } else {
              draw_block(x, y, cell.color, 0);
 8007a12:	79f8      	ldrb	r0, [r7, #7]
 8007a14:	79b9      	ldrb	r1, [r7, #6]
 8007a16:	887a      	ldrh	r2, [r7, #2]
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f7ff ff7f 	bl	800791c <draw_block>
        for (x = 0; x < GRID_WIDTH; x++)
 8007a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	3301      	adds	r3, #1
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	71fb      	strb	r3, [r7, #7]
 8007a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a2e:	2b09      	cmp	r3, #9
 8007a30:	ddd5      	ble.n	80079de <grid_render+0x12>
    for (y = GRID_HEIGHT-1; y >= 0; y--)
 8007a32:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	71bb      	strb	r3, [r7, #6]
 8007a3e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	dac8      	bge.n	80079d8 <grid_render+0xc>
            }
        }
    }
}
 8007a46:	bf00      	nop
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20000150 	.word	0x20000150

08007a54 <draw_tetromino>:
    }
}


void draw_tetromino(uint8_t clear)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
	Image_t* it = &tetimg_list[tetromino.shape];
 8007a5e:	4b23      	ldr	r3, [pc, #140]	; (8007aec <draw_tetromino+0x98>)
 8007a60:	789b      	ldrb	r3, [r3, #2]
 8007a62:	461a      	mov	r2, r3
 8007a64:	4613      	mov	r3, r2
 8007a66:	011b      	lsls	r3, r3, #4
 8007a68:	4413      	add	r3, r2
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	4a20      	ldr	r2, [pc, #128]	; (8007af0 <draw_tetromino+0x9c>)
 8007a6e:	4413      	add	r3, r2
 8007a70:	60bb      	str	r3, [r7, #8]
  uint16_t color = it->color;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	8c1b      	ldrh	r3, [r3, #32]
 8007a76:	81bb      	strh	r3, [r7, #12]
  if(clear){color = WHITE;}
 8007a78:	79fb      	ldrb	r3, [r7, #7]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d002      	beq.n	8007a84 <draw_tetromino+0x30>
 8007a7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a82:	81bb      	strh	r3, [r7, #12]
	for(i=0;i<4;i++)
 8007a84:	2300      	movs	r3, #0
 8007a86:	73fb      	strb	r3, [r7, #15]
 8007a88:	e029      	b.n	8007ade <draw_tetromino+0x8a>
	{
	   draw_block(it->x[tetromino.rotation][i] + tetromino.x, it->y[tetromino.rotation][i] + tetromino.y, color, 0);
 8007a8a:	4b18      	ldr	r3, [pc, #96]	; (8007aec <draw_tetromino+0x98>)
 8007a8c:	78db      	ldrb	r3, [r3, #3]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	68b9      	ldr	r1, [r7, #8]
 8007a94:	0092      	lsls	r2, r2, #2
 8007a96:	440a      	add	r2, r1
 8007a98:	4413      	add	r3, r2
 8007a9a:	f993 3000 	ldrsb.w	r3, [r3]
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	4b12      	ldr	r3, [pc, #72]	; (8007aec <draw_tetromino+0x98>)
 8007aa2:	f993 3000 	ldrsb.w	r3, [r3]
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	4413      	add	r3, r2
 8007aaa:	b2d8      	uxtb	r0, r3
 8007aac:	4b0f      	ldr	r3, [pc, #60]	; (8007aec <draw_tetromino+0x98>)
 8007aae:	78db      	ldrb	r3, [r3, #3]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	68b9      	ldr	r1, [r7, #8]
 8007ab6:	0092      	lsls	r2, r2, #2
 8007ab8:	440a      	add	r2, r1
 8007aba:	4413      	add	r3, r2
 8007abc:	3310      	adds	r3, #16
 8007abe:	f993 3000 	ldrsb.w	r3, [r3]
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	4b09      	ldr	r3, [pc, #36]	; (8007aec <draw_tetromino+0x98>)
 8007ac6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	4413      	add	r3, r2
 8007ace:	b2d9      	uxtb	r1, r3
 8007ad0:	89ba      	ldrh	r2, [r7, #12]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f7ff ff22 	bl	800791c <draw_block>
	for(i=0;i<4;i++)
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
 8007ada:	3301      	adds	r3, #1
 8007adc:	73fb      	strb	r3, [r7, #15]
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
 8007ae0:	2b03      	cmp	r3, #3
 8007ae2:	d9d2      	bls.n	8007a8a <draw_tetromino+0x36>
	}
}
 8007ae4:	bf00      	nop
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	2000062c 	.word	0x2000062c
 8007af0:	2000053c 	.word	0x2000053c

08007af4 <draw_next_tetromino>:

void draw_next_tetromino(uint8_t clear)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	4603      	mov	r3, r0
 8007afc:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	Image_t* it = &tetimg_list[tetromino_next.shape];
 8007afe:	4b1d      	ldr	r3, [pc, #116]	; (8007b74 <draw_next_tetromino+0x80>)
 8007b00:	789b      	ldrb	r3, [r3, #2]
 8007b02:	461a      	mov	r2, r3
 8007b04:	4613      	mov	r3, r2
 8007b06:	011b      	lsls	r3, r3, #4
 8007b08:	4413      	add	r3, r2
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	4a1a      	ldr	r2, [pc, #104]	; (8007b78 <draw_next_tetromino+0x84>)
 8007b0e:	4413      	add	r3, r2
 8007b10:	60bb      	str	r3, [r7, #8]
  uint16_t color = it->color;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	8c1b      	ldrh	r3, [r3, #32]
 8007b16:	81bb      	strh	r3, [r7, #12]
  if(clear){color = WHITE;}
 8007b18:	79fb      	ldrb	r3, [r7, #7]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d002      	beq.n	8007b24 <draw_next_tetromino+0x30>
 8007b1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007b22:	81bb      	strh	r3, [r7, #12]
  for(i=0;i<4;i++)
 8007b24:	2300      	movs	r3, #0
 8007b26:	73fb      	strb	r3, [r7, #15]
 8007b28:	e01d      	b.n	8007b66 <draw_next_tetromino+0x72>
	{
	   draw_block(it->x[tetromino_next.rotation][i], it->y[tetromino_next.rotation][i], color, 1);
 8007b2a:	4b12      	ldr	r3, [pc, #72]	; (8007b74 <draw_next_tetromino+0x80>)
 8007b2c:	78db      	ldrb	r3, [r3, #3]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
 8007b32:	68b9      	ldr	r1, [r7, #8]
 8007b34:	0092      	lsls	r2, r2, #2
 8007b36:	440a      	add	r2, r1
 8007b38:	4413      	add	r3, r2
 8007b3a:	f993 3000 	ldrsb.w	r3, [r3]
 8007b3e:	b2d8      	uxtb	r0, r3
 8007b40:	4b0c      	ldr	r3, [pc, #48]	; (8007b74 <draw_next_tetromino+0x80>)
 8007b42:	78db      	ldrb	r3, [r3, #3]
 8007b44:	461a      	mov	r2, r3
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
 8007b48:	68b9      	ldr	r1, [r7, #8]
 8007b4a:	0092      	lsls	r2, r2, #2
 8007b4c:	440a      	add	r2, r1
 8007b4e:	4413      	add	r3, r2
 8007b50:	3310      	adds	r3, #16
 8007b52:	f993 3000 	ldrsb.w	r3, [r3]
 8007b56:	b2d9      	uxtb	r1, r3
 8007b58:	89ba      	ldrh	r2, [r7, #12]
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	f7ff fede 	bl	800791c <draw_block>
  for(i=0;i<4;i++)
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	3301      	adds	r3, #1
 8007b64:	73fb      	strb	r3, [r7, #15]
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	2b03      	cmp	r3, #3
 8007b6a:	d9de      	bls.n	8007b2a <draw_next_tetromino+0x36>
	}

}
 8007b6c:	bf00      	nop
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	20000630 	.word	0x20000630
 8007b78:	2000053c 	.word	0x2000053c

08007b7c <draw_name>:

void draw_name(char* name){
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af02      	add	r7, sp, #8
 8007b82:	6078      	str	r0, [r7, #4]
  LCD_ShowString(170, 210, 200, 16, 16, (uint8_t*)name);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	9301      	str	r3, [sp, #4]
 8007b88:	2310      	movs	r3, #16
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	2310      	movs	r3, #16
 8007b8e:	22c8      	movs	r2, #200	; 0xc8
 8007b90:	21d2      	movs	r1, #210	; 0xd2
 8007b92:	20aa      	movs	r0, #170	; 0xaa
 8007b94:	f7fe ff88 	bl	8006aa8 <LCD_ShowString>
}
 8007b98:	bf00      	nop
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <update_score>:

void update_score(uint16_t score)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af02      	add	r7, sp, #8
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	80fb      	strh	r3, [r7, #6]
    char str_score[5];
    if (score > 9999)
 8007baa:	88fb      	ldrh	r3, [r7, #6]
 8007bac:	f242 720f 	movw	r2, #9999	; 0x270f
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d902      	bls.n	8007bba <update_score+0x1a>
        score = 9999;
 8007bb4:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bb8:	80fb      	strh	r3, [r7, #6]
    sprintf(str_score, "%6d", score);
 8007bba:	88fa      	ldrh	r2, [r7, #6]
 8007bbc:	f107 0308 	add.w	r3, r7, #8
 8007bc0:	490e      	ldr	r1, [pc, #56]	; (8007bfc <update_score+0x5c>)
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f002 fa00 	bl	8009fc8 <siprintf>
    printf("score:%d str:%s\n",score,str_score);
 8007bc8:	88fb      	ldrh	r3, [r7, #6]
 8007bca:	f107 0208 	add.w	r2, r7, #8
 8007bce:	4619      	mov	r1, r3
 8007bd0:	480b      	ldr	r0, [pc, #44]	; (8007c00 <update_score+0x60>)
 8007bd2:	f002 f989 	bl	8009ee8 <iprintf>
    POINT_COLOR = BLACK;
 8007bd6:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <update_score+0x64>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	801a      	strh	r2, [r3, #0]
    LCD_ShowString(170, 250, 200, 16, 16, (uint8_t*)str_score);
 8007bdc:	f107 0308 	add.w	r3, r7, #8
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	2310      	movs	r3, #16
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	2310      	movs	r3, #16
 8007be8:	22c8      	movs	r2, #200	; 0xc8
 8007bea:	21fa      	movs	r1, #250	; 0xfa
 8007bec:	20aa      	movs	r0, #170	; 0xaa
 8007bee:	f7fe ff5b 	bl	8006aa8 <LCD_ShowString>
}
 8007bf2:	bf00      	nop
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	0800b244 	.word	0x0800b244
 8007c00:	0800b248 	.word	0x0800b248
 8007c04:	20000098 	.word	0x20000098

08007c08 <draw_rank_list>:

void draw_rank_list(){
 8007c08:	b590      	push	{r4, r7, lr}
 8007c0a:	b08b      	sub	sp, #44	; 0x2c
 8007c0c:	af02      	add	r7, sp, #8
  POINT_COLOR = BLACK;
 8007c0e:	4b22      	ldr	r3, [pc, #136]	; (8007c98 <draw_rank_list+0x90>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	801a      	strh	r2, [r3, #0]
  LCD_Clear(WHITE);
 8007c14:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007c18:	f7fe fcfc 	bl	8006614 <LCD_Clear>
  LCD_ShowString(100, 20, 200, 16, 16, (uint8_t*)"Rank");
 8007c1c:	4b1f      	ldr	r3, [pc, #124]	; (8007c9c <draw_rank_list+0x94>)
 8007c1e:	9301      	str	r3, [sp, #4]
 8007c20:	2310      	movs	r3, #16
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	2310      	movs	r3, #16
 8007c26:	22c8      	movs	r2, #200	; 0xc8
 8007c28:	2114      	movs	r1, #20
 8007c2a:	2064      	movs	r0, #100	; 0x64
 8007c2c:	f7fe ff3c 	bl	8006aa8 <LCD_ShowString>
  uint16_t x = 40, y = 50;
 8007c30:	2328      	movs	r3, #40	; 0x28
 8007c32:	837b      	strh	r3, [r7, #26]
 8007c34:	2332      	movs	r3, #50	; 0x32
 8007c36:	83fb      	strh	r3, [r7, #30]
  char rank_str[20];
  for(uint8_t i=0; i<RANK_LIST_LEN; i++){
 8007c38:	2300      	movs	r3, #0
 8007c3a:	777b      	strb	r3, [r7, #29]
 8007c3c:	e024      	b.n	8007c88 <draw_rank_list+0x80>
    sprintf(rank_str, "%-14s%6d", rank_list[i].name, rank_list[i].score);
 8007c3e:	7f7a      	ldrb	r2, [r7, #29]
 8007c40:	4613      	mov	r3, r2
 8007c42:	005b      	lsls	r3, r3, #1
 8007c44:	4413      	add	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4a15      	ldr	r2, [pc, #84]	; (8007ca0 <draw_rank_list+0x98>)
 8007c4a:	189c      	adds	r4, r3, r2
 8007c4c:	7f7a      	ldrb	r2, [r7, #29]
 8007c4e:	4914      	ldr	r1, [pc, #80]	; (8007ca0 <draw_rank_list+0x98>)
 8007c50:	4613      	mov	r3, r2
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	440b      	add	r3, r1
 8007c5a:	330a      	adds	r3, #10
 8007c5c:	881b      	ldrh	r3, [r3, #0]
 8007c5e:	1d38      	adds	r0, r7, #4
 8007c60:	4622      	mov	r2, r4
 8007c62:	4910      	ldr	r1, [pc, #64]	; (8007ca4 <draw_rank_list+0x9c>)
 8007c64:	f002 f9b0 	bl	8009fc8 <siprintf>
    LCD_ShowString(x, y, 200, 16, 16, (uint8_t*)rank_str);
 8007c68:	8bf9      	ldrh	r1, [r7, #30]
 8007c6a:	8b78      	ldrh	r0, [r7, #26]
 8007c6c:	1d3b      	adds	r3, r7, #4
 8007c6e:	9301      	str	r3, [sp, #4]
 8007c70:	2310      	movs	r3, #16
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	2310      	movs	r3, #16
 8007c76:	22c8      	movs	r2, #200	; 0xc8
 8007c78:	f7fe ff16 	bl	8006aa8 <LCD_ShowString>
    y += 20;
 8007c7c:	8bfb      	ldrh	r3, [r7, #30]
 8007c7e:	3314      	adds	r3, #20
 8007c80:	83fb      	strh	r3, [r7, #30]
  for(uint8_t i=0; i<RANK_LIST_LEN; i++){
 8007c82:	7f7b      	ldrb	r3, [r7, #29]
 8007c84:	3301      	adds	r3, #1
 8007c86:	777b      	strb	r3, [r7, #29]
 8007c88:	7f7b      	ldrb	r3, [r7, #29]
 8007c8a:	2b09      	cmp	r3, #9
 8007c8c:	d9d7      	bls.n	8007c3e <draw_rank_list+0x36>
  }
}
 8007c8e:	bf00      	nop
 8007c90:	3724      	adds	r7, #36	; 0x24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd90      	pop	{r4, r7, pc}
 8007c96:	bf00      	nop
 8007c98:	20000098 	.word	0x20000098
 8007c9c:	0800b25c 	.word	0x0800b25c
 8007ca0:	200004c0 	.word	0x200004c0
 8007ca4:	0800b264 	.word	0x0800b264

08007ca8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8007cac:	4b11      	ldr	r3, [pc, #68]	; (8007cf4 <MX_USART1_UART_Init+0x4c>)
 8007cae:	4a12      	ldr	r2, [pc, #72]	; (8007cf8 <MX_USART1_UART_Init+0x50>)
 8007cb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007cb2:	4b10      	ldr	r3, [pc, #64]	; (8007cf4 <MX_USART1_UART_Init+0x4c>)
 8007cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007cb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007cba:	4b0e      	ldr	r3, [pc, #56]	; (8007cf4 <MX_USART1_UART_Init+0x4c>)
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007cc0:	4b0c      	ldr	r3, [pc, #48]	; (8007cf4 <MX_USART1_UART_Init+0x4c>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007cc6:	4b0b      	ldr	r3, [pc, #44]	; (8007cf4 <MX_USART1_UART_Init+0x4c>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007ccc:	4b09      	ldr	r3, [pc, #36]	; (8007cf4 <MX_USART1_UART_Init+0x4c>)
 8007cce:	220c      	movs	r2, #12
 8007cd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007cd2:	4b08      	ldr	r3, [pc, #32]	; (8007cf4 <MX_USART1_UART_Init+0x4c>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007cd8:	4b06      	ldr	r3, [pc, #24]	; (8007cf4 <MX_USART1_UART_Init+0x4c>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007cde:	4805      	ldr	r0, [pc, #20]	; (8007cf4 <MX_USART1_UART_Init+0x4c>)
 8007ce0:	f001 fc90 	bl	8009604 <HAL_UART_Init>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007cea:	f7fe ffc2 	bl	8006c72 <Error_Handler>
  }

}
 8007cee:	bf00      	nop
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20000674 	.word	0x20000674
 8007cf8:	40013800 	.word	0x40013800

08007cfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b088      	sub	sp, #32
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d04:	f107 0310 	add.w	r3, r7, #16
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	605a      	str	r2, [r3, #4]
 8007d0e:	609a      	str	r2, [r3, #8]
 8007d10:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a20      	ldr	r2, [pc, #128]	; (8007d98 <HAL_UART_MspInit+0x9c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d139      	bne.n	8007d90 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007d1c:	4b1f      	ldr	r3, [pc, #124]	; (8007d9c <HAL_UART_MspInit+0xa0>)
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	4a1e      	ldr	r2, [pc, #120]	; (8007d9c <HAL_UART_MspInit+0xa0>)
 8007d22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d26:	6193      	str	r3, [r2, #24]
 8007d28:	4b1c      	ldr	r3, [pc, #112]	; (8007d9c <HAL_UART_MspInit+0xa0>)
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d30:	60fb      	str	r3, [r7, #12]
 8007d32:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d34:	4b19      	ldr	r3, [pc, #100]	; (8007d9c <HAL_UART_MspInit+0xa0>)
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	4a18      	ldr	r2, [pc, #96]	; (8007d9c <HAL_UART_MspInit+0xa0>)
 8007d3a:	f043 0304 	orr.w	r3, r3, #4
 8007d3e:	6193      	str	r3, [r2, #24]
 8007d40:	4b16      	ldr	r3, [pc, #88]	; (8007d9c <HAL_UART_MspInit+0xa0>)
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	f003 0304 	and.w	r3, r3, #4
 8007d48:	60bb      	str	r3, [r7, #8]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d52:	2302      	movs	r3, #2
 8007d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007d56:	2303      	movs	r3, #3
 8007d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d5a:	f107 0310 	add.w	r3, r7, #16
 8007d5e:	4619      	mov	r1, r3
 8007d60:	480f      	ldr	r0, [pc, #60]	; (8007da0 <HAL_UART_MspInit+0xa4>)
 8007d62:	f000 fadf 	bl	8008324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d70:	2300      	movs	r3, #0
 8007d72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d74:	f107 0310 	add.w	r3, r7, #16
 8007d78:	4619      	mov	r1, r3
 8007d7a:	4809      	ldr	r0, [pc, #36]	; (8007da0 <HAL_UART_MspInit+0xa4>)
 8007d7c:	f000 fad2 	bl	8008324 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007d80:	2200      	movs	r2, #0
 8007d82:	2100      	movs	r1, #0
 8007d84:	2025      	movs	r0, #37	; 0x25
 8007d86:	f000 f98e 	bl	80080a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007d8a:	2025      	movs	r0, #37	; 0x25
 8007d8c:	f000 f9a7 	bl	80080de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007d90:	bf00      	nop
 8007d92:	3720      	adds	r7, #32
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	40013800 	.word	0x40013800
 8007d9c:	40021000 	.word	0x40021000
 8007da0:	40010800 	.word	0x40010800

08007da4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007da4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007da6:	e003      	b.n	8007db0 <LoopCopyDataInit>

08007da8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007da8:	4b0b      	ldr	r3, [pc, #44]	; (8007dd8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8007daa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007dac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8007dae:	3104      	adds	r1, #4

08007db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007db0:	480a      	ldr	r0, [pc, #40]	; (8007ddc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007db2:	4b0b      	ldr	r3, [pc, #44]	; (8007de0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007db4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007db6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007db8:	d3f6      	bcc.n	8007da8 <CopyDataInit>
  ldr r2, =_sbss
 8007dba:	4a0a      	ldr	r2, [pc, #40]	; (8007de4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007dbc:	e002      	b.n	8007dc4 <LoopFillZerobss>

08007dbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8007dbe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007dc0:	f842 3b04 	str.w	r3, [r2], #4

08007dc4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007dc4:	4b08      	ldr	r3, [pc, #32]	; (8007de8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8007dc6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007dc8:	d3f9      	bcc.n	8007dbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007dca:	f7ff f9e1 	bl	8007190 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007dce:	f002 f85f 	bl	8009e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007dd2:	f7fe feb7 	bl	8006b44 <main>
  bx lr
 8007dd6:	4770      	bx	lr
  ldr r3, =_sidata
 8007dd8:	0800cafc 	.word	0x0800cafc
  ldr r0, =_sdata
 8007ddc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007de0:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8007de4:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8007de8:	200006bc 	.word	0x200006bc

08007dec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007dec:	e7fe      	b.n	8007dec <ADC1_2_IRQHandler>
	...

08007df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007df4:	4b08      	ldr	r3, [pc, #32]	; (8007e18 <HAL_Init+0x28>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a07      	ldr	r2, [pc, #28]	; (8007e18 <HAL_Init+0x28>)
 8007dfa:	f043 0310 	orr.w	r3, r3, #16
 8007dfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007e00:	2003      	movs	r0, #3
 8007e02:	f000 f945 	bl	8008090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007e06:	2000      	movs	r0, #0
 8007e08:	f000 f808 	bl	8007e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007e0c:	f7ff f88a 	bl	8006f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	40022000 	.word	0x40022000

08007e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007e24:	4b12      	ldr	r3, [pc, #72]	; (8007e70 <HAL_InitTick+0x54>)
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	4b12      	ldr	r3, [pc, #72]	; (8007e74 <HAL_InitTick+0x58>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 f95d 	bl	80080fa <HAL_SYSTICK_Config>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e00e      	b.n	8007e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b0f      	cmp	r3, #15
 8007e4e:	d80a      	bhi.n	8007e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007e50:	2200      	movs	r2, #0
 8007e52:	6879      	ldr	r1, [r7, #4]
 8007e54:	f04f 30ff 	mov.w	r0, #4294967295
 8007e58:	f000 f925 	bl	80080a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007e5c:	4a06      	ldr	r2, [pc, #24]	; (8007e78 <HAL_InitTick+0x5c>)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	e000      	b.n	8007e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	20000008 	.word	0x20000008
 8007e74:	20000010 	.word	0x20000010
 8007e78:	2000000c 	.word	0x2000000c

08007e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007e80:	4b05      	ldr	r3, [pc, #20]	; (8007e98 <HAL_IncTick+0x1c>)
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	461a      	mov	r2, r3
 8007e86:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <HAL_IncTick+0x20>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	4a03      	ldr	r2, [pc, #12]	; (8007e9c <HAL_IncTick+0x20>)
 8007e8e:	6013      	str	r3, [r2, #0]
}
 8007e90:	bf00      	nop
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bc80      	pop	{r7}
 8007e96:	4770      	bx	lr
 8007e98:	20000010 	.word	0x20000010
 8007e9c:	200006b4 	.word	0x200006b4

08007ea0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8007ea4:	4b02      	ldr	r3, [pc, #8]	; (8007eb0 <HAL_GetTick+0x10>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bc80      	pop	{r7}
 8007eae:	4770      	bx	lr
 8007eb0:	200006b4 	.word	0x200006b4

08007eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007ebc:	f7ff fff0 	bl	8007ea0 <HAL_GetTick>
 8007ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ecc:	d005      	beq.n	8007eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007ece:	4b09      	ldr	r3, [pc, #36]	; (8007ef4 <HAL_Delay+0x40>)
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007eda:	bf00      	nop
 8007edc:	f7ff ffe0 	bl	8007ea0 <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d8f7      	bhi.n	8007edc <HAL_Delay+0x28>
  {
  }
}
 8007eec:	bf00      	nop
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	20000010 	.word	0x20000010

08007ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f003 0307 	and.w	r3, r3, #7
 8007f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f08:	4b0c      	ldr	r3, [pc, #48]	; (8007f3c <__NVIC_SetPriorityGrouping+0x44>)
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007f14:	4013      	ands	r3, r2
 8007f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f2a:	4a04      	ldr	r2, [pc, #16]	; (8007f3c <__NVIC_SetPriorityGrouping+0x44>)
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	60d3      	str	r3, [r2, #12]
}
 8007f30:	bf00      	nop
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bc80      	pop	{r7}
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	e000ed00 	.word	0xe000ed00

08007f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007f40:	b480      	push	{r7}
 8007f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f44:	4b04      	ldr	r3, [pc, #16]	; (8007f58 <__NVIC_GetPriorityGrouping+0x18>)
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	0a1b      	lsrs	r3, r3, #8
 8007f4a:	f003 0307 	and.w	r3, r3, #7
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bc80      	pop	{r7}
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	e000ed00 	.word	0xe000ed00

08007f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	4603      	mov	r3, r0
 8007f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	db0b      	blt.n	8007f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f6e:	79fb      	ldrb	r3, [r7, #7]
 8007f70:	f003 021f 	and.w	r2, r3, #31
 8007f74:	4906      	ldr	r1, [pc, #24]	; (8007f90 <__NVIC_EnableIRQ+0x34>)
 8007f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f7a:	095b      	lsrs	r3, r3, #5
 8007f7c:	2001      	movs	r0, #1
 8007f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8007f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bc80      	pop	{r7}
 8007f8e:	4770      	bx	lr
 8007f90:	e000e100 	.word	0xe000e100

08007f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	6039      	str	r1, [r7, #0]
 8007f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	db0a      	blt.n	8007fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	b2da      	uxtb	r2, r3
 8007fac:	490c      	ldr	r1, [pc, #48]	; (8007fe0 <__NVIC_SetPriority+0x4c>)
 8007fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fb2:	0112      	lsls	r2, r2, #4
 8007fb4:	b2d2      	uxtb	r2, r2
 8007fb6:	440b      	add	r3, r1
 8007fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007fbc:	e00a      	b.n	8007fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	4908      	ldr	r1, [pc, #32]	; (8007fe4 <__NVIC_SetPriority+0x50>)
 8007fc4:	79fb      	ldrb	r3, [r7, #7]
 8007fc6:	f003 030f 	and.w	r3, r3, #15
 8007fca:	3b04      	subs	r3, #4
 8007fcc:	0112      	lsls	r2, r2, #4
 8007fce:	b2d2      	uxtb	r2, r2
 8007fd0:	440b      	add	r3, r1
 8007fd2:	761a      	strb	r2, [r3, #24]
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bc80      	pop	{r7}
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	e000e100 	.word	0xe000e100
 8007fe4:	e000ed00 	.word	0xe000ed00

08007fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b089      	sub	sp, #36	; 0x24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f003 0307 	and.w	r3, r3, #7
 8007ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	f1c3 0307 	rsb	r3, r3, #7
 8008002:	2b04      	cmp	r3, #4
 8008004:	bf28      	it	cs
 8008006:	2304      	movcs	r3, #4
 8008008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	3304      	adds	r3, #4
 800800e:	2b06      	cmp	r3, #6
 8008010:	d902      	bls.n	8008018 <NVIC_EncodePriority+0x30>
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	3b03      	subs	r3, #3
 8008016:	e000      	b.n	800801a <NVIC_EncodePriority+0x32>
 8008018:	2300      	movs	r3, #0
 800801a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800801c:	f04f 32ff 	mov.w	r2, #4294967295
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	fa02 f303 	lsl.w	r3, r2, r3
 8008026:	43da      	mvns	r2, r3
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	401a      	ands	r2, r3
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008030:	f04f 31ff 	mov.w	r1, #4294967295
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	fa01 f303 	lsl.w	r3, r1, r3
 800803a:	43d9      	mvns	r1, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008040:	4313      	orrs	r3, r2
         );
}
 8008042:	4618      	mov	r0, r3
 8008044:	3724      	adds	r7, #36	; 0x24
 8008046:	46bd      	mov	sp, r7
 8008048:	bc80      	pop	{r7}
 800804a:	4770      	bx	lr

0800804c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	3b01      	subs	r3, #1
 8008058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800805c:	d301      	bcc.n	8008062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800805e:	2301      	movs	r3, #1
 8008060:	e00f      	b.n	8008082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008062:	4a0a      	ldr	r2, [pc, #40]	; (800808c <SysTick_Config+0x40>)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	3b01      	subs	r3, #1
 8008068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800806a:	210f      	movs	r1, #15
 800806c:	f04f 30ff 	mov.w	r0, #4294967295
 8008070:	f7ff ff90 	bl	8007f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008074:	4b05      	ldr	r3, [pc, #20]	; (800808c <SysTick_Config+0x40>)
 8008076:	2200      	movs	r2, #0
 8008078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800807a:	4b04      	ldr	r3, [pc, #16]	; (800808c <SysTick_Config+0x40>)
 800807c:	2207      	movs	r2, #7
 800807e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	e000e010 	.word	0xe000e010

08008090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff ff2d 	bl	8007ef8 <__NVIC_SetPriorityGrouping>
}
 800809e:	bf00      	nop
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b086      	sub	sp, #24
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	4603      	mov	r3, r0
 80080ae:	60b9      	str	r1, [r7, #8]
 80080b0:	607a      	str	r2, [r7, #4]
 80080b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80080b8:	f7ff ff42 	bl	8007f40 <__NVIC_GetPriorityGrouping>
 80080bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	68b9      	ldr	r1, [r7, #8]
 80080c2:	6978      	ldr	r0, [r7, #20]
 80080c4:	f7ff ff90 	bl	8007fe8 <NVIC_EncodePriority>
 80080c8:	4602      	mov	r2, r0
 80080ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080ce:	4611      	mov	r1, r2
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7ff ff5f 	bl	8007f94 <__NVIC_SetPriority>
}
 80080d6:	bf00      	nop
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b082      	sub	sp, #8
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	4603      	mov	r3, r0
 80080e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80080e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7ff ff35 	bl	8007f5c <__NVIC_EnableIRQ>
}
 80080f2:	bf00      	nop
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b082      	sub	sp, #8
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7ff ffa2 	bl	800804c <SysTick_Config>
 8008108:	4603      	mov	r3, r0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
	...

08008114 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008126:	2b02      	cmp	r3, #2
 8008128:	d005      	beq.n	8008136 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2204      	movs	r2, #4
 800812e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	73fb      	strb	r3, [r7, #15]
 8008134:	e0d6      	b.n	80082e4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f022 020e 	bic.w	r2, r2, #14
 8008144:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f022 0201 	bic.w	r2, r2, #1
 8008154:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	461a      	mov	r2, r3
 800815c:	4b64      	ldr	r3, [pc, #400]	; (80082f0 <HAL_DMA_Abort_IT+0x1dc>)
 800815e:	429a      	cmp	r2, r3
 8008160:	d958      	bls.n	8008214 <HAL_DMA_Abort_IT+0x100>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a63      	ldr	r2, [pc, #396]	; (80082f4 <HAL_DMA_Abort_IT+0x1e0>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d04f      	beq.n	800820c <HAL_DMA_Abort_IT+0xf8>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a61      	ldr	r2, [pc, #388]	; (80082f8 <HAL_DMA_Abort_IT+0x1e4>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d048      	beq.n	8008208 <HAL_DMA_Abort_IT+0xf4>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a60      	ldr	r2, [pc, #384]	; (80082fc <HAL_DMA_Abort_IT+0x1e8>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d040      	beq.n	8008202 <HAL_DMA_Abort_IT+0xee>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a5e      	ldr	r2, [pc, #376]	; (8008300 <HAL_DMA_Abort_IT+0x1ec>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d038      	beq.n	80081fc <HAL_DMA_Abort_IT+0xe8>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a5d      	ldr	r2, [pc, #372]	; (8008304 <HAL_DMA_Abort_IT+0x1f0>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d030      	beq.n	80081f6 <HAL_DMA_Abort_IT+0xe2>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a5b      	ldr	r2, [pc, #364]	; (8008308 <HAL_DMA_Abort_IT+0x1f4>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d028      	beq.n	80081f0 <HAL_DMA_Abort_IT+0xdc>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a53      	ldr	r2, [pc, #332]	; (80082f0 <HAL_DMA_Abort_IT+0x1dc>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d020      	beq.n	80081ea <HAL_DMA_Abort_IT+0xd6>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a57      	ldr	r2, [pc, #348]	; (800830c <HAL_DMA_Abort_IT+0x1f8>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d019      	beq.n	80081e6 <HAL_DMA_Abort_IT+0xd2>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a56      	ldr	r2, [pc, #344]	; (8008310 <HAL_DMA_Abort_IT+0x1fc>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d012      	beq.n	80081e2 <HAL_DMA_Abort_IT+0xce>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a54      	ldr	r2, [pc, #336]	; (8008314 <HAL_DMA_Abort_IT+0x200>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d00a      	beq.n	80081dc <HAL_DMA_Abort_IT+0xc8>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a53      	ldr	r2, [pc, #332]	; (8008318 <HAL_DMA_Abort_IT+0x204>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d102      	bne.n	80081d6 <HAL_DMA_Abort_IT+0xc2>
 80081d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081d4:	e01b      	b.n	800820e <HAL_DMA_Abort_IT+0xfa>
 80081d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80081da:	e018      	b.n	800820e <HAL_DMA_Abort_IT+0xfa>
 80081dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081e0:	e015      	b.n	800820e <HAL_DMA_Abort_IT+0xfa>
 80081e2:	2310      	movs	r3, #16
 80081e4:	e013      	b.n	800820e <HAL_DMA_Abort_IT+0xfa>
 80081e6:	2301      	movs	r3, #1
 80081e8:	e011      	b.n	800820e <HAL_DMA_Abort_IT+0xfa>
 80081ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081ee:	e00e      	b.n	800820e <HAL_DMA_Abort_IT+0xfa>
 80081f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80081f4:	e00b      	b.n	800820e <HAL_DMA_Abort_IT+0xfa>
 80081f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80081fa:	e008      	b.n	800820e <HAL_DMA_Abort_IT+0xfa>
 80081fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008200:	e005      	b.n	800820e <HAL_DMA_Abort_IT+0xfa>
 8008202:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008206:	e002      	b.n	800820e <HAL_DMA_Abort_IT+0xfa>
 8008208:	2310      	movs	r3, #16
 800820a:	e000      	b.n	800820e <HAL_DMA_Abort_IT+0xfa>
 800820c:	2301      	movs	r3, #1
 800820e:	4a43      	ldr	r2, [pc, #268]	; (800831c <HAL_DMA_Abort_IT+0x208>)
 8008210:	6053      	str	r3, [r2, #4]
 8008212:	e057      	b.n	80082c4 <HAL_DMA_Abort_IT+0x1b0>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a36      	ldr	r2, [pc, #216]	; (80082f4 <HAL_DMA_Abort_IT+0x1e0>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d04f      	beq.n	80082be <HAL_DMA_Abort_IT+0x1aa>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a35      	ldr	r2, [pc, #212]	; (80082f8 <HAL_DMA_Abort_IT+0x1e4>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d048      	beq.n	80082ba <HAL_DMA_Abort_IT+0x1a6>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a33      	ldr	r2, [pc, #204]	; (80082fc <HAL_DMA_Abort_IT+0x1e8>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d040      	beq.n	80082b4 <HAL_DMA_Abort_IT+0x1a0>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a32      	ldr	r2, [pc, #200]	; (8008300 <HAL_DMA_Abort_IT+0x1ec>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d038      	beq.n	80082ae <HAL_DMA_Abort_IT+0x19a>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a30      	ldr	r2, [pc, #192]	; (8008304 <HAL_DMA_Abort_IT+0x1f0>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d030      	beq.n	80082a8 <HAL_DMA_Abort_IT+0x194>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a2f      	ldr	r2, [pc, #188]	; (8008308 <HAL_DMA_Abort_IT+0x1f4>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d028      	beq.n	80082a2 <HAL_DMA_Abort_IT+0x18e>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a26      	ldr	r2, [pc, #152]	; (80082f0 <HAL_DMA_Abort_IT+0x1dc>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d020      	beq.n	800829c <HAL_DMA_Abort_IT+0x188>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a2b      	ldr	r2, [pc, #172]	; (800830c <HAL_DMA_Abort_IT+0x1f8>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d019      	beq.n	8008298 <HAL_DMA_Abort_IT+0x184>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a29      	ldr	r2, [pc, #164]	; (8008310 <HAL_DMA_Abort_IT+0x1fc>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d012      	beq.n	8008294 <HAL_DMA_Abort_IT+0x180>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a28      	ldr	r2, [pc, #160]	; (8008314 <HAL_DMA_Abort_IT+0x200>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d00a      	beq.n	800828e <HAL_DMA_Abort_IT+0x17a>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a26      	ldr	r2, [pc, #152]	; (8008318 <HAL_DMA_Abort_IT+0x204>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d102      	bne.n	8008288 <HAL_DMA_Abort_IT+0x174>
 8008282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008286:	e01b      	b.n	80082c0 <HAL_DMA_Abort_IT+0x1ac>
 8008288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800828c:	e018      	b.n	80082c0 <HAL_DMA_Abort_IT+0x1ac>
 800828e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008292:	e015      	b.n	80082c0 <HAL_DMA_Abort_IT+0x1ac>
 8008294:	2310      	movs	r3, #16
 8008296:	e013      	b.n	80082c0 <HAL_DMA_Abort_IT+0x1ac>
 8008298:	2301      	movs	r3, #1
 800829a:	e011      	b.n	80082c0 <HAL_DMA_Abort_IT+0x1ac>
 800829c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80082a0:	e00e      	b.n	80082c0 <HAL_DMA_Abort_IT+0x1ac>
 80082a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80082a6:	e00b      	b.n	80082c0 <HAL_DMA_Abort_IT+0x1ac>
 80082a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80082ac:	e008      	b.n	80082c0 <HAL_DMA_Abort_IT+0x1ac>
 80082ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082b2:	e005      	b.n	80082c0 <HAL_DMA_Abort_IT+0x1ac>
 80082b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082b8:	e002      	b.n	80082c0 <HAL_DMA_Abort_IT+0x1ac>
 80082ba:	2310      	movs	r3, #16
 80082bc:	e000      	b.n	80082c0 <HAL_DMA_Abort_IT+0x1ac>
 80082be:	2301      	movs	r3, #1
 80082c0:	4a17      	ldr	r2, [pc, #92]	; (8008320 <HAL_DMA_Abort_IT+0x20c>)
 80082c2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d003      	beq.n	80082e4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	4798      	blx	r3
    } 
  }
  return status;
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	40020080 	.word	0x40020080
 80082f4:	40020008 	.word	0x40020008
 80082f8:	4002001c 	.word	0x4002001c
 80082fc:	40020030 	.word	0x40020030
 8008300:	40020044 	.word	0x40020044
 8008304:	40020058 	.word	0x40020058
 8008308:	4002006c 	.word	0x4002006c
 800830c:	40020408 	.word	0x40020408
 8008310:	4002041c 	.word	0x4002041c
 8008314:	40020430 	.word	0x40020430
 8008318:	40020444 	.word	0x40020444
 800831c:	40020400 	.word	0x40020400
 8008320:	40020000 	.word	0x40020000

08008324 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008324:	b480      	push	{r7}
 8008326:	b08b      	sub	sp, #44	; 0x2c
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800832e:	2300      	movs	r3, #0
 8008330:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008332:	2300      	movs	r3, #0
 8008334:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008336:	e133      	b.n	80085a0 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008338:	2201      	movs	r2, #1
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	fa02 f303 	lsl.w	r3, r2, r3
 8008340:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	69fa      	ldr	r2, [r7, #28]
 8008348:	4013      	ands	r3, r2
 800834a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800834c:	69ba      	ldr	r2, [r7, #24]
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	429a      	cmp	r2, r3
 8008352:	f040 8122 	bne.w	800859a <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	2b12      	cmp	r3, #18
 800835c:	d034      	beq.n	80083c8 <HAL_GPIO_Init+0xa4>
 800835e:	2b12      	cmp	r3, #18
 8008360:	d80d      	bhi.n	800837e <HAL_GPIO_Init+0x5a>
 8008362:	2b02      	cmp	r3, #2
 8008364:	d02b      	beq.n	80083be <HAL_GPIO_Init+0x9a>
 8008366:	2b02      	cmp	r3, #2
 8008368:	d804      	bhi.n	8008374 <HAL_GPIO_Init+0x50>
 800836a:	2b00      	cmp	r3, #0
 800836c:	d031      	beq.n	80083d2 <HAL_GPIO_Init+0xae>
 800836e:	2b01      	cmp	r3, #1
 8008370:	d01c      	beq.n	80083ac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008372:	e048      	b.n	8008406 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8008374:	2b03      	cmp	r3, #3
 8008376:	d043      	beq.n	8008400 <HAL_GPIO_Init+0xdc>
 8008378:	2b11      	cmp	r3, #17
 800837a:	d01b      	beq.n	80083b4 <HAL_GPIO_Init+0x90>
          break;
 800837c:	e043      	b.n	8008406 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800837e:	4a8f      	ldr	r2, [pc, #572]	; (80085bc <HAL_GPIO_Init+0x298>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d026      	beq.n	80083d2 <HAL_GPIO_Init+0xae>
 8008384:	4a8d      	ldr	r2, [pc, #564]	; (80085bc <HAL_GPIO_Init+0x298>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d806      	bhi.n	8008398 <HAL_GPIO_Init+0x74>
 800838a:	4a8d      	ldr	r2, [pc, #564]	; (80085c0 <HAL_GPIO_Init+0x29c>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d020      	beq.n	80083d2 <HAL_GPIO_Init+0xae>
 8008390:	4a8c      	ldr	r2, [pc, #560]	; (80085c4 <HAL_GPIO_Init+0x2a0>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d01d      	beq.n	80083d2 <HAL_GPIO_Init+0xae>
          break;
 8008396:	e036      	b.n	8008406 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8008398:	4a8b      	ldr	r2, [pc, #556]	; (80085c8 <HAL_GPIO_Init+0x2a4>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d019      	beq.n	80083d2 <HAL_GPIO_Init+0xae>
 800839e:	4a8b      	ldr	r2, [pc, #556]	; (80085cc <HAL_GPIO_Init+0x2a8>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d016      	beq.n	80083d2 <HAL_GPIO_Init+0xae>
 80083a4:	4a8a      	ldr	r2, [pc, #552]	; (80085d0 <HAL_GPIO_Init+0x2ac>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d013      	beq.n	80083d2 <HAL_GPIO_Init+0xae>
          break;
 80083aa:	e02c      	b.n	8008406 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	623b      	str	r3, [r7, #32]
          break;
 80083b2:	e028      	b.n	8008406 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	3304      	adds	r3, #4
 80083ba:	623b      	str	r3, [r7, #32]
          break;
 80083bc:	e023      	b.n	8008406 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	3308      	adds	r3, #8
 80083c4:	623b      	str	r3, [r7, #32]
          break;
 80083c6:	e01e      	b.n	8008406 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	330c      	adds	r3, #12
 80083ce:	623b      	str	r3, [r7, #32]
          break;
 80083d0:	e019      	b.n	8008406 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d102      	bne.n	80083e0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80083da:	2304      	movs	r3, #4
 80083dc:	623b      	str	r3, [r7, #32]
          break;
 80083de:	e012      	b.n	8008406 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d105      	bne.n	80083f4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80083e8:	2308      	movs	r3, #8
 80083ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	69fa      	ldr	r2, [r7, #28]
 80083f0:	611a      	str	r2, [r3, #16]
          break;
 80083f2:	e008      	b.n	8008406 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80083f4:	2308      	movs	r3, #8
 80083f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	69fa      	ldr	r2, [r7, #28]
 80083fc:	615a      	str	r2, [r3, #20]
          break;
 80083fe:	e002      	b.n	8008406 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008400:	2300      	movs	r3, #0
 8008402:	623b      	str	r3, [r7, #32]
          break;
 8008404:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	2bff      	cmp	r3, #255	; 0xff
 800840a:	d801      	bhi.n	8008410 <HAL_GPIO_Init+0xec>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	e001      	b.n	8008414 <HAL_GPIO_Init+0xf0>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	3304      	adds	r3, #4
 8008414:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	2bff      	cmp	r3, #255	; 0xff
 800841a:	d802      	bhi.n	8008422 <HAL_GPIO_Init+0xfe>
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	e002      	b.n	8008428 <HAL_GPIO_Init+0x104>
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008424:	3b08      	subs	r3, #8
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	210f      	movs	r1, #15
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	fa01 f303 	lsl.w	r3, r1, r3
 8008436:	43db      	mvns	r3, r3
 8008438:	401a      	ands	r2, r3
 800843a:	6a39      	ldr	r1, [r7, #32]
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	fa01 f303 	lsl.w	r3, r1, r3
 8008442:	431a      	orrs	r2, r3
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 80a2 	beq.w	800859a <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008456:	4b5f      	ldr	r3, [pc, #380]	; (80085d4 <HAL_GPIO_Init+0x2b0>)
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	4a5e      	ldr	r2, [pc, #376]	; (80085d4 <HAL_GPIO_Init+0x2b0>)
 800845c:	f043 0301 	orr.w	r3, r3, #1
 8008460:	6193      	str	r3, [r2, #24]
 8008462:	4b5c      	ldr	r3, [pc, #368]	; (80085d4 <HAL_GPIO_Init+0x2b0>)
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	f003 0301 	and.w	r3, r3, #1
 800846a:	60bb      	str	r3, [r7, #8]
 800846c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800846e:	4a5a      	ldr	r2, [pc, #360]	; (80085d8 <HAL_GPIO_Init+0x2b4>)
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	089b      	lsrs	r3, r3, #2
 8008474:	3302      	adds	r3, #2
 8008476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800847a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	f003 0303 	and.w	r3, r3, #3
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	220f      	movs	r2, #15
 8008486:	fa02 f303 	lsl.w	r3, r2, r3
 800848a:	43db      	mvns	r3, r3
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	4013      	ands	r3, r2
 8008490:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a51      	ldr	r2, [pc, #324]	; (80085dc <HAL_GPIO_Init+0x2b8>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d01f      	beq.n	80084da <HAL_GPIO_Init+0x1b6>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a50      	ldr	r2, [pc, #320]	; (80085e0 <HAL_GPIO_Init+0x2bc>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d019      	beq.n	80084d6 <HAL_GPIO_Init+0x1b2>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a4f      	ldr	r2, [pc, #316]	; (80085e4 <HAL_GPIO_Init+0x2c0>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d013      	beq.n	80084d2 <HAL_GPIO_Init+0x1ae>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a4e      	ldr	r2, [pc, #312]	; (80085e8 <HAL_GPIO_Init+0x2c4>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d00d      	beq.n	80084ce <HAL_GPIO_Init+0x1aa>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a4d      	ldr	r2, [pc, #308]	; (80085ec <HAL_GPIO_Init+0x2c8>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d007      	beq.n	80084ca <HAL_GPIO_Init+0x1a6>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a4c      	ldr	r2, [pc, #304]	; (80085f0 <HAL_GPIO_Init+0x2cc>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d101      	bne.n	80084c6 <HAL_GPIO_Init+0x1a2>
 80084c2:	2305      	movs	r3, #5
 80084c4:	e00a      	b.n	80084dc <HAL_GPIO_Init+0x1b8>
 80084c6:	2306      	movs	r3, #6
 80084c8:	e008      	b.n	80084dc <HAL_GPIO_Init+0x1b8>
 80084ca:	2304      	movs	r3, #4
 80084cc:	e006      	b.n	80084dc <HAL_GPIO_Init+0x1b8>
 80084ce:	2303      	movs	r3, #3
 80084d0:	e004      	b.n	80084dc <HAL_GPIO_Init+0x1b8>
 80084d2:	2302      	movs	r3, #2
 80084d4:	e002      	b.n	80084dc <HAL_GPIO_Init+0x1b8>
 80084d6:	2301      	movs	r3, #1
 80084d8:	e000      	b.n	80084dc <HAL_GPIO_Init+0x1b8>
 80084da:	2300      	movs	r3, #0
 80084dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084de:	f002 0203 	and.w	r2, r2, #3
 80084e2:	0092      	lsls	r2, r2, #2
 80084e4:	4093      	lsls	r3, r2
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80084ec:	493a      	ldr	r1, [pc, #232]	; (80085d8 <HAL_GPIO_Init+0x2b4>)
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	089b      	lsrs	r3, r3, #2
 80084f2:	3302      	adds	r3, #2
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d006      	beq.n	8008514 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008506:	4b3b      	ldr	r3, [pc, #236]	; (80085f4 <HAL_GPIO_Init+0x2d0>)
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	493a      	ldr	r1, [pc, #232]	; (80085f4 <HAL_GPIO_Init+0x2d0>)
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	4313      	orrs	r3, r2
 8008510:	600b      	str	r3, [r1, #0]
 8008512:	e006      	b.n	8008522 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008514:	4b37      	ldr	r3, [pc, #220]	; (80085f4 <HAL_GPIO_Init+0x2d0>)
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	43db      	mvns	r3, r3
 800851c:	4935      	ldr	r1, [pc, #212]	; (80085f4 <HAL_GPIO_Init+0x2d0>)
 800851e:	4013      	ands	r3, r2
 8008520:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800852a:	2b00      	cmp	r3, #0
 800852c:	d006      	beq.n	800853c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800852e:	4b31      	ldr	r3, [pc, #196]	; (80085f4 <HAL_GPIO_Init+0x2d0>)
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	4930      	ldr	r1, [pc, #192]	; (80085f4 <HAL_GPIO_Init+0x2d0>)
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	4313      	orrs	r3, r2
 8008538:	604b      	str	r3, [r1, #4]
 800853a:	e006      	b.n	800854a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800853c:	4b2d      	ldr	r3, [pc, #180]	; (80085f4 <HAL_GPIO_Init+0x2d0>)
 800853e:	685a      	ldr	r2, [r3, #4]
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	43db      	mvns	r3, r3
 8008544:	492b      	ldr	r1, [pc, #172]	; (80085f4 <HAL_GPIO_Init+0x2d0>)
 8008546:	4013      	ands	r3, r2
 8008548:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008552:	2b00      	cmp	r3, #0
 8008554:	d006      	beq.n	8008564 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008556:	4b27      	ldr	r3, [pc, #156]	; (80085f4 <HAL_GPIO_Init+0x2d0>)
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	4926      	ldr	r1, [pc, #152]	; (80085f4 <HAL_GPIO_Init+0x2d0>)
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	4313      	orrs	r3, r2
 8008560:	608b      	str	r3, [r1, #8]
 8008562:	e006      	b.n	8008572 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008564:	4b23      	ldr	r3, [pc, #140]	; (80085f4 <HAL_GPIO_Init+0x2d0>)
 8008566:	689a      	ldr	r2, [r3, #8]
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	43db      	mvns	r3, r3
 800856c:	4921      	ldr	r1, [pc, #132]	; (80085f4 <HAL_GPIO_Init+0x2d0>)
 800856e:	4013      	ands	r3, r2
 8008570:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d006      	beq.n	800858c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800857e:	4b1d      	ldr	r3, [pc, #116]	; (80085f4 <HAL_GPIO_Init+0x2d0>)
 8008580:	68da      	ldr	r2, [r3, #12]
 8008582:	491c      	ldr	r1, [pc, #112]	; (80085f4 <HAL_GPIO_Init+0x2d0>)
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	4313      	orrs	r3, r2
 8008588:	60cb      	str	r3, [r1, #12]
 800858a:	e006      	b.n	800859a <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800858c:	4b19      	ldr	r3, [pc, #100]	; (80085f4 <HAL_GPIO_Init+0x2d0>)
 800858e:	68da      	ldr	r2, [r3, #12]
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	43db      	mvns	r3, r3
 8008594:	4917      	ldr	r1, [pc, #92]	; (80085f4 <HAL_GPIO_Init+0x2d0>)
 8008596:	4013      	ands	r3, r2
 8008598:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	3301      	adds	r3, #1
 800859e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	fa22 f303 	lsr.w	r3, r2, r3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f47f aec4 	bne.w	8008338 <HAL_GPIO_Init+0x14>
  }
}
 80085b0:	bf00      	nop
 80085b2:	372c      	adds	r7, #44	; 0x2c
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bc80      	pop	{r7}
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	10210000 	.word	0x10210000
 80085c0:	10110000 	.word	0x10110000
 80085c4:	10120000 	.word	0x10120000
 80085c8:	10310000 	.word	0x10310000
 80085cc:	10320000 	.word	0x10320000
 80085d0:	10220000 	.word	0x10220000
 80085d4:	40021000 	.word	0x40021000
 80085d8:	40010000 	.word	0x40010000
 80085dc:	40010800 	.word	0x40010800
 80085e0:	40010c00 	.word	0x40010c00
 80085e4:	40011000 	.word	0x40011000
 80085e8:	40011400 	.word	0x40011400
 80085ec:	40011800 	.word	0x40011800
 80085f0:	40011c00 	.word	0x40011c00
 80085f4:	40010400 	.word	0x40010400

080085f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	460b      	mov	r3, r1
 8008602:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	689a      	ldr	r2, [r3, #8]
 8008608:	887b      	ldrh	r3, [r7, #2]
 800860a:	4013      	ands	r3, r2
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008610:	2301      	movs	r3, #1
 8008612:	73fb      	strb	r3, [r7, #15]
 8008614:	e001      	b.n	800861a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008616:	2300      	movs	r3, #0
 8008618:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800861a:	7bfb      	ldrb	r3, [r7, #15]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	bc80      	pop	{r7}
 8008624:	4770      	bx	lr

08008626 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008626:	b480      	push	{r7}
 8008628:	b083      	sub	sp, #12
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	460b      	mov	r3, r1
 8008630:	807b      	strh	r3, [r7, #2]
 8008632:	4613      	mov	r3, r2
 8008634:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008636:	787b      	ldrb	r3, [r7, #1]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d003      	beq.n	8008644 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800863c:	887a      	ldrh	r2, [r7, #2]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008642:	e003      	b.n	800864c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008644:	887b      	ldrh	r3, [r7, #2]
 8008646:	041a      	lsls	r2, r3, #16
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	611a      	str	r2, [r3, #16]
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	bc80      	pop	{r7}
 8008654:	4770      	bx	lr
	...

08008658 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	4603      	mov	r3, r0
 8008660:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008662:	4b08      	ldr	r3, [pc, #32]	; (8008684 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008664:	695a      	ldr	r2, [r3, #20]
 8008666:	88fb      	ldrh	r3, [r7, #6]
 8008668:	4013      	ands	r3, r2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d006      	beq.n	800867c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800866e:	4a05      	ldr	r2, [pc, #20]	; (8008684 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008670:	88fb      	ldrh	r3, [r7, #6]
 8008672:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008674:	88fb      	ldrh	r3, [r7, #6]
 8008676:	4618      	mov	r0, r3
 8008678:	f000 f806 	bl	8008688 <HAL_GPIO_EXTI_Callback>
  }
}
 800867c:	bf00      	nop
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	40010400 	.word	0x40010400

08008688 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	4603      	mov	r3, r0
 8008690:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008692:	bf00      	nop
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	bc80      	pop	{r7}
 800869a:	4770      	bx	lr

0800869c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d101      	bne.n	80086ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e26c      	b.n	8008b88 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f000 8087 	beq.w	80087ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80086bc:	4b92      	ldr	r3, [pc, #584]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	f003 030c 	and.w	r3, r3, #12
 80086c4:	2b04      	cmp	r3, #4
 80086c6:	d00c      	beq.n	80086e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80086c8:	4b8f      	ldr	r3, [pc, #572]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	f003 030c 	and.w	r3, r3, #12
 80086d0:	2b08      	cmp	r3, #8
 80086d2:	d112      	bne.n	80086fa <HAL_RCC_OscConfig+0x5e>
 80086d4:	4b8c      	ldr	r3, [pc, #560]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086e0:	d10b      	bne.n	80086fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086e2:	4b89      	ldr	r3, [pc, #548]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d06c      	beq.n	80087c8 <HAL_RCC_OscConfig+0x12c>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d168      	bne.n	80087c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e246      	b.n	8008b88 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008702:	d106      	bne.n	8008712 <HAL_RCC_OscConfig+0x76>
 8008704:	4b80      	ldr	r3, [pc, #512]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a7f      	ldr	r2, [pc, #508]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 800870a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800870e:	6013      	str	r3, [r2, #0]
 8008710:	e02e      	b.n	8008770 <HAL_RCC_OscConfig+0xd4>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10c      	bne.n	8008734 <HAL_RCC_OscConfig+0x98>
 800871a:	4b7b      	ldr	r3, [pc, #492]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a7a      	ldr	r2, [pc, #488]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 8008720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008724:	6013      	str	r3, [r2, #0]
 8008726:	4b78      	ldr	r3, [pc, #480]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a77      	ldr	r2, [pc, #476]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 800872c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008730:	6013      	str	r3, [r2, #0]
 8008732:	e01d      	b.n	8008770 <HAL_RCC_OscConfig+0xd4>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800873c:	d10c      	bne.n	8008758 <HAL_RCC_OscConfig+0xbc>
 800873e:	4b72      	ldr	r3, [pc, #456]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a71      	ldr	r2, [pc, #452]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 8008744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008748:	6013      	str	r3, [r2, #0]
 800874a:	4b6f      	ldr	r3, [pc, #444]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a6e      	ldr	r2, [pc, #440]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 8008750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	e00b      	b.n	8008770 <HAL_RCC_OscConfig+0xd4>
 8008758:	4b6b      	ldr	r3, [pc, #428]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a6a      	ldr	r2, [pc, #424]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 800875e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	4b68      	ldr	r3, [pc, #416]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a67      	ldr	r2, [pc, #412]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 800876a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800876e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d013      	beq.n	80087a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008778:	f7ff fb92 	bl	8007ea0 <HAL_GetTick>
 800877c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800877e:	e008      	b.n	8008792 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008780:	f7ff fb8e 	bl	8007ea0 <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	2b64      	cmp	r3, #100	; 0x64
 800878c:	d901      	bls.n	8008792 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800878e:	2303      	movs	r3, #3
 8008790:	e1fa      	b.n	8008b88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008792:	4b5d      	ldr	r3, [pc, #372]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0f0      	beq.n	8008780 <HAL_RCC_OscConfig+0xe4>
 800879e:	e014      	b.n	80087ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087a0:	f7ff fb7e 	bl	8007ea0 <HAL_GetTick>
 80087a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087a6:	e008      	b.n	80087ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087a8:	f7ff fb7a 	bl	8007ea0 <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	2b64      	cmp	r3, #100	; 0x64
 80087b4:	d901      	bls.n	80087ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e1e6      	b.n	8008b88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087ba:	4b53      	ldr	r3, [pc, #332]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1f0      	bne.n	80087a8 <HAL_RCC_OscConfig+0x10c>
 80087c6:	e000      	b.n	80087ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d063      	beq.n	800889e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80087d6:	4b4c      	ldr	r3, [pc, #304]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	f003 030c 	and.w	r3, r3, #12
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00b      	beq.n	80087fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80087e2:	4b49      	ldr	r3, [pc, #292]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f003 030c 	and.w	r3, r3, #12
 80087ea:	2b08      	cmp	r3, #8
 80087ec:	d11c      	bne.n	8008828 <HAL_RCC_OscConfig+0x18c>
 80087ee:	4b46      	ldr	r3, [pc, #280]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d116      	bne.n	8008828 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087fa:	4b43      	ldr	r3, [pc, #268]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 0302 	and.w	r3, r3, #2
 8008802:	2b00      	cmp	r3, #0
 8008804:	d005      	beq.n	8008812 <HAL_RCC_OscConfig+0x176>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d001      	beq.n	8008812 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e1ba      	b.n	8008b88 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008812:	4b3d      	ldr	r3, [pc, #244]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	00db      	lsls	r3, r3, #3
 8008820:	4939      	ldr	r1, [pc, #228]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 8008822:	4313      	orrs	r3, r2
 8008824:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008826:	e03a      	b.n	800889e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d020      	beq.n	8008872 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008830:	4b36      	ldr	r3, [pc, #216]	; (800890c <HAL_RCC_OscConfig+0x270>)
 8008832:	2201      	movs	r2, #1
 8008834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008836:	f7ff fb33 	bl	8007ea0 <HAL_GetTick>
 800883a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800883c:	e008      	b.n	8008850 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800883e:	f7ff fb2f 	bl	8007ea0 <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	2b02      	cmp	r3, #2
 800884a:	d901      	bls.n	8008850 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e19b      	b.n	8008b88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008850:	4b2d      	ldr	r3, [pc, #180]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0302 	and.w	r3, r3, #2
 8008858:	2b00      	cmp	r3, #0
 800885a:	d0f0      	beq.n	800883e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800885c:	4b2a      	ldr	r3, [pc, #168]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	695b      	ldr	r3, [r3, #20]
 8008868:	00db      	lsls	r3, r3, #3
 800886a:	4927      	ldr	r1, [pc, #156]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 800886c:	4313      	orrs	r3, r2
 800886e:	600b      	str	r3, [r1, #0]
 8008870:	e015      	b.n	800889e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008872:	4b26      	ldr	r3, [pc, #152]	; (800890c <HAL_RCC_OscConfig+0x270>)
 8008874:	2200      	movs	r2, #0
 8008876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008878:	f7ff fb12 	bl	8007ea0 <HAL_GetTick>
 800887c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800887e:	e008      	b.n	8008892 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008880:	f7ff fb0e 	bl	8007ea0 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	2b02      	cmp	r3, #2
 800888c:	d901      	bls.n	8008892 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e17a      	b.n	8008b88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008892:	4b1d      	ldr	r3, [pc, #116]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0302 	and.w	r3, r3, #2
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1f0      	bne.n	8008880 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 0308 	and.w	r3, r3, #8
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d03a      	beq.n	8008920 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d019      	beq.n	80088e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088b2:	4b17      	ldr	r3, [pc, #92]	; (8008910 <HAL_RCC_OscConfig+0x274>)
 80088b4:	2201      	movs	r2, #1
 80088b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088b8:	f7ff faf2 	bl	8007ea0 <HAL_GetTick>
 80088bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088be:	e008      	b.n	80088d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088c0:	f7ff faee 	bl	8007ea0 <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d901      	bls.n	80088d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e15a      	b.n	8008b88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088d2:	4b0d      	ldr	r3, [pc, #52]	; (8008908 <HAL_RCC_OscConfig+0x26c>)
 80088d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0f0      	beq.n	80088c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80088de:	2001      	movs	r0, #1
 80088e0:	f000 fada 	bl	8008e98 <RCC_Delay>
 80088e4:	e01c      	b.n	8008920 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088e6:	4b0a      	ldr	r3, [pc, #40]	; (8008910 <HAL_RCC_OscConfig+0x274>)
 80088e8:	2200      	movs	r2, #0
 80088ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088ec:	f7ff fad8 	bl	8007ea0 <HAL_GetTick>
 80088f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088f2:	e00f      	b.n	8008914 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088f4:	f7ff fad4 	bl	8007ea0 <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d908      	bls.n	8008914 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e140      	b.n	8008b88 <HAL_RCC_OscConfig+0x4ec>
 8008906:	bf00      	nop
 8008908:	40021000 	.word	0x40021000
 800890c:	42420000 	.word	0x42420000
 8008910:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008914:	4b9e      	ldr	r3, [pc, #632]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 8008916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008918:	f003 0302 	and.w	r3, r3, #2
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1e9      	bne.n	80088f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 80a6 	beq.w	8008a7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800892e:	2300      	movs	r3, #0
 8008930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008932:	4b97      	ldr	r3, [pc, #604]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 8008934:	69db      	ldr	r3, [r3, #28]
 8008936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10d      	bne.n	800895a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800893e:	4b94      	ldr	r3, [pc, #592]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	4a93      	ldr	r2, [pc, #588]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 8008944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008948:	61d3      	str	r3, [r2, #28]
 800894a:	4b91      	ldr	r3, [pc, #580]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 800894c:	69db      	ldr	r3, [r3, #28]
 800894e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008952:	60bb      	str	r3, [r7, #8]
 8008954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008956:	2301      	movs	r3, #1
 8008958:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800895a:	4b8e      	ldr	r3, [pc, #568]	; (8008b94 <HAL_RCC_OscConfig+0x4f8>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008962:	2b00      	cmp	r3, #0
 8008964:	d118      	bne.n	8008998 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008966:	4b8b      	ldr	r3, [pc, #556]	; (8008b94 <HAL_RCC_OscConfig+0x4f8>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a8a      	ldr	r2, [pc, #552]	; (8008b94 <HAL_RCC_OscConfig+0x4f8>)
 800896c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008972:	f7ff fa95 	bl	8007ea0 <HAL_GetTick>
 8008976:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008978:	e008      	b.n	800898c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800897a:	f7ff fa91 	bl	8007ea0 <HAL_GetTick>
 800897e:	4602      	mov	r2, r0
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	2b64      	cmp	r3, #100	; 0x64
 8008986:	d901      	bls.n	800898c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e0fd      	b.n	8008b88 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800898c:	4b81      	ldr	r3, [pc, #516]	; (8008b94 <HAL_RCC_OscConfig+0x4f8>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008994:	2b00      	cmp	r3, #0
 8008996:	d0f0      	beq.n	800897a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d106      	bne.n	80089ae <HAL_RCC_OscConfig+0x312>
 80089a0:	4b7b      	ldr	r3, [pc, #492]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 80089a2:	6a1b      	ldr	r3, [r3, #32]
 80089a4:	4a7a      	ldr	r2, [pc, #488]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 80089a6:	f043 0301 	orr.w	r3, r3, #1
 80089aa:	6213      	str	r3, [r2, #32]
 80089ac:	e02d      	b.n	8008a0a <HAL_RCC_OscConfig+0x36e>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10c      	bne.n	80089d0 <HAL_RCC_OscConfig+0x334>
 80089b6:	4b76      	ldr	r3, [pc, #472]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	4a75      	ldr	r2, [pc, #468]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 80089bc:	f023 0301 	bic.w	r3, r3, #1
 80089c0:	6213      	str	r3, [r2, #32]
 80089c2:	4b73      	ldr	r3, [pc, #460]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	4a72      	ldr	r2, [pc, #456]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 80089c8:	f023 0304 	bic.w	r3, r3, #4
 80089cc:	6213      	str	r3, [r2, #32]
 80089ce:	e01c      	b.n	8008a0a <HAL_RCC_OscConfig+0x36e>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	2b05      	cmp	r3, #5
 80089d6:	d10c      	bne.n	80089f2 <HAL_RCC_OscConfig+0x356>
 80089d8:	4b6d      	ldr	r3, [pc, #436]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 80089da:	6a1b      	ldr	r3, [r3, #32]
 80089dc:	4a6c      	ldr	r2, [pc, #432]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 80089de:	f043 0304 	orr.w	r3, r3, #4
 80089e2:	6213      	str	r3, [r2, #32]
 80089e4:	4b6a      	ldr	r3, [pc, #424]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 80089e6:	6a1b      	ldr	r3, [r3, #32]
 80089e8:	4a69      	ldr	r2, [pc, #420]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 80089ea:	f043 0301 	orr.w	r3, r3, #1
 80089ee:	6213      	str	r3, [r2, #32]
 80089f0:	e00b      	b.n	8008a0a <HAL_RCC_OscConfig+0x36e>
 80089f2:	4b67      	ldr	r3, [pc, #412]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	4a66      	ldr	r2, [pc, #408]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 80089f8:	f023 0301 	bic.w	r3, r3, #1
 80089fc:	6213      	str	r3, [r2, #32]
 80089fe:	4b64      	ldr	r3, [pc, #400]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	4a63      	ldr	r2, [pc, #396]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 8008a04:	f023 0304 	bic.w	r3, r3, #4
 8008a08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d015      	beq.n	8008a3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a12:	f7ff fa45 	bl	8007ea0 <HAL_GetTick>
 8008a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a18:	e00a      	b.n	8008a30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a1a:	f7ff fa41 	bl	8007ea0 <HAL_GetTick>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d901      	bls.n	8008a30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e0ab      	b.n	8008b88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a30:	4b57      	ldr	r3, [pc, #348]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 8008a32:	6a1b      	ldr	r3, [r3, #32]
 8008a34:	f003 0302 	and.w	r3, r3, #2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d0ee      	beq.n	8008a1a <HAL_RCC_OscConfig+0x37e>
 8008a3c:	e014      	b.n	8008a68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a3e:	f7ff fa2f 	bl	8007ea0 <HAL_GetTick>
 8008a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a44:	e00a      	b.n	8008a5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a46:	f7ff fa2b 	bl	8007ea0 <HAL_GetTick>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d901      	bls.n	8008a5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e095      	b.n	8008b88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a5c:	4b4c      	ldr	r3, [pc, #304]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 8008a5e:	6a1b      	ldr	r3, [r3, #32]
 8008a60:	f003 0302 	and.w	r3, r3, #2
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1ee      	bne.n	8008a46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008a68:	7dfb      	ldrb	r3, [r7, #23]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d105      	bne.n	8008a7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a6e:	4b48      	ldr	r3, [pc, #288]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	4a47      	ldr	r2, [pc, #284]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 8008a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f000 8081 	beq.w	8008b86 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a84:	4b42      	ldr	r3, [pc, #264]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	f003 030c 	and.w	r3, r3, #12
 8008a8c:	2b08      	cmp	r3, #8
 8008a8e:	d061      	beq.n	8008b54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	69db      	ldr	r3, [r3, #28]
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d146      	bne.n	8008b26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a98:	4b3f      	ldr	r3, [pc, #252]	; (8008b98 <HAL_RCC_OscConfig+0x4fc>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a9e:	f7ff f9ff 	bl	8007ea0 <HAL_GetTick>
 8008aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008aa4:	e008      	b.n	8008ab8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aa6:	f7ff f9fb 	bl	8007ea0 <HAL_GetTick>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d901      	bls.n	8008ab8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e067      	b.n	8008b88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ab8:	4b35      	ldr	r3, [pc, #212]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1f0      	bne.n	8008aa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008acc:	d108      	bne.n	8008ae0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008ace:	4b30      	ldr	r3, [pc, #192]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	492d      	ldr	r1, [pc, #180]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 8008adc:	4313      	orrs	r3, r2
 8008ade:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ae0:	4b2b      	ldr	r3, [pc, #172]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a19      	ldr	r1, [r3, #32]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af0:	430b      	orrs	r3, r1
 8008af2:	4927      	ldr	r1, [pc, #156]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 8008af4:	4313      	orrs	r3, r2
 8008af6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008af8:	4b27      	ldr	r3, [pc, #156]	; (8008b98 <HAL_RCC_OscConfig+0x4fc>)
 8008afa:	2201      	movs	r2, #1
 8008afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008afe:	f7ff f9cf 	bl	8007ea0 <HAL_GetTick>
 8008b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008b04:	e008      	b.n	8008b18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b06:	f7ff f9cb 	bl	8007ea0 <HAL_GetTick>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d901      	bls.n	8008b18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	e037      	b.n	8008b88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008b18:	4b1d      	ldr	r3, [pc, #116]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d0f0      	beq.n	8008b06 <HAL_RCC_OscConfig+0x46a>
 8008b24:	e02f      	b.n	8008b86 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b26:	4b1c      	ldr	r3, [pc, #112]	; (8008b98 <HAL_RCC_OscConfig+0x4fc>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b2c:	f7ff f9b8 	bl	8007ea0 <HAL_GetTick>
 8008b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b32:	e008      	b.n	8008b46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b34:	f7ff f9b4 	bl	8007ea0 <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d901      	bls.n	8008b46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e020      	b.n	8008b88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b46:	4b12      	ldr	r3, [pc, #72]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1f0      	bne.n	8008b34 <HAL_RCC_OscConfig+0x498>
 8008b52:	e018      	b.n	8008b86 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	69db      	ldr	r3, [r3, #28]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d101      	bne.n	8008b60 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e013      	b.n	8008b88 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008b60:	4b0b      	ldr	r3, [pc, #44]	; (8008b90 <HAL_RCC_OscConfig+0x4f4>)
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a1b      	ldr	r3, [r3, #32]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d106      	bne.n	8008b82 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d001      	beq.n	8008b86 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e000      	b.n	8008b88 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	40021000 	.word	0x40021000
 8008b94:	40007000 	.word	0x40007000
 8008b98:	42420060 	.word	0x42420060

08008b9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e0d0      	b.n	8008d52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008bb0:	4b6a      	ldr	r3, [pc, #424]	; (8008d5c <HAL_RCC_ClockConfig+0x1c0>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 0307 	and.w	r3, r3, #7
 8008bb8:	683a      	ldr	r2, [r7, #0]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d910      	bls.n	8008be0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bbe:	4b67      	ldr	r3, [pc, #412]	; (8008d5c <HAL_RCC_ClockConfig+0x1c0>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f023 0207 	bic.w	r2, r3, #7
 8008bc6:	4965      	ldr	r1, [pc, #404]	; (8008d5c <HAL_RCC_ClockConfig+0x1c0>)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bce:	4b63      	ldr	r3, [pc, #396]	; (8008d5c <HAL_RCC_ClockConfig+0x1c0>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0307 	and.w	r3, r3, #7
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d001      	beq.n	8008be0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e0b8      	b.n	8008d52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 0302 	and.w	r3, r3, #2
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d020      	beq.n	8008c2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0304 	and.w	r3, r3, #4
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d005      	beq.n	8008c04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008bf8:	4b59      	ldr	r3, [pc, #356]	; (8008d60 <HAL_RCC_ClockConfig+0x1c4>)
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	4a58      	ldr	r2, [pc, #352]	; (8008d60 <HAL_RCC_ClockConfig+0x1c4>)
 8008bfe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008c02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 0308 	and.w	r3, r3, #8
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d005      	beq.n	8008c1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c10:	4b53      	ldr	r3, [pc, #332]	; (8008d60 <HAL_RCC_ClockConfig+0x1c4>)
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	4a52      	ldr	r2, [pc, #328]	; (8008d60 <HAL_RCC_ClockConfig+0x1c4>)
 8008c16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008c1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c1c:	4b50      	ldr	r3, [pc, #320]	; (8008d60 <HAL_RCC_ClockConfig+0x1c4>)
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	494d      	ldr	r1, [pc, #308]	; (8008d60 <HAL_RCC_ClockConfig+0x1c4>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0301 	and.w	r3, r3, #1
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d040      	beq.n	8008cbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d107      	bne.n	8008c52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c42:	4b47      	ldr	r3, [pc, #284]	; (8008d60 <HAL_RCC_ClockConfig+0x1c4>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d115      	bne.n	8008c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e07f      	b.n	8008d52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d107      	bne.n	8008c6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c5a:	4b41      	ldr	r3, [pc, #260]	; (8008d60 <HAL_RCC_ClockConfig+0x1c4>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d109      	bne.n	8008c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e073      	b.n	8008d52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c6a:	4b3d      	ldr	r3, [pc, #244]	; (8008d60 <HAL_RCC_ClockConfig+0x1c4>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0302 	and.w	r3, r3, #2
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d101      	bne.n	8008c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e06b      	b.n	8008d52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c7a:	4b39      	ldr	r3, [pc, #228]	; (8008d60 <HAL_RCC_ClockConfig+0x1c4>)
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f023 0203 	bic.w	r2, r3, #3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	4936      	ldr	r1, [pc, #216]	; (8008d60 <HAL_RCC_ClockConfig+0x1c4>)
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c8c:	f7ff f908 	bl	8007ea0 <HAL_GetTick>
 8008c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c92:	e00a      	b.n	8008caa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c94:	f7ff f904 	bl	8007ea0 <HAL_GetTick>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d901      	bls.n	8008caa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e053      	b.n	8008d52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008caa:	4b2d      	ldr	r3, [pc, #180]	; (8008d60 <HAL_RCC_ClockConfig+0x1c4>)
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f003 020c 	and.w	r2, r3, #12
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d1eb      	bne.n	8008c94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008cbc:	4b27      	ldr	r3, [pc, #156]	; (8008d5c <HAL_RCC_ClockConfig+0x1c0>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0307 	and.w	r3, r3, #7
 8008cc4:	683a      	ldr	r2, [r7, #0]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d210      	bcs.n	8008cec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cca:	4b24      	ldr	r3, [pc, #144]	; (8008d5c <HAL_RCC_ClockConfig+0x1c0>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f023 0207 	bic.w	r2, r3, #7
 8008cd2:	4922      	ldr	r1, [pc, #136]	; (8008d5c <HAL_RCC_ClockConfig+0x1c0>)
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cda:	4b20      	ldr	r3, [pc, #128]	; (8008d5c <HAL_RCC_ClockConfig+0x1c0>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0307 	and.w	r3, r3, #7
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d001      	beq.n	8008cec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e032      	b.n	8008d52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0304 	and.w	r3, r3, #4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d008      	beq.n	8008d0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cf8:	4b19      	ldr	r3, [pc, #100]	; (8008d60 <HAL_RCC_ClockConfig+0x1c4>)
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	4916      	ldr	r1, [pc, #88]	; (8008d60 <HAL_RCC_ClockConfig+0x1c4>)
 8008d06:	4313      	orrs	r3, r2
 8008d08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0308 	and.w	r3, r3, #8
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d009      	beq.n	8008d2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008d16:	4b12      	ldr	r3, [pc, #72]	; (8008d60 <HAL_RCC_ClockConfig+0x1c4>)
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	00db      	lsls	r3, r3, #3
 8008d24:	490e      	ldr	r1, [pc, #56]	; (8008d60 <HAL_RCC_ClockConfig+0x1c4>)
 8008d26:	4313      	orrs	r3, r2
 8008d28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008d2a:	f000 f821 	bl	8008d70 <HAL_RCC_GetSysClockFreq>
 8008d2e:	4601      	mov	r1, r0
 8008d30:	4b0b      	ldr	r3, [pc, #44]	; (8008d60 <HAL_RCC_ClockConfig+0x1c4>)
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	091b      	lsrs	r3, r3, #4
 8008d36:	f003 030f 	and.w	r3, r3, #15
 8008d3a:	4a0a      	ldr	r2, [pc, #40]	; (8008d64 <HAL_RCC_ClockConfig+0x1c8>)
 8008d3c:	5cd3      	ldrb	r3, [r2, r3]
 8008d3e:	fa21 f303 	lsr.w	r3, r1, r3
 8008d42:	4a09      	ldr	r2, [pc, #36]	; (8008d68 <HAL_RCC_ClockConfig+0x1cc>)
 8008d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008d46:	4b09      	ldr	r3, [pc, #36]	; (8008d6c <HAL_RCC_ClockConfig+0x1d0>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7ff f866 	bl	8007e1c <HAL_InitTick>

  return HAL_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	40022000 	.word	0x40022000
 8008d60:	40021000 	.word	0x40021000
 8008d64:	0800ca44 	.word	0x0800ca44
 8008d68:	20000008 	.word	0x20000008
 8008d6c:	2000000c 	.word	0x2000000c

08008d70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d70:	b490      	push	{r4, r7}
 8008d72:	b08a      	sub	sp, #40	; 0x28
 8008d74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008d76:	4b2a      	ldr	r3, [pc, #168]	; (8008e20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008d78:	1d3c      	adds	r4, r7, #4
 8008d7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008d80:	4b28      	ldr	r3, [pc, #160]	; (8008e24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008d82:	881b      	ldrh	r3, [r3, #0]
 8008d84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008d86:	2300      	movs	r3, #0
 8008d88:	61fb      	str	r3, [r7, #28]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	61bb      	str	r3, [r7, #24]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	627b      	str	r3, [r7, #36]	; 0x24
 8008d92:	2300      	movs	r3, #0
 8008d94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008d9a:	4b23      	ldr	r3, [pc, #140]	; (8008e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	f003 030c 	and.w	r3, r3, #12
 8008da6:	2b04      	cmp	r3, #4
 8008da8:	d002      	beq.n	8008db0 <HAL_RCC_GetSysClockFreq+0x40>
 8008daa:	2b08      	cmp	r3, #8
 8008dac:	d003      	beq.n	8008db6 <HAL_RCC_GetSysClockFreq+0x46>
 8008dae:	e02d      	b.n	8008e0c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008db0:	4b1e      	ldr	r3, [pc, #120]	; (8008e2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008db2:	623b      	str	r3, [r7, #32]
      break;
 8008db4:	e02d      	b.n	8008e12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	0c9b      	lsrs	r3, r3, #18
 8008dba:	f003 030f 	and.w	r3, r3, #15
 8008dbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008dc8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d013      	beq.n	8008dfc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008dd4:	4b14      	ldr	r3, [pc, #80]	; (8008e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	0c5b      	lsrs	r3, r3, #17
 8008dda:	f003 0301 	and.w	r3, r3, #1
 8008dde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008de2:	4413      	add	r3, r2
 8008de4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008de8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	4a0f      	ldr	r2, [pc, #60]	; (8008e2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008dee:	fb02 f203 	mul.w	r2, r2, r3
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008df8:	627b      	str	r3, [r7, #36]	; 0x24
 8008dfa:	e004      	b.n	8008e06 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	4a0c      	ldr	r2, [pc, #48]	; (8008e30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008e00:	fb02 f303 	mul.w	r3, r2, r3
 8008e04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e08:	623b      	str	r3, [r7, #32]
      break;
 8008e0a:	e002      	b.n	8008e12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008e0c:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008e0e:	623b      	str	r3, [r7, #32]
      break;
 8008e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e12:	6a3b      	ldr	r3, [r7, #32]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3728      	adds	r7, #40	; 0x28
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bc90      	pop	{r4, r7}
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	0800b270 	.word	0x0800b270
 8008e24:	0800b280 	.word	0x0800b280
 8008e28:	40021000 	.word	0x40021000
 8008e2c:	007a1200 	.word	0x007a1200
 8008e30:	003d0900 	.word	0x003d0900

08008e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e34:	b480      	push	{r7}
 8008e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e38:	4b02      	ldr	r3, [pc, #8]	; (8008e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bc80      	pop	{r7}
 8008e42:	4770      	bx	lr
 8008e44:	20000008 	.word	0x20000008

08008e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008e4c:	f7ff fff2 	bl	8008e34 <HAL_RCC_GetHCLKFreq>
 8008e50:	4601      	mov	r1, r0
 8008e52:	4b05      	ldr	r3, [pc, #20]	; (8008e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	0a1b      	lsrs	r3, r3, #8
 8008e58:	f003 0307 	and.w	r3, r3, #7
 8008e5c:	4a03      	ldr	r2, [pc, #12]	; (8008e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e5e:	5cd3      	ldrb	r3, [r2, r3]
 8008e60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	40021000 	.word	0x40021000
 8008e6c:	0800ca54 	.word	0x0800ca54

08008e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008e74:	f7ff ffde 	bl	8008e34 <HAL_RCC_GetHCLKFreq>
 8008e78:	4601      	mov	r1, r0
 8008e7a:	4b05      	ldr	r3, [pc, #20]	; (8008e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	0adb      	lsrs	r3, r3, #11
 8008e80:	f003 0307 	and.w	r3, r3, #7
 8008e84:	4a03      	ldr	r2, [pc, #12]	; (8008e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e86:	5cd3      	ldrb	r3, [r2, r3]
 8008e88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	40021000 	.word	0x40021000
 8008e94:	0800ca54 	.word	0x0800ca54

08008e98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008ea0:	4b0a      	ldr	r3, [pc, #40]	; (8008ecc <RCC_Delay+0x34>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a0a      	ldr	r2, [pc, #40]	; (8008ed0 <RCC_Delay+0x38>)
 8008ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8008eaa:	0a5b      	lsrs	r3, r3, #9
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	fb02 f303 	mul.w	r3, r2, r3
 8008eb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008eb4:	bf00      	nop
  }
  while (Delay --);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	1e5a      	subs	r2, r3, #1
 8008eba:	60fa      	str	r2, [r7, #12]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1f9      	bne.n	8008eb4 <RCC_Delay+0x1c>
}
 8008ec0:	bf00      	nop
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bc80      	pop	{r7}
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	20000008 	.word	0x20000008
 8008ed0:	10624dd3 	.word	0x10624dd3

08008ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d101      	bne.n	8008ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e01d      	b.n	8008f22 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d106      	bne.n	8008f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7fe fcac 	bl	8007858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2202      	movs	r2, #2
 8008f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	3304      	adds	r3, #4
 8008f10:	4619      	mov	r1, r3
 8008f12:	4610      	mov	r0, r2
 8008f14:	f000 fa10 	bl	8009338 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f2a:	b480      	push	{r7}
 8008f2c:	b085      	sub	sp, #20
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68da      	ldr	r2, [r3, #12]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f042 0201 	orr.w	r2, r2, #1
 8008f40:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f003 0307 	and.w	r3, r3, #7
 8008f4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2b06      	cmp	r3, #6
 8008f52:	d007      	beq.n	8008f64 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f042 0201 	orr.w	r2, r2, #1
 8008f62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bc80      	pop	{r7}
 8008f6e:	4770      	bx	lr

08008f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	f003 0302 	and.w	r3, r3, #2
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d122      	bne.n	8008fcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f003 0302 	and.w	r3, r3, #2
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d11b      	bne.n	8008fcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f06f 0202 	mvn.w	r2, #2
 8008f9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	f003 0303 	and.w	r3, r3, #3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d003      	beq.n	8008fba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f9a4 	bl	8009300 <HAL_TIM_IC_CaptureCallback>
 8008fb8:	e005      	b.n	8008fc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f997 	bl	80092ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f9a6 	bl	8009312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	f003 0304 	and.w	r3, r3, #4
 8008fd6:	2b04      	cmp	r3, #4
 8008fd8:	d122      	bne.n	8009020 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	f003 0304 	and.w	r3, r3, #4
 8008fe4:	2b04      	cmp	r3, #4
 8008fe6:	d11b      	bne.n	8009020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f06f 0204 	mvn.w	r2, #4
 8008ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2202      	movs	r2, #2
 8008ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f97a 	bl	8009300 <HAL_TIM_IC_CaptureCallback>
 800900c:	e005      	b.n	800901a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f96d 	bl	80092ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 f97c 	bl	8009312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	f003 0308 	and.w	r3, r3, #8
 800902a:	2b08      	cmp	r3, #8
 800902c:	d122      	bne.n	8009074 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f003 0308 	and.w	r3, r3, #8
 8009038:	2b08      	cmp	r3, #8
 800903a:	d11b      	bne.n	8009074 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f06f 0208 	mvn.w	r2, #8
 8009044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2204      	movs	r2, #4
 800904a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	f003 0303 	and.w	r3, r3, #3
 8009056:	2b00      	cmp	r3, #0
 8009058:	d003      	beq.n	8009062 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f950 	bl	8009300 <HAL_TIM_IC_CaptureCallback>
 8009060:	e005      	b.n	800906e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f943 	bl	80092ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f952 	bl	8009312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	f003 0310 	and.w	r3, r3, #16
 800907e:	2b10      	cmp	r3, #16
 8009080:	d122      	bne.n	80090c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	f003 0310 	and.w	r3, r3, #16
 800908c:	2b10      	cmp	r3, #16
 800908e:	d11b      	bne.n	80090c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f06f 0210 	mvn.w	r2, #16
 8009098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2208      	movs	r2, #8
 800909e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	69db      	ldr	r3, [r3, #28]
 80090a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d003      	beq.n	80090b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f926 	bl	8009300 <HAL_TIM_IC_CaptureCallback>
 80090b4:	e005      	b.n	80090c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f919 	bl	80092ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f928 	bl	8009312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d10e      	bne.n	80090f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	f003 0301 	and.w	r3, r3, #1
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d107      	bne.n	80090f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f06f 0201 	mvn.w	r2, #1
 80090ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7fd ffa8 	bl	8007044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090fe:	2b80      	cmp	r3, #128	; 0x80
 8009100:	d10e      	bne.n	8009120 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800910c:	2b80      	cmp	r3, #128	; 0x80
 800910e:	d107      	bne.n	8009120 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 fa69 	bl	80095f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912a:	2b40      	cmp	r3, #64	; 0x40
 800912c:	d10e      	bne.n	800914c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009138:	2b40      	cmp	r3, #64	; 0x40
 800913a:	d107      	bne.n	800914c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f8ec 	bl	8009324 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	f003 0320 	and.w	r3, r3, #32
 8009156:	2b20      	cmp	r3, #32
 8009158:	d10e      	bne.n	8009178 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	f003 0320 	and.w	r3, r3, #32
 8009164:	2b20      	cmp	r3, #32
 8009166:	d107      	bne.n	8009178 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f06f 0220 	mvn.w	r2, #32
 8009170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 fa34 	bl	80095e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009178:	bf00      	nop
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009190:	2b01      	cmp	r3, #1
 8009192:	d101      	bne.n	8009198 <HAL_TIM_ConfigClockSource+0x18>
 8009194:	2302      	movs	r3, #2
 8009196:	e0a6      	b.n	80092e6 <HAL_TIM_ConfigClockSource+0x166>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2202      	movs	r2, #2
 80091a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80091b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2b40      	cmp	r3, #64	; 0x40
 80091ce:	d067      	beq.n	80092a0 <HAL_TIM_ConfigClockSource+0x120>
 80091d0:	2b40      	cmp	r3, #64	; 0x40
 80091d2:	d80b      	bhi.n	80091ec <HAL_TIM_ConfigClockSource+0x6c>
 80091d4:	2b10      	cmp	r3, #16
 80091d6:	d073      	beq.n	80092c0 <HAL_TIM_ConfigClockSource+0x140>
 80091d8:	2b10      	cmp	r3, #16
 80091da:	d802      	bhi.n	80091e2 <HAL_TIM_ConfigClockSource+0x62>
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d06f      	beq.n	80092c0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80091e0:	e078      	b.n	80092d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80091e2:	2b20      	cmp	r3, #32
 80091e4:	d06c      	beq.n	80092c0 <HAL_TIM_ConfigClockSource+0x140>
 80091e6:	2b30      	cmp	r3, #48	; 0x30
 80091e8:	d06a      	beq.n	80092c0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80091ea:	e073      	b.n	80092d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80091ec:	2b70      	cmp	r3, #112	; 0x70
 80091ee:	d00d      	beq.n	800920c <HAL_TIM_ConfigClockSource+0x8c>
 80091f0:	2b70      	cmp	r3, #112	; 0x70
 80091f2:	d804      	bhi.n	80091fe <HAL_TIM_ConfigClockSource+0x7e>
 80091f4:	2b50      	cmp	r3, #80	; 0x50
 80091f6:	d033      	beq.n	8009260 <HAL_TIM_ConfigClockSource+0xe0>
 80091f8:	2b60      	cmp	r3, #96	; 0x60
 80091fa:	d041      	beq.n	8009280 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80091fc:	e06a      	b.n	80092d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80091fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009202:	d066      	beq.n	80092d2 <HAL_TIM_ConfigClockSource+0x152>
 8009204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009208:	d017      	beq.n	800923a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800920a:	e063      	b.n	80092d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6818      	ldr	r0, [r3, #0]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	6899      	ldr	r1, [r3, #8]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	685a      	ldr	r2, [r3, #4]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	f000 f97d 	bl	800951a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800922e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	609a      	str	r2, [r3, #8]
      break;
 8009238:	e04c      	b.n	80092d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6818      	ldr	r0, [r3, #0]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	6899      	ldr	r1, [r3, #8]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	f000 f966 	bl	800951a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	689a      	ldr	r2, [r3, #8]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800925c:	609a      	str	r2, [r3, #8]
      break;
 800925e:	e039      	b.n	80092d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6818      	ldr	r0, [r3, #0]
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	6859      	ldr	r1, [r3, #4]
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	461a      	mov	r2, r3
 800926e:	f000 f8dd 	bl	800942c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2150      	movs	r1, #80	; 0x50
 8009278:	4618      	mov	r0, r3
 800927a:	f000 f934 	bl	80094e6 <TIM_ITRx_SetConfig>
      break;
 800927e:	e029      	b.n	80092d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6818      	ldr	r0, [r3, #0]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	6859      	ldr	r1, [r3, #4]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	461a      	mov	r2, r3
 800928e:	f000 f8fb 	bl	8009488 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2160      	movs	r1, #96	; 0x60
 8009298:	4618      	mov	r0, r3
 800929a:	f000 f924 	bl	80094e6 <TIM_ITRx_SetConfig>
      break;
 800929e:	e019      	b.n	80092d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6818      	ldr	r0, [r3, #0]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	6859      	ldr	r1, [r3, #4]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	461a      	mov	r2, r3
 80092ae:	f000 f8bd 	bl	800942c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2140      	movs	r1, #64	; 0x40
 80092b8:	4618      	mov	r0, r3
 80092ba:	f000 f914 	bl	80094e6 <TIM_ITRx_SetConfig>
      break;
 80092be:	e009      	b.n	80092d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4619      	mov	r1, r3
 80092ca:	4610      	mov	r0, r2
 80092cc:	f000 f90b 	bl	80094e6 <TIM_ITRx_SetConfig>
      break;
 80092d0:	e000      	b.n	80092d4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80092d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092ee:	b480      	push	{r7}
 80092f0:	b083      	sub	sp, #12
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092f6:	bf00      	nop
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bc80      	pop	{r7}
 80092fe:	4770      	bx	lr

08009300 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009308:	bf00      	nop
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	bc80      	pop	{r7}
 8009310:	4770      	bx	lr

08009312 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009312:	b480      	push	{r7}
 8009314:	b083      	sub	sp, #12
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800931a:	bf00      	nop
 800931c:	370c      	adds	r7, #12
 800931e:	46bd      	mov	sp, r7
 8009320:	bc80      	pop	{r7}
 8009322:	4770      	bx	lr

08009324 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	bc80      	pop	{r7}
 8009334:	4770      	bx	lr
	...

08009338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a33      	ldr	r2, [pc, #204]	; (8009418 <TIM_Base_SetConfig+0xe0>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d013      	beq.n	8009378 <TIM_Base_SetConfig+0x40>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a32      	ldr	r2, [pc, #200]	; (800941c <TIM_Base_SetConfig+0xe4>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d00f      	beq.n	8009378 <TIM_Base_SetConfig+0x40>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800935e:	d00b      	beq.n	8009378 <TIM_Base_SetConfig+0x40>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a2f      	ldr	r2, [pc, #188]	; (8009420 <TIM_Base_SetConfig+0xe8>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d007      	beq.n	8009378 <TIM_Base_SetConfig+0x40>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a2e      	ldr	r2, [pc, #184]	; (8009424 <TIM_Base_SetConfig+0xec>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d003      	beq.n	8009378 <TIM_Base_SetConfig+0x40>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a2d      	ldr	r2, [pc, #180]	; (8009428 <TIM_Base_SetConfig+0xf0>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d108      	bne.n	800938a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800937e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	4313      	orrs	r3, r2
 8009388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a22      	ldr	r2, [pc, #136]	; (8009418 <TIM_Base_SetConfig+0xe0>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d013      	beq.n	80093ba <TIM_Base_SetConfig+0x82>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a21      	ldr	r2, [pc, #132]	; (800941c <TIM_Base_SetConfig+0xe4>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d00f      	beq.n	80093ba <TIM_Base_SetConfig+0x82>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093a0:	d00b      	beq.n	80093ba <TIM_Base_SetConfig+0x82>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a1e      	ldr	r2, [pc, #120]	; (8009420 <TIM_Base_SetConfig+0xe8>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d007      	beq.n	80093ba <TIM_Base_SetConfig+0x82>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a1d      	ldr	r2, [pc, #116]	; (8009424 <TIM_Base_SetConfig+0xec>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d003      	beq.n	80093ba <TIM_Base_SetConfig+0x82>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a1c      	ldr	r2, [pc, #112]	; (8009428 <TIM_Base_SetConfig+0xf0>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d108      	bne.n	80093cc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	689a      	ldr	r2, [r3, #8]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a09      	ldr	r2, [pc, #36]	; (8009418 <TIM_Base_SetConfig+0xe0>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d003      	beq.n	8009400 <TIM_Base_SetConfig+0xc8>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a08      	ldr	r2, [pc, #32]	; (800941c <TIM_Base_SetConfig+0xe4>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d103      	bne.n	8009408 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	691a      	ldr	r2, [r3, #16]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	615a      	str	r2, [r3, #20]
}
 800940e:	bf00      	nop
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	bc80      	pop	{r7}
 8009416:	4770      	bx	lr
 8009418:	40012c00 	.word	0x40012c00
 800941c:	40013400 	.word	0x40013400
 8009420:	40000400 	.word	0x40000400
 8009424:	40000800 	.word	0x40000800
 8009428:	40000c00 	.word	0x40000c00

0800942c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800942c:	b480      	push	{r7}
 800942e:	b087      	sub	sp, #28
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6a1b      	ldr	r3, [r3, #32]
 800943c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6a1b      	ldr	r3, [r3, #32]
 8009442:	f023 0201 	bic.w	r2, r3, #1
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	011b      	lsls	r3, r3, #4
 800945c:	693a      	ldr	r2, [r7, #16]
 800945e:	4313      	orrs	r3, r2
 8009460:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	f023 030a 	bic.w	r3, r3, #10
 8009468:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800946a:	697a      	ldr	r2, [r7, #20]
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	4313      	orrs	r3, r2
 8009470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	697a      	ldr	r2, [r7, #20]
 800947c:	621a      	str	r2, [r3, #32]
}
 800947e:	bf00      	nop
 8009480:	371c      	adds	r7, #28
 8009482:	46bd      	mov	sp, r7
 8009484:	bc80      	pop	{r7}
 8009486:	4770      	bx	lr

08009488 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009488:	b480      	push	{r7}
 800948a:	b087      	sub	sp, #28
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6a1b      	ldr	r3, [r3, #32]
 8009498:	f023 0210 	bic.w	r2, r3, #16
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	031b      	lsls	r3, r3, #12
 80094b8:	697a      	ldr	r2, [r7, #20]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80094c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	011b      	lsls	r3, r3, #4
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	697a      	ldr	r2, [r7, #20]
 80094d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	621a      	str	r2, [r3, #32]
}
 80094dc:	bf00      	nop
 80094de:	371c      	adds	r7, #28
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bc80      	pop	{r7}
 80094e4:	4770      	bx	lr

080094e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80094e6:	b480      	push	{r7}
 80094e8:	b085      	sub	sp, #20
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
 80094ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	4313      	orrs	r3, r2
 8009504:	f043 0307 	orr.w	r3, r3, #7
 8009508:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	609a      	str	r2, [r3, #8]
}
 8009510:	bf00      	nop
 8009512:	3714      	adds	r7, #20
 8009514:	46bd      	mov	sp, r7
 8009516:	bc80      	pop	{r7}
 8009518:	4770      	bx	lr

0800951a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800951a:	b480      	push	{r7}
 800951c:	b087      	sub	sp, #28
 800951e:	af00      	add	r7, sp, #0
 8009520:	60f8      	str	r0, [r7, #12]
 8009522:	60b9      	str	r1, [r7, #8]
 8009524:	607a      	str	r2, [r7, #4]
 8009526:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009534:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	021a      	lsls	r2, r3, #8
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	431a      	orrs	r2, r3
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	4313      	orrs	r3, r2
 8009542:	697a      	ldr	r2, [r7, #20]
 8009544:	4313      	orrs	r3, r2
 8009546:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	697a      	ldr	r2, [r7, #20]
 800954c:	609a      	str	r2, [r3, #8]
}
 800954e:	bf00      	nop
 8009550:	371c      	adds	r7, #28
 8009552:	46bd      	mov	sp, r7
 8009554:	bc80      	pop	{r7}
 8009556:	4770      	bx	lr

08009558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009568:	2b01      	cmp	r3, #1
 800956a:	d101      	bne.n	8009570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800956c:	2302      	movs	r3, #2
 800956e:	e032      	b.n	80095d6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2202      	movs	r2, #2
 800957c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	4313      	orrs	r3, r2
 80095a0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095a8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	bc80      	pop	{r7}
 80095de:	4770      	bx	lr

080095e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095e8:	bf00      	nop
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bc80      	pop	{r7}
 80095f0:	4770      	bx	lr

080095f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b083      	sub	sp, #12
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095fa:	bf00      	nop
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	bc80      	pop	{r7}
 8009602:	4770      	bx	lr

08009604 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d101      	bne.n	8009616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e03f      	b.n	8009696 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	d106      	bne.n	8009630 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7fe fb66 	bl	8007cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2224      	movs	r2, #36	; 0x24
 8009634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68da      	ldr	r2, [r3, #12]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009646:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fb41 	bl	8009cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	691a      	ldr	r2, [r3, #16]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800965c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	695a      	ldr	r2, [r3, #20]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800966c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68da      	ldr	r2, [r3, #12]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800967c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2220      	movs	r2, #32
 8009688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2220      	movs	r2, #32
 8009690:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b088      	sub	sp, #32
 80096a2:	af02      	add	r7, sp, #8
 80096a4:	60f8      	str	r0, [r7, #12]
 80096a6:	60b9      	str	r1, [r7, #8]
 80096a8:	603b      	str	r3, [r7, #0]
 80096aa:	4613      	mov	r3, r2
 80096ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80096ae:	2300      	movs	r3, #0
 80096b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b20      	cmp	r3, #32
 80096bc:	f040 8083 	bne.w	80097c6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d002      	beq.n	80096cc <HAL_UART_Transmit+0x2e>
 80096c6:	88fb      	ldrh	r3, [r7, #6]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d101      	bne.n	80096d0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e07b      	b.n	80097c8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d101      	bne.n	80096de <HAL_UART_Transmit+0x40>
 80096da:	2302      	movs	r3, #2
 80096dc:	e074      	b.n	80097c8 <HAL_UART_Transmit+0x12a>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2201      	movs	r2, #1
 80096e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2221      	movs	r2, #33	; 0x21
 80096f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80096f4:	f7fe fbd4 	bl	8007ea0 <HAL_GetTick>
 80096f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	88fa      	ldrh	r2, [r7, #6]
 80096fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	88fa      	ldrh	r2, [r7, #6]
 8009704:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009706:	e042      	b.n	800978e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800970c:	b29b      	uxth	r3, r3
 800970e:	3b01      	subs	r3, #1
 8009710:	b29a      	uxth	r2, r3
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800971e:	d122      	bne.n	8009766 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2200      	movs	r2, #0
 8009728:	2180      	movs	r1, #128	; 0x80
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f000 f967 	bl	80099fe <UART_WaitOnFlagUntilTimeout>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8009736:	2303      	movs	r3, #3
 8009738:	e046      	b.n	80097c8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	881b      	ldrh	r3, [r3, #0]
 8009742:	461a      	mov	r2, r3
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800974c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d103      	bne.n	800975e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	3302      	adds	r3, #2
 800975a:	60bb      	str	r3, [r7, #8]
 800975c:	e017      	b.n	800978e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	3301      	adds	r3, #1
 8009762:	60bb      	str	r3, [r7, #8]
 8009764:	e013      	b.n	800978e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	2200      	movs	r2, #0
 800976e:	2180      	movs	r1, #128	; 0x80
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f000 f944 	bl	80099fe <UART_WaitOnFlagUntilTimeout>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800977c:	2303      	movs	r3, #3
 800977e:	e023      	b.n	80097c8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	1c5a      	adds	r2, r3, #1
 8009784:	60ba      	str	r2, [r7, #8]
 8009786:	781a      	ldrb	r2, [r3, #0]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009792:	b29b      	uxth	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1b7      	bne.n	8009708 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	2200      	movs	r2, #0
 80097a0:	2140      	movs	r1, #64	; 0x40
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f000 f92b 	bl	80099fe <UART_WaitOnFlagUntilTimeout>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d001      	beq.n	80097b2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e00a      	b.n	80097c8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2220      	movs	r2, #32
 80097b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	e000      	b.n	80097c8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80097c6:	2302      	movs	r3, #2
  }
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3718      	adds	r7, #24
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b088      	sub	sp, #32
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80097f0:	2300      	movs	r3, #0
 80097f2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80097f4:	2300      	movs	r3, #0
 80097f6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	f003 030f 	and.w	r3, r3, #15
 80097fe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d10d      	bne.n	8009822 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	f003 0320 	and.w	r3, r3, #32
 800980c:	2b00      	cmp	r3, #0
 800980e:	d008      	beq.n	8009822 <HAL_UART_IRQHandler+0x52>
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	f003 0320 	and.w	r3, r3, #32
 8009816:	2b00      	cmp	r3, #0
 8009818:	d003      	beq.n	8009822 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f9d7 	bl	8009bce <UART_Receive_IT>
      return;
 8009820:	e0cc      	b.n	80099bc <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	2b00      	cmp	r3, #0
 8009826:	f000 80ab 	beq.w	8009980 <HAL_UART_IRQHandler+0x1b0>
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	f003 0301 	and.w	r3, r3, #1
 8009830:	2b00      	cmp	r3, #0
 8009832:	d105      	bne.n	8009840 <HAL_UART_IRQHandler+0x70>
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800983a:	2b00      	cmp	r3, #0
 800983c:	f000 80a0 	beq.w	8009980 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00a      	beq.n	8009860 <HAL_UART_IRQHandler+0x90>
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009850:	2b00      	cmp	r3, #0
 8009852:	d005      	beq.n	8009860 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009858:	f043 0201 	orr.w	r2, r3, #1
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	f003 0304 	and.w	r3, r3, #4
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00a      	beq.n	8009880 <HAL_UART_IRQHandler+0xb0>
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	2b00      	cmp	r3, #0
 8009872:	d005      	beq.n	8009880 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009878:	f043 0202 	orr.w	r2, r3, #2
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	f003 0302 	and.w	r3, r3, #2
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00a      	beq.n	80098a0 <HAL_UART_IRQHandler+0xd0>
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	2b00      	cmp	r3, #0
 8009892:	d005      	beq.n	80098a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009898:	f043 0204 	orr.w	r2, r3, #4
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	f003 0308 	and.w	r3, r3, #8
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00a      	beq.n	80098c0 <HAL_UART_IRQHandler+0xf0>
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	f003 0301 	and.w	r3, r3, #1
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d005      	beq.n	80098c0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098b8:	f043 0208 	orr.w	r2, r3, #8
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d078      	beq.n	80099ba <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	f003 0320 	and.w	r3, r3, #32
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d007      	beq.n	80098e2 <HAL_UART_IRQHandler+0x112>
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	f003 0320 	and.w	r3, r3, #32
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d002      	beq.n	80098e2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 f976 	bl	8009bce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	695b      	ldr	r3, [r3, #20]
 80098e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	bf14      	ite	ne
 80098f0:	2301      	movne	r3, #1
 80098f2:	2300      	moveq	r3, #0
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098fc:	f003 0308 	and.w	r3, r3, #8
 8009900:	2b00      	cmp	r3, #0
 8009902:	d102      	bne.n	800990a <HAL_UART_IRQHandler+0x13a>
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d031      	beq.n	800996e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f8c1 	bl	8009a92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800991a:	2b00      	cmp	r3, #0
 800991c:	d023      	beq.n	8009966 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	695a      	ldr	r2, [r3, #20]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800992c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009932:	2b00      	cmp	r3, #0
 8009934:	d013      	beq.n	800995e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800993a:	4a22      	ldr	r2, [pc, #136]	; (80099c4 <HAL_UART_IRQHandler+0x1f4>)
 800993c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009942:	4618      	mov	r0, r3
 8009944:	f7fe fbe6 	bl	8008114 <HAL_DMA_Abort_IT>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d016      	beq.n	800997c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009958:	4610      	mov	r0, r2
 800995a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800995c:	e00e      	b.n	800997c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f844 	bl	80099ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009964:	e00a      	b.n	800997c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 f840 	bl	80099ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800996c:	e006      	b.n	800997c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f83c 	bl	80099ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800997a:	e01e      	b.n	80099ba <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800997c:	bf00      	nop
    return;
 800997e:	e01c      	b.n	80099ba <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009986:	2b00      	cmp	r3, #0
 8009988:	d008      	beq.n	800999c <HAL_UART_IRQHandler+0x1cc>
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009990:	2b00      	cmp	r3, #0
 8009992:	d003      	beq.n	800999c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 f8ad 	bl	8009af4 <UART_Transmit_IT>
    return;
 800999a:	e00f      	b.n	80099bc <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00a      	beq.n	80099bc <HAL_UART_IRQHandler+0x1ec>
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d005      	beq.n	80099bc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f8f4 	bl	8009b9e <UART_EndTransmit_IT>
    return;
 80099b6:	bf00      	nop
 80099b8:	e000      	b.n	80099bc <HAL_UART_IRQHandler+0x1ec>
    return;
 80099ba:	bf00      	nop
  }
}
 80099bc:	3720      	adds	r7, #32
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	08009acd 	.word	0x08009acd

080099c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bc80      	pop	{r7}
 80099d8:	4770      	bx	lr

080099da <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80099da:	b480      	push	{r7}
 80099dc:	b083      	sub	sp, #12
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80099e2:	bf00      	nop
 80099e4:	370c      	adds	r7, #12
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bc80      	pop	{r7}
 80099ea:	4770      	bx	lr

080099ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bc80      	pop	{r7}
 80099fc:	4770      	bx	lr

080099fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b084      	sub	sp, #16
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	60f8      	str	r0, [r7, #12]
 8009a06:	60b9      	str	r1, [r7, #8]
 8009a08:	603b      	str	r3, [r7, #0]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a0e:	e02c      	b.n	8009a6a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a16:	d028      	beq.n	8009a6a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d007      	beq.n	8009a2e <UART_WaitOnFlagUntilTimeout+0x30>
 8009a1e:	f7fe fa3f 	bl	8007ea0 <HAL_GetTick>
 8009a22:	4602      	mov	r2, r0
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	1ad3      	subs	r3, r2, r3
 8009a28:	69ba      	ldr	r2, [r7, #24]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d21d      	bcs.n	8009a6a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68da      	ldr	r2, [r3, #12]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a3c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	695a      	ldr	r2, [r3, #20]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f022 0201 	bic.w	r2, r2, #1
 8009a4c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2220      	movs	r2, #32
 8009a52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2220      	movs	r2, #32
 8009a5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009a66:	2303      	movs	r3, #3
 8009a68:	e00f      	b.n	8009a8a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	4013      	ands	r3, r2
 8009a74:	68ba      	ldr	r2, [r7, #8]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	bf0c      	ite	eq
 8009a7a:	2301      	moveq	r3, #1
 8009a7c:	2300      	movne	r3, #0
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	461a      	mov	r2, r3
 8009a82:	79fb      	ldrb	r3, [r7, #7]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d0c3      	beq.n	8009a10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a92:	b480      	push	{r7}
 8009a94:	b083      	sub	sp, #12
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68da      	ldr	r2, [r3, #12]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009aa8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	695a      	ldr	r2, [r3, #20]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f022 0201 	bic.w	r2, r2, #1
 8009ab8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2220      	movs	r2, #32
 8009abe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009ac2:	bf00      	nop
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bc80      	pop	{r7}
 8009aca:	4770      	bx	lr

08009acc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f7ff ff80 	bl	80099ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009aec:	bf00      	nop
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	2b21      	cmp	r3, #33	; 0x21
 8009b06:	d144      	bne.n	8009b92 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b10:	d11a      	bne.n	8009b48 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a1b      	ldr	r3, [r3, #32]
 8009b16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	881b      	ldrh	r3, [r3, #0]
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b26:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d105      	bne.n	8009b3c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a1b      	ldr	r3, [r3, #32]
 8009b34:	1c9a      	adds	r2, r3, #2
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	621a      	str	r2, [r3, #32]
 8009b3a:	e00e      	b.n	8009b5a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a1b      	ldr	r3, [r3, #32]
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	621a      	str	r2, [r3, #32]
 8009b46:	e008      	b.n	8009b5a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6a1b      	ldr	r3, [r3, #32]
 8009b4c:	1c59      	adds	r1, r3, #1
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	6211      	str	r1, [r2, #32]
 8009b52:	781a      	ldrb	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	3b01      	subs	r3, #1
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	4619      	mov	r1, r3
 8009b68:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d10f      	bne.n	8009b8e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	68da      	ldr	r2, [r3, #12]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68da      	ldr	r2, [r3, #12]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	e000      	b.n	8009b94 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009b92:	2302      	movs	r3, #2
  }
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3714      	adds	r7, #20
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bc80      	pop	{r7}
 8009b9c:	4770      	bx	lr

08009b9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b082      	sub	sp, #8
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68da      	ldr	r2, [r3, #12]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2220      	movs	r2, #32
 8009bba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7ff ff02 	bl	80099c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b084      	sub	sp, #16
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	2b22      	cmp	r3, #34	; 0x22
 8009be0:	d171      	bne.n	8009cc6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bea:	d123      	bne.n	8009c34 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10e      	bne.n	8009c18 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c10:	1c9a      	adds	r2, r3, #2
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	629a      	str	r2, [r3, #40]	; 0x28
 8009c16:	e029      	b.n	8009c6c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c2c:	1c5a      	adds	r2, r3, #1
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	629a      	str	r2, [r3, #40]	; 0x28
 8009c32:	e01b      	b.n	8009c6c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d10a      	bne.n	8009c52 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6858      	ldr	r0, [r3, #4]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c46:	1c59      	adds	r1, r3, #1
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	6291      	str	r1, [r2, #40]	; 0x28
 8009c4c:	b2c2      	uxtb	r2, r0
 8009c4e:	701a      	strb	r2, [r3, #0]
 8009c50:	e00c      	b.n	8009c6c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	b2da      	uxtb	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c5e:	1c58      	adds	r0, r3, #1
 8009c60:	6879      	ldr	r1, [r7, #4]
 8009c62:	6288      	str	r0, [r1, #40]	; 0x28
 8009c64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009c68:	b2d2      	uxtb	r2, r2
 8009c6a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	3b01      	subs	r3, #1
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	4619      	mov	r1, r3
 8009c7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d120      	bne.n	8009cc2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68da      	ldr	r2, [r3, #12]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f022 0220 	bic.w	r2, r2, #32
 8009c8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68da      	ldr	r2, [r3, #12]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	695a      	ldr	r2, [r3, #20]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f022 0201 	bic.w	r2, r2, #1
 8009cae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f7ff fe8e 	bl	80099da <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	e002      	b.n	8009cc8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	e000      	b.n	8009cc8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009cc6:	2302      	movs	r3, #2
  }
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3710      	adds	r7, #16
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68da      	ldr	r2, [r3, #12]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	430a      	orrs	r2, r1
 8009cec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	689a      	ldr	r2, [r3, #8]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	431a      	orrs	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	695b      	ldr	r3, [r3, #20]
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009d0a:	f023 030c 	bic.w	r3, r3, #12
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	6812      	ldr	r2, [r2, #0]
 8009d12:	68f9      	ldr	r1, [r7, #12]
 8009d14:	430b      	orrs	r3, r1
 8009d16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	695b      	ldr	r3, [r3, #20]
 8009d1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	699a      	ldr	r2, [r3, #24]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	430a      	orrs	r2, r1
 8009d2c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a52      	ldr	r2, [pc, #328]	; (8009e7c <UART_SetConfig+0x1ac>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d14e      	bne.n	8009dd6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009d38:	f7ff f89a 	bl	8008e70 <HAL_RCC_GetPCLK2Freq>
 8009d3c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	4613      	mov	r3, r2
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	4413      	add	r3, r2
 8009d46:	009a      	lsls	r2, r3, #2
 8009d48:	441a      	add	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d54:	4a4a      	ldr	r2, [pc, #296]	; (8009e80 <UART_SetConfig+0x1b0>)
 8009d56:	fba2 2303 	umull	r2, r3, r2, r3
 8009d5a:	095b      	lsrs	r3, r3, #5
 8009d5c:	0119      	lsls	r1, r3, #4
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	4613      	mov	r3, r2
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	4413      	add	r3, r2
 8009d66:	009a      	lsls	r2, r3, #2
 8009d68:	441a      	add	r2, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d74:	4b42      	ldr	r3, [pc, #264]	; (8009e80 <UART_SetConfig+0x1b0>)
 8009d76:	fba3 0302 	umull	r0, r3, r3, r2
 8009d7a:	095b      	lsrs	r3, r3, #5
 8009d7c:	2064      	movs	r0, #100	; 0x64
 8009d7e:	fb00 f303 	mul.w	r3, r0, r3
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	011b      	lsls	r3, r3, #4
 8009d86:	3332      	adds	r3, #50	; 0x32
 8009d88:	4a3d      	ldr	r2, [pc, #244]	; (8009e80 <UART_SetConfig+0x1b0>)
 8009d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d8e:	095b      	lsrs	r3, r3, #5
 8009d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d94:	4419      	add	r1, r3
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	4613      	mov	r3, r2
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4413      	add	r3, r2
 8009d9e:	009a      	lsls	r2, r3, #2
 8009da0:	441a      	add	r2, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	fbb2 f2f3 	udiv	r2, r2, r3
 8009dac:	4b34      	ldr	r3, [pc, #208]	; (8009e80 <UART_SetConfig+0x1b0>)
 8009dae:	fba3 0302 	umull	r0, r3, r3, r2
 8009db2:	095b      	lsrs	r3, r3, #5
 8009db4:	2064      	movs	r0, #100	; 0x64
 8009db6:	fb00 f303 	mul.w	r3, r0, r3
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	011b      	lsls	r3, r3, #4
 8009dbe:	3332      	adds	r3, #50	; 0x32
 8009dc0:	4a2f      	ldr	r2, [pc, #188]	; (8009e80 <UART_SetConfig+0x1b0>)
 8009dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc6:	095b      	lsrs	r3, r3, #5
 8009dc8:	f003 020f 	and.w	r2, r3, #15
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	440a      	add	r2, r1
 8009dd2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8009dd4:	e04d      	b.n	8009e72 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8009dd6:	f7ff f837 	bl	8008e48 <HAL_RCC_GetPCLK1Freq>
 8009dda:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	4613      	mov	r3, r2
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	4413      	add	r3, r2
 8009de4:	009a      	lsls	r2, r3, #2
 8009de6:	441a      	add	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009df2:	4a23      	ldr	r2, [pc, #140]	; (8009e80 <UART_SetConfig+0x1b0>)
 8009df4:	fba2 2303 	umull	r2, r3, r2, r3
 8009df8:	095b      	lsrs	r3, r3, #5
 8009dfa:	0119      	lsls	r1, r3, #4
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	4613      	mov	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	4413      	add	r3, r2
 8009e04:	009a      	lsls	r2, r3, #2
 8009e06:	441a      	add	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009e12:	4b1b      	ldr	r3, [pc, #108]	; (8009e80 <UART_SetConfig+0x1b0>)
 8009e14:	fba3 0302 	umull	r0, r3, r3, r2
 8009e18:	095b      	lsrs	r3, r3, #5
 8009e1a:	2064      	movs	r0, #100	; 0x64
 8009e1c:	fb00 f303 	mul.w	r3, r0, r3
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	011b      	lsls	r3, r3, #4
 8009e24:	3332      	adds	r3, #50	; 0x32
 8009e26:	4a16      	ldr	r2, [pc, #88]	; (8009e80 <UART_SetConfig+0x1b0>)
 8009e28:	fba2 2303 	umull	r2, r3, r2, r3
 8009e2c:	095b      	lsrs	r3, r3, #5
 8009e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e32:	4419      	add	r1, r3
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	4613      	mov	r3, r2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	009a      	lsls	r2, r3, #2
 8009e3e:	441a      	add	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	fbb2 f2f3 	udiv	r2, r2, r3
 8009e4a:	4b0d      	ldr	r3, [pc, #52]	; (8009e80 <UART_SetConfig+0x1b0>)
 8009e4c:	fba3 0302 	umull	r0, r3, r3, r2
 8009e50:	095b      	lsrs	r3, r3, #5
 8009e52:	2064      	movs	r0, #100	; 0x64
 8009e54:	fb00 f303 	mul.w	r3, r0, r3
 8009e58:	1ad3      	subs	r3, r2, r3
 8009e5a:	011b      	lsls	r3, r3, #4
 8009e5c:	3332      	adds	r3, #50	; 0x32
 8009e5e:	4a08      	ldr	r2, [pc, #32]	; (8009e80 <UART_SetConfig+0x1b0>)
 8009e60:	fba2 2303 	umull	r2, r3, r2, r3
 8009e64:	095b      	lsrs	r3, r3, #5
 8009e66:	f003 020f 	and.w	r2, r3, #15
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	440a      	add	r2, r1
 8009e70:	609a      	str	r2, [r3, #8]
}
 8009e72:	bf00      	nop
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	40013800 	.word	0x40013800
 8009e80:	51eb851f 	.word	0x51eb851f

08009e84 <__errno>:
 8009e84:	4b01      	ldr	r3, [pc, #4]	; (8009e8c <__errno+0x8>)
 8009e86:	6818      	ldr	r0, [r3, #0]
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	20000014 	.word	0x20000014

08009e90 <__libc_init_array>:
 8009e90:	b570      	push	{r4, r5, r6, lr}
 8009e92:	2500      	movs	r5, #0
 8009e94:	4e0c      	ldr	r6, [pc, #48]	; (8009ec8 <__libc_init_array+0x38>)
 8009e96:	4c0d      	ldr	r4, [pc, #52]	; (8009ecc <__libc_init_array+0x3c>)
 8009e98:	1ba4      	subs	r4, r4, r6
 8009e9a:	10a4      	asrs	r4, r4, #2
 8009e9c:	42a5      	cmp	r5, r4
 8009e9e:	d109      	bne.n	8009eb4 <__libc_init_array+0x24>
 8009ea0:	f001 f934 	bl	800b10c <_init>
 8009ea4:	2500      	movs	r5, #0
 8009ea6:	4e0a      	ldr	r6, [pc, #40]	; (8009ed0 <__libc_init_array+0x40>)
 8009ea8:	4c0a      	ldr	r4, [pc, #40]	; (8009ed4 <__libc_init_array+0x44>)
 8009eaa:	1ba4      	subs	r4, r4, r6
 8009eac:	10a4      	asrs	r4, r4, #2
 8009eae:	42a5      	cmp	r5, r4
 8009eb0:	d105      	bne.n	8009ebe <__libc_init_array+0x2e>
 8009eb2:	bd70      	pop	{r4, r5, r6, pc}
 8009eb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009eb8:	4798      	blx	r3
 8009eba:	3501      	adds	r5, #1
 8009ebc:	e7ee      	b.n	8009e9c <__libc_init_array+0xc>
 8009ebe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ec2:	4798      	blx	r3
 8009ec4:	3501      	adds	r5, #1
 8009ec6:	e7f2      	b.n	8009eae <__libc_init_array+0x1e>
 8009ec8:	0800caf4 	.word	0x0800caf4
 8009ecc:	0800caf4 	.word	0x0800caf4
 8009ed0:	0800caf4 	.word	0x0800caf4
 8009ed4:	0800caf8 	.word	0x0800caf8

08009ed8 <memset>:
 8009ed8:	4603      	mov	r3, r0
 8009eda:	4402      	add	r2, r0
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d100      	bne.n	8009ee2 <memset+0xa>
 8009ee0:	4770      	bx	lr
 8009ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ee6:	e7f9      	b.n	8009edc <memset+0x4>

08009ee8 <iprintf>:
 8009ee8:	b40f      	push	{r0, r1, r2, r3}
 8009eea:	4b0a      	ldr	r3, [pc, #40]	; (8009f14 <iprintf+0x2c>)
 8009eec:	b513      	push	{r0, r1, r4, lr}
 8009eee:	681c      	ldr	r4, [r3, #0]
 8009ef0:	b124      	cbz	r4, 8009efc <iprintf+0x14>
 8009ef2:	69a3      	ldr	r3, [r4, #24]
 8009ef4:	b913      	cbnz	r3, 8009efc <iprintf+0x14>
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f000 f8c6 	bl	800a088 <__sinit>
 8009efc:	ab05      	add	r3, sp, #20
 8009efe:	9a04      	ldr	r2, [sp, #16]
 8009f00:	68a1      	ldr	r1, [r4, #8]
 8009f02:	4620      	mov	r0, r4
 8009f04:	9301      	str	r3, [sp, #4]
 8009f06:	f000 fb71 	bl	800a5ec <_vfiprintf_r>
 8009f0a:	b002      	add	sp, #8
 8009f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f10:	b004      	add	sp, #16
 8009f12:	4770      	bx	lr
 8009f14:	20000014 	.word	0x20000014

08009f18 <srand>:
 8009f18:	b538      	push	{r3, r4, r5, lr}
 8009f1a:	4b0d      	ldr	r3, [pc, #52]	; (8009f50 <srand+0x38>)
 8009f1c:	4605      	mov	r5, r0
 8009f1e:	681c      	ldr	r4, [r3, #0]
 8009f20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f22:	b97b      	cbnz	r3, 8009f44 <srand+0x2c>
 8009f24:	2018      	movs	r0, #24
 8009f26:	f000 f939 	bl	800a19c <malloc>
 8009f2a:	4a0a      	ldr	r2, [pc, #40]	; (8009f54 <srand+0x3c>)
 8009f2c:	4b0a      	ldr	r3, [pc, #40]	; (8009f58 <srand+0x40>)
 8009f2e:	63a0      	str	r0, [r4, #56]	; 0x38
 8009f30:	e9c0 2300 	strd	r2, r3, [r0]
 8009f34:	4b09      	ldr	r3, [pc, #36]	; (8009f5c <srand+0x44>)
 8009f36:	2201      	movs	r2, #1
 8009f38:	6083      	str	r3, [r0, #8]
 8009f3a:	230b      	movs	r3, #11
 8009f3c:	8183      	strh	r3, [r0, #12]
 8009f3e:	2300      	movs	r3, #0
 8009f40:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009f44:	2200      	movs	r2, #0
 8009f46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f48:	611d      	str	r5, [r3, #16]
 8009f4a:	615a      	str	r2, [r3, #20]
 8009f4c:	bd38      	pop	{r3, r4, r5, pc}
 8009f4e:	bf00      	nop
 8009f50:	20000014 	.word	0x20000014
 8009f54:	abcd330e 	.word	0xabcd330e
 8009f58:	e66d1234 	.word	0xe66d1234
 8009f5c:	0005deec 	.word	0x0005deec

08009f60 <rand>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4b13      	ldr	r3, [pc, #76]	; (8009fb0 <rand+0x50>)
 8009f64:	681c      	ldr	r4, [r3, #0]
 8009f66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f68:	b97b      	cbnz	r3, 8009f8a <rand+0x2a>
 8009f6a:	2018      	movs	r0, #24
 8009f6c:	f000 f916 	bl	800a19c <malloc>
 8009f70:	4a10      	ldr	r2, [pc, #64]	; (8009fb4 <rand+0x54>)
 8009f72:	4b11      	ldr	r3, [pc, #68]	; (8009fb8 <rand+0x58>)
 8009f74:	63a0      	str	r0, [r4, #56]	; 0x38
 8009f76:	e9c0 2300 	strd	r2, r3, [r0]
 8009f7a:	4b10      	ldr	r3, [pc, #64]	; (8009fbc <rand+0x5c>)
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	6083      	str	r3, [r0, #8]
 8009f80:	230b      	movs	r3, #11
 8009f82:	8183      	strh	r3, [r0, #12]
 8009f84:	2300      	movs	r3, #0
 8009f86:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009f8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009f8c:	480c      	ldr	r0, [pc, #48]	; (8009fc0 <rand+0x60>)
 8009f8e:	690a      	ldr	r2, [r1, #16]
 8009f90:	694b      	ldr	r3, [r1, #20]
 8009f92:	4350      	muls	r0, r2
 8009f94:	4c0b      	ldr	r4, [pc, #44]	; (8009fc4 <rand+0x64>)
 8009f96:	fb04 0003 	mla	r0, r4, r3, r0
 8009f9a:	fba2 2304 	umull	r2, r3, r2, r4
 8009f9e:	4403      	add	r3, r0
 8009fa0:	1c54      	adds	r4, r2, #1
 8009fa2:	f143 0500 	adc.w	r5, r3, #0
 8009fa6:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8009faa:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8009fae:	bd38      	pop	{r3, r4, r5, pc}
 8009fb0:	20000014 	.word	0x20000014
 8009fb4:	abcd330e 	.word	0xabcd330e
 8009fb8:	e66d1234 	.word	0xe66d1234
 8009fbc:	0005deec 	.word	0x0005deec
 8009fc0:	5851f42d 	.word	0x5851f42d
 8009fc4:	4c957f2d 	.word	0x4c957f2d

08009fc8 <siprintf>:
 8009fc8:	b40e      	push	{r1, r2, r3}
 8009fca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009fce:	b500      	push	{lr}
 8009fd0:	b09c      	sub	sp, #112	; 0x70
 8009fd2:	ab1d      	add	r3, sp, #116	; 0x74
 8009fd4:	9002      	str	r0, [sp, #8]
 8009fd6:	9006      	str	r0, [sp, #24]
 8009fd8:	9107      	str	r1, [sp, #28]
 8009fda:	9104      	str	r1, [sp, #16]
 8009fdc:	4808      	ldr	r0, [pc, #32]	; (800a000 <siprintf+0x38>)
 8009fde:	4909      	ldr	r1, [pc, #36]	; (800a004 <siprintf+0x3c>)
 8009fe0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fe4:	9105      	str	r1, [sp, #20]
 8009fe6:	6800      	ldr	r0, [r0, #0]
 8009fe8:	a902      	add	r1, sp, #8
 8009fea:	9301      	str	r3, [sp, #4]
 8009fec:	f000 f9de 	bl	800a3ac <_svfiprintf_r>
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	9b02      	ldr	r3, [sp, #8]
 8009ff4:	701a      	strb	r2, [r3, #0]
 8009ff6:	b01c      	add	sp, #112	; 0x70
 8009ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ffc:	b003      	add	sp, #12
 8009ffe:	4770      	bx	lr
 800a000:	20000014 	.word	0x20000014
 800a004:	ffff0208 	.word	0xffff0208

0800a008 <std>:
 800a008:	2300      	movs	r3, #0
 800a00a:	b510      	push	{r4, lr}
 800a00c:	4604      	mov	r4, r0
 800a00e:	e9c0 3300 	strd	r3, r3, [r0]
 800a012:	6083      	str	r3, [r0, #8]
 800a014:	8181      	strh	r1, [r0, #12]
 800a016:	6643      	str	r3, [r0, #100]	; 0x64
 800a018:	81c2      	strh	r2, [r0, #14]
 800a01a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a01e:	6183      	str	r3, [r0, #24]
 800a020:	4619      	mov	r1, r3
 800a022:	2208      	movs	r2, #8
 800a024:	305c      	adds	r0, #92	; 0x5c
 800a026:	f7ff ff57 	bl	8009ed8 <memset>
 800a02a:	4b05      	ldr	r3, [pc, #20]	; (800a040 <std+0x38>)
 800a02c:	6224      	str	r4, [r4, #32]
 800a02e:	6263      	str	r3, [r4, #36]	; 0x24
 800a030:	4b04      	ldr	r3, [pc, #16]	; (800a044 <std+0x3c>)
 800a032:	62a3      	str	r3, [r4, #40]	; 0x28
 800a034:	4b04      	ldr	r3, [pc, #16]	; (800a048 <std+0x40>)
 800a036:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a038:	4b04      	ldr	r3, [pc, #16]	; (800a04c <std+0x44>)
 800a03a:	6323      	str	r3, [r4, #48]	; 0x30
 800a03c:	bd10      	pop	{r4, pc}
 800a03e:	bf00      	nop
 800a040:	0800ab49 	.word	0x0800ab49
 800a044:	0800ab6b 	.word	0x0800ab6b
 800a048:	0800aba3 	.word	0x0800aba3
 800a04c:	0800abc7 	.word	0x0800abc7

0800a050 <_cleanup_r>:
 800a050:	4901      	ldr	r1, [pc, #4]	; (800a058 <_cleanup_r+0x8>)
 800a052:	f000 b885 	b.w	800a160 <_fwalk_reent>
 800a056:	bf00      	nop
 800a058:	0800aea1 	.word	0x0800aea1

0800a05c <__sfmoreglue>:
 800a05c:	b570      	push	{r4, r5, r6, lr}
 800a05e:	2568      	movs	r5, #104	; 0x68
 800a060:	1e4a      	subs	r2, r1, #1
 800a062:	4355      	muls	r5, r2
 800a064:	460e      	mov	r6, r1
 800a066:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a06a:	f000 f8eb 	bl	800a244 <_malloc_r>
 800a06e:	4604      	mov	r4, r0
 800a070:	b140      	cbz	r0, 800a084 <__sfmoreglue+0x28>
 800a072:	2100      	movs	r1, #0
 800a074:	e9c0 1600 	strd	r1, r6, [r0]
 800a078:	300c      	adds	r0, #12
 800a07a:	60a0      	str	r0, [r4, #8]
 800a07c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a080:	f7ff ff2a 	bl	8009ed8 <memset>
 800a084:	4620      	mov	r0, r4
 800a086:	bd70      	pop	{r4, r5, r6, pc}

0800a088 <__sinit>:
 800a088:	6983      	ldr	r3, [r0, #24]
 800a08a:	b510      	push	{r4, lr}
 800a08c:	4604      	mov	r4, r0
 800a08e:	bb33      	cbnz	r3, 800a0de <__sinit+0x56>
 800a090:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a094:	6503      	str	r3, [r0, #80]	; 0x50
 800a096:	4b12      	ldr	r3, [pc, #72]	; (800a0e0 <__sinit+0x58>)
 800a098:	4a12      	ldr	r2, [pc, #72]	; (800a0e4 <__sinit+0x5c>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6282      	str	r2, [r0, #40]	; 0x28
 800a09e:	4298      	cmp	r0, r3
 800a0a0:	bf04      	itt	eq
 800a0a2:	2301      	moveq	r3, #1
 800a0a4:	6183      	streq	r3, [r0, #24]
 800a0a6:	f000 f81f 	bl	800a0e8 <__sfp>
 800a0aa:	6060      	str	r0, [r4, #4]
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f000 f81b 	bl	800a0e8 <__sfp>
 800a0b2:	60a0      	str	r0, [r4, #8]
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	f000 f817 	bl	800a0e8 <__sfp>
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	60e0      	str	r0, [r4, #12]
 800a0be:	2104      	movs	r1, #4
 800a0c0:	6860      	ldr	r0, [r4, #4]
 800a0c2:	f7ff ffa1 	bl	800a008 <std>
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	2109      	movs	r1, #9
 800a0ca:	68a0      	ldr	r0, [r4, #8]
 800a0cc:	f7ff ff9c 	bl	800a008 <std>
 800a0d0:	2202      	movs	r2, #2
 800a0d2:	2112      	movs	r1, #18
 800a0d4:	68e0      	ldr	r0, [r4, #12]
 800a0d6:	f7ff ff97 	bl	800a008 <std>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	61a3      	str	r3, [r4, #24]
 800a0de:	bd10      	pop	{r4, pc}
 800a0e0:	0800ca5c 	.word	0x0800ca5c
 800a0e4:	0800a051 	.word	0x0800a051

0800a0e8 <__sfp>:
 800a0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ea:	4b1b      	ldr	r3, [pc, #108]	; (800a158 <__sfp+0x70>)
 800a0ec:	4607      	mov	r7, r0
 800a0ee:	681e      	ldr	r6, [r3, #0]
 800a0f0:	69b3      	ldr	r3, [r6, #24]
 800a0f2:	b913      	cbnz	r3, 800a0fa <__sfp+0x12>
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	f7ff ffc7 	bl	800a088 <__sinit>
 800a0fa:	3648      	adds	r6, #72	; 0x48
 800a0fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a100:	3b01      	subs	r3, #1
 800a102:	d503      	bpl.n	800a10c <__sfp+0x24>
 800a104:	6833      	ldr	r3, [r6, #0]
 800a106:	b133      	cbz	r3, 800a116 <__sfp+0x2e>
 800a108:	6836      	ldr	r6, [r6, #0]
 800a10a:	e7f7      	b.n	800a0fc <__sfp+0x14>
 800a10c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a110:	b16d      	cbz	r5, 800a12e <__sfp+0x46>
 800a112:	3468      	adds	r4, #104	; 0x68
 800a114:	e7f4      	b.n	800a100 <__sfp+0x18>
 800a116:	2104      	movs	r1, #4
 800a118:	4638      	mov	r0, r7
 800a11a:	f7ff ff9f 	bl	800a05c <__sfmoreglue>
 800a11e:	6030      	str	r0, [r6, #0]
 800a120:	2800      	cmp	r0, #0
 800a122:	d1f1      	bne.n	800a108 <__sfp+0x20>
 800a124:	230c      	movs	r3, #12
 800a126:	4604      	mov	r4, r0
 800a128:	603b      	str	r3, [r7, #0]
 800a12a:	4620      	mov	r0, r4
 800a12c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a12e:	4b0b      	ldr	r3, [pc, #44]	; (800a15c <__sfp+0x74>)
 800a130:	6665      	str	r5, [r4, #100]	; 0x64
 800a132:	e9c4 5500 	strd	r5, r5, [r4]
 800a136:	60a5      	str	r5, [r4, #8]
 800a138:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a13c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a140:	2208      	movs	r2, #8
 800a142:	4629      	mov	r1, r5
 800a144:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a148:	f7ff fec6 	bl	8009ed8 <memset>
 800a14c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a150:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a154:	e7e9      	b.n	800a12a <__sfp+0x42>
 800a156:	bf00      	nop
 800a158:	0800ca5c 	.word	0x0800ca5c
 800a15c:	ffff0001 	.word	0xffff0001

0800a160 <_fwalk_reent>:
 800a160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a164:	4680      	mov	r8, r0
 800a166:	4689      	mov	r9, r1
 800a168:	2600      	movs	r6, #0
 800a16a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a16e:	b914      	cbnz	r4, 800a176 <_fwalk_reent+0x16>
 800a170:	4630      	mov	r0, r6
 800a172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a176:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a17a:	3f01      	subs	r7, #1
 800a17c:	d501      	bpl.n	800a182 <_fwalk_reent+0x22>
 800a17e:	6824      	ldr	r4, [r4, #0]
 800a180:	e7f5      	b.n	800a16e <_fwalk_reent+0xe>
 800a182:	89ab      	ldrh	r3, [r5, #12]
 800a184:	2b01      	cmp	r3, #1
 800a186:	d907      	bls.n	800a198 <_fwalk_reent+0x38>
 800a188:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a18c:	3301      	adds	r3, #1
 800a18e:	d003      	beq.n	800a198 <_fwalk_reent+0x38>
 800a190:	4629      	mov	r1, r5
 800a192:	4640      	mov	r0, r8
 800a194:	47c8      	blx	r9
 800a196:	4306      	orrs	r6, r0
 800a198:	3568      	adds	r5, #104	; 0x68
 800a19a:	e7ee      	b.n	800a17a <_fwalk_reent+0x1a>

0800a19c <malloc>:
 800a19c:	4b02      	ldr	r3, [pc, #8]	; (800a1a8 <malloc+0xc>)
 800a19e:	4601      	mov	r1, r0
 800a1a0:	6818      	ldr	r0, [r3, #0]
 800a1a2:	f000 b84f 	b.w	800a244 <_malloc_r>
 800a1a6:	bf00      	nop
 800a1a8:	20000014 	.word	0x20000014

0800a1ac <_free_r>:
 800a1ac:	b538      	push	{r3, r4, r5, lr}
 800a1ae:	4605      	mov	r5, r0
 800a1b0:	2900      	cmp	r1, #0
 800a1b2:	d043      	beq.n	800a23c <_free_r+0x90>
 800a1b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1b8:	1f0c      	subs	r4, r1, #4
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	bfb8      	it	lt
 800a1be:	18e4      	addlt	r4, r4, r3
 800a1c0:	f000 ff40 	bl	800b044 <__malloc_lock>
 800a1c4:	4a1e      	ldr	r2, [pc, #120]	; (800a240 <_free_r+0x94>)
 800a1c6:	6813      	ldr	r3, [r2, #0]
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	b933      	cbnz	r3, 800a1da <_free_r+0x2e>
 800a1cc:	6063      	str	r3, [r4, #4]
 800a1ce:	6014      	str	r4, [r2, #0]
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1d6:	f000 bf36 	b.w	800b046 <__malloc_unlock>
 800a1da:	42a3      	cmp	r3, r4
 800a1dc:	d90b      	bls.n	800a1f6 <_free_r+0x4a>
 800a1de:	6821      	ldr	r1, [r4, #0]
 800a1e0:	1862      	adds	r2, r4, r1
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	bf01      	itttt	eq
 800a1e6:	681a      	ldreq	r2, [r3, #0]
 800a1e8:	685b      	ldreq	r3, [r3, #4]
 800a1ea:	1852      	addeq	r2, r2, r1
 800a1ec:	6022      	streq	r2, [r4, #0]
 800a1ee:	6063      	str	r3, [r4, #4]
 800a1f0:	6004      	str	r4, [r0, #0]
 800a1f2:	e7ed      	b.n	800a1d0 <_free_r+0x24>
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	685a      	ldr	r2, [r3, #4]
 800a1f8:	b10a      	cbz	r2, 800a1fe <_free_r+0x52>
 800a1fa:	42a2      	cmp	r2, r4
 800a1fc:	d9fa      	bls.n	800a1f4 <_free_r+0x48>
 800a1fe:	6819      	ldr	r1, [r3, #0]
 800a200:	1858      	adds	r0, r3, r1
 800a202:	42a0      	cmp	r0, r4
 800a204:	d10b      	bne.n	800a21e <_free_r+0x72>
 800a206:	6820      	ldr	r0, [r4, #0]
 800a208:	4401      	add	r1, r0
 800a20a:	1858      	adds	r0, r3, r1
 800a20c:	4282      	cmp	r2, r0
 800a20e:	6019      	str	r1, [r3, #0]
 800a210:	d1de      	bne.n	800a1d0 <_free_r+0x24>
 800a212:	6810      	ldr	r0, [r2, #0]
 800a214:	6852      	ldr	r2, [r2, #4]
 800a216:	4401      	add	r1, r0
 800a218:	6019      	str	r1, [r3, #0]
 800a21a:	605a      	str	r2, [r3, #4]
 800a21c:	e7d8      	b.n	800a1d0 <_free_r+0x24>
 800a21e:	d902      	bls.n	800a226 <_free_r+0x7a>
 800a220:	230c      	movs	r3, #12
 800a222:	602b      	str	r3, [r5, #0]
 800a224:	e7d4      	b.n	800a1d0 <_free_r+0x24>
 800a226:	6820      	ldr	r0, [r4, #0]
 800a228:	1821      	adds	r1, r4, r0
 800a22a:	428a      	cmp	r2, r1
 800a22c:	bf01      	itttt	eq
 800a22e:	6811      	ldreq	r1, [r2, #0]
 800a230:	6852      	ldreq	r2, [r2, #4]
 800a232:	1809      	addeq	r1, r1, r0
 800a234:	6021      	streq	r1, [r4, #0]
 800a236:	6062      	str	r2, [r4, #4]
 800a238:	605c      	str	r4, [r3, #4]
 800a23a:	e7c9      	b.n	800a1d0 <_free_r+0x24>
 800a23c:	bd38      	pop	{r3, r4, r5, pc}
 800a23e:	bf00      	nop
 800a240:	200000a4 	.word	0x200000a4

0800a244 <_malloc_r>:
 800a244:	b570      	push	{r4, r5, r6, lr}
 800a246:	1ccd      	adds	r5, r1, #3
 800a248:	f025 0503 	bic.w	r5, r5, #3
 800a24c:	3508      	adds	r5, #8
 800a24e:	2d0c      	cmp	r5, #12
 800a250:	bf38      	it	cc
 800a252:	250c      	movcc	r5, #12
 800a254:	2d00      	cmp	r5, #0
 800a256:	4606      	mov	r6, r0
 800a258:	db01      	blt.n	800a25e <_malloc_r+0x1a>
 800a25a:	42a9      	cmp	r1, r5
 800a25c:	d903      	bls.n	800a266 <_malloc_r+0x22>
 800a25e:	230c      	movs	r3, #12
 800a260:	6033      	str	r3, [r6, #0]
 800a262:	2000      	movs	r0, #0
 800a264:	bd70      	pop	{r4, r5, r6, pc}
 800a266:	f000 feed 	bl	800b044 <__malloc_lock>
 800a26a:	4a21      	ldr	r2, [pc, #132]	; (800a2f0 <_malloc_r+0xac>)
 800a26c:	6814      	ldr	r4, [r2, #0]
 800a26e:	4621      	mov	r1, r4
 800a270:	b991      	cbnz	r1, 800a298 <_malloc_r+0x54>
 800a272:	4c20      	ldr	r4, [pc, #128]	; (800a2f4 <_malloc_r+0xb0>)
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	b91b      	cbnz	r3, 800a280 <_malloc_r+0x3c>
 800a278:	4630      	mov	r0, r6
 800a27a:	f000 fc55 	bl	800ab28 <_sbrk_r>
 800a27e:	6020      	str	r0, [r4, #0]
 800a280:	4629      	mov	r1, r5
 800a282:	4630      	mov	r0, r6
 800a284:	f000 fc50 	bl	800ab28 <_sbrk_r>
 800a288:	1c43      	adds	r3, r0, #1
 800a28a:	d124      	bne.n	800a2d6 <_malloc_r+0x92>
 800a28c:	230c      	movs	r3, #12
 800a28e:	4630      	mov	r0, r6
 800a290:	6033      	str	r3, [r6, #0]
 800a292:	f000 fed8 	bl	800b046 <__malloc_unlock>
 800a296:	e7e4      	b.n	800a262 <_malloc_r+0x1e>
 800a298:	680b      	ldr	r3, [r1, #0]
 800a29a:	1b5b      	subs	r3, r3, r5
 800a29c:	d418      	bmi.n	800a2d0 <_malloc_r+0x8c>
 800a29e:	2b0b      	cmp	r3, #11
 800a2a0:	d90f      	bls.n	800a2c2 <_malloc_r+0x7e>
 800a2a2:	600b      	str	r3, [r1, #0]
 800a2a4:	18cc      	adds	r4, r1, r3
 800a2a6:	50cd      	str	r5, [r1, r3]
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	f000 fecc 	bl	800b046 <__malloc_unlock>
 800a2ae:	f104 000b 	add.w	r0, r4, #11
 800a2b2:	1d23      	adds	r3, r4, #4
 800a2b4:	f020 0007 	bic.w	r0, r0, #7
 800a2b8:	1ac3      	subs	r3, r0, r3
 800a2ba:	d0d3      	beq.n	800a264 <_malloc_r+0x20>
 800a2bc:	425a      	negs	r2, r3
 800a2be:	50e2      	str	r2, [r4, r3]
 800a2c0:	e7d0      	b.n	800a264 <_malloc_r+0x20>
 800a2c2:	684b      	ldr	r3, [r1, #4]
 800a2c4:	428c      	cmp	r4, r1
 800a2c6:	bf16      	itet	ne
 800a2c8:	6063      	strne	r3, [r4, #4]
 800a2ca:	6013      	streq	r3, [r2, #0]
 800a2cc:	460c      	movne	r4, r1
 800a2ce:	e7eb      	b.n	800a2a8 <_malloc_r+0x64>
 800a2d0:	460c      	mov	r4, r1
 800a2d2:	6849      	ldr	r1, [r1, #4]
 800a2d4:	e7cc      	b.n	800a270 <_malloc_r+0x2c>
 800a2d6:	1cc4      	adds	r4, r0, #3
 800a2d8:	f024 0403 	bic.w	r4, r4, #3
 800a2dc:	42a0      	cmp	r0, r4
 800a2de:	d005      	beq.n	800a2ec <_malloc_r+0xa8>
 800a2e0:	1a21      	subs	r1, r4, r0
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	f000 fc20 	bl	800ab28 <_sbrk_r>
 800a2e8:	3001      	adds	r0, #1
 800a2ea:	d0cf      	beq.n	800a28c <_malloc_r+0x48>
 800a2ec:	6025      	str	r5, [r4, #0]
 800a2ee:	e7db      	b.n	800a2a8 <_malloc_r+0x64>
 800a2f0:	200000a4 	.word	0x200000a4
 800a2f4:	200000a8 	.word	0x200000a8

0800a2f8 <__ssputs_r>:
 800a2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2fc:	688e      	ldr	r6, [r1, #8]
 800a2fe:	4682      	mov	sl, r0
 800a300:	429e      	cmp	r6, r3
 800a302:	460c      	mov	r4, r1
 800a304:	4690      	mov	r8, r2
 800a306:	4699      	mov	r9, r3
 800a308:	d837      	bhi.n	800a37a <__ssputs_r+0x82>
 800a30a:	898a      	ldrh	r2, [r1, #12]
 800a30c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a310:	d031      	beq.n	800a376 <__ssputs_r+0x7e>
 800a312:	2302      	movs	r3, #2
 800a314:	6825      	ldr	r5, [r4, #0]
 800a316:	6909      	ldr	r1, [r1, #16]
 800a318:	1a6f      	subs	r7, r5, r1
 800a31a:	6965      	ldr	r5, [r4, #20]
 800a31c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a320:	fb95 f5f3 	sdiv	r5, r5, r3
 800a324:	f109 0301 	add.w	r3, r9, #1
 800a328:	443b      	add	r3, r7
 800a32a:	429d      	cmp	r5, r3
 800a32c:	bf38      	it	cc
 800a32e:	461d      	movcc	r5, r3
 800a330:	0553      	lsls	r3, r2, #21
 800a332:	d530      	bpl.n	800a396 <__ssputs_r+0x9e>
 800a334:	4629      	mov	r1, r5
 800a336:	f7ff ff85 	bl	800a244 <_malloc_r>
 800a33a:	4606      	mov	r6, r0
 800a33c:	b950      	cbnz	r0, 800a354 <__ssputs_r+0x5c>
 800a33e:	230c      	movs	r3, #12
 800a340:	f04f 30ff 	mov.w	r0, #4294967295
 800a344:	f8ca 3000 	str.w	r3, [sl]
 800a348:	89a3      	ldrh	r3, [r4, #12]
 800a34a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a34e:	81a3      	strh	r3, [r4, #12]
 800a350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a354:	463a      	mov	r2, r7
 800a356:	6921      	ldr	r1, [r4, #16]
 800a358:	f000 fe50 	bl	800affc <memcpy>
 800a35c:	89a3      	ldrh	r3, [r4, #12]
 800a35e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a366:	81a3      	strh	r3, [r4, #12]
 800a368:	6126      	str	r6, [r4, #16]
 800a36a:	443e      	add	r6, r7
 800a36c:	6026      	str	r6, [r4, #0]
 800a36e:	464e      	mov	r6, r9
 800a370:	6165      	str	r5, [r4, #20]
 800a372:	1bed      	subs	r5, r5, r7
 800a374:	60a5      	str	r5, [r4, #8]
 800a376:	454e      	cmp	r6, r9
 800a378:	d900      	bls.n	800a37c <__ssputs_r+0x84>
 800a37a:	464e      	mov	r6, r9
 800a37c:	4632      	mov	r2, r6
 800a37e:	4641      	mov	r1, r8
 800a380:	6820      	ldr	r0, [r4, #0]
 800a382:	f000 fe46 	bl	800b012 <memmove>
 800a386:	68a3      	ldr	r3, [r4, #8]
 800a388:	2000      	movs	r0, #0
 800a38a:	1b9b      	subs	r3, r3, r6
 800a38c:	60a3      	str	r3, [r4, #8]
 800a38e:	6823      	ldr	r3, [r4, #0]
 800a390:	441e      	add	r6, r3
 800a392:	6026      	str	r6, [r4, #0]
 800a394:	e7dc      	b.n	800a350 <__ssputs_r+0x58>
 800a396:	462a      	mov	r2, r5
 800a398:	f000 fe56 	bl	800b048 <_realloc_r>
 800a39c:	4606      	mov	r6, r0
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d1e2      	bne.n	800a368 <__ssputs_r+0x70>
 800a3a2:	6921      	ldr	r1, [r4, #16]
 800a3a4:	4650      	mov	r0, sl
 800a3a6:	f7ff ff01 	bl	800a1ac <_free_r>
 800a3aa:	e7c8      	b.n	800a33e <__ssputs_r+0x46>

0800a3ac <_svfiprintf_r>:
 800a3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b0:	461d      	mov	r5, r3
 800a3b2:	898b      	ldrh	r3, [r1, #12]
 800a3b4:	b09d      	sub	sp, #116	; 0x74
 800a3b6:	061f      	lsls	r7, r3, #24
 800a3b8:	4680      	mov	r8, r0
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	4616      	mov	r6, r2
 800a3be:	d50f      	bpl.n	800a3e0 <_svfiprintf_r+0x34>
 800a3c0:	690b      	ldr	r3, [r1, #16]
 800a3c2:	b96b      	cbnz	r3, 800a3e0 <_svfiprintf_r+0x34>
 800a3c4:	2140      	movs	r1, #64	; 0x40
 800a3c6:	f7ff ff3d 	bl	800a244 <_malloc_r>
 800a3ca:	6020      	str	r0, [r4, #0]
 800a3cc:	6120      	str	r0, [r4, #16]
 800a3ce:	b928      	cbnz	r0, 800a3dc <_svfiprintf_r+0x30>
 800a3d0:	230c      	movs	r3, #12
 800a3d2:	f8c8 3000 	str.w	r3, [r8]
 800a3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3da:	e0c8      	b.n	800a56e <_svfiprintf_r+0x1c2>
 800a3dc:	2340      	movs	r3, #64	; 0x40
 800a3de:	6163      	str	r3, [r4, #20]
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a3e4:	2320      	movs	r3, #32
 800a3e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3ea:	2330      	movs	r3, #48	; 0x30
 800a3ec:	f04f 0b01 	mov.w	fp, #1
 800a3f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3f4:	9503      	str	r5, [sp, #12]
 800a3f6:	4637      	mov	r7, r6
 800a3f8:	463d      	mov	r5, r7
 800a3fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a3fe:	b10b      	cbz	r3, 800a404 <_svfiprintf_r+0x58>
 800a400:	2b25      	cmp	r3, #37	; 0x25
 800a402:	d13e      	bne.n	800a482 <_svfiprintf_r+0xd6>
 800a404:	ebb7 0a06 	subs.w	sl, r7, r6
 800a408:	d00b      	beq.n	800a422 <_svfiprintf_r+0x76>
 800a40a:	4653      	mov	r3, sl
 800a40c:	4632      	mov	r2, r6
 800a40e:	4621      	mov	r1, r4
 800a410:	4640      	mov	r0, r8
 800a412:	f7ff ff71 	bl	800a2f8 <__ssputs_r>
 800a416:	3001      	adds	r0, #1
 800a418:	f000 80a4 	beq.w	800a564 <_svfiprintf_r+0x1b8>
 800a41c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a41e:	4453      	add	r3, sl
 800a420:	9309      	str	r3, [sp, #36]	; 0x24
 800a422:	783b      	ldrb	r3, [r7, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	f000 809d 	beq.w	800a564 <_svfiprintf_r+0x1b8>
 800a42a:	2300      	movs	r3, #0
 800a42c:	f04f 32ff 	mov.w	r2, #4294967295
 800a430:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a434:	9304      	str	r3, [sp, #16]
 800a436:	9307      	str	r3, [sp, #28]
 800a438:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a43c:	931a      	str	r3, [sp, #104]	; 0x68
 800a43e:	462f      	mov	r7, r5
 800a440:	2205      	movs	r2, #5
 800a442:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a446:	4850      	ldr	r0, [pc, #320]	; (800a588 <_svfiprintf_r+0x1dc>)
 800a448:	f000 fdca 	bl	800afe0 <memchr>
 800a44c:	9b04      	ldr	r3, [sp, #16]
 800a44e:	b9d0      	cbnz	r0, 800a486 <_svfiprintf_r+0xda>
 800a450:	06d9      	lsls	r1, r3, #27
 800a452:	bf44      	itt	mi
 800a454:	2220      	movmi	r2, #32
 800a456:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a45a:	071a      	lsls	r2, r3, #28
 800a45c:	bf44      	itt	mi
 800a45e:	222b      	movmi	r2, #43	; 0x2b
 800a460:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a464:	782a      	ldrb	r2, [r5, #0]
 800a466:	2a2a      	cmp	r2, #42	; 0x2a
 800a468:	d015      	beq.n	800a496 <_svfiprintf_r+0xea>
 800a46a:	462f      	mov	r7, r5
 800a46c:	2000      	movs	r0, #0
 800a46e:	250a      	movs	r5, #10
 800a470:	9a07      	ldr	r2, [sp, #28]
 800a472:	4639      	mov	r1, r7
 800a474:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a478:	3b30      	subs	r3, #48	; 0x30
 800a47a:	2b09      	cmp	r3, #9
 800a47c:	d94d      	bls.n	800a51a <_svfiprintf_r+0x16e>
 800a47e:	b1b8      	cbz	r0, 800a4b0 <_svfiprintf_r+0x104>
 800a480:	e00f      	b.n	800a4a2 <_svfiprintf_r+0xf6>
 800a482:	462f      	mov	r7, r5
 800a484:	e7b8      	b.n	800a3f8 <_svfiprintf_r+0x4c>
 800a486:	4a40      	ldr	r2, [pc, #256]	; (800a588 <_svfiprintf_r+0x1dc>)
 800a488:	463d      	mov	r5, r7
 800a48a:	1a80      	subs	r0, r0, r2
 800a48c:	fa0b f000 	lsl.w	r0, fp, r0
 800a490:	4318      	orrs	r0, r3
 800a492:	9004      	str	r0, [sp, #16]
 800a494:	e7d3      	b.n	800a43e <_svfiprintf_r+0x92>
 800a496:	9a03      	ldr	r2, [sp, #12]
 800a498:	1d11      	adds	r1, r2, #4
 800a49a:	6812      	ldr	r2, [r2, #0]
 800a49c:	9103      	str	r1, [sp, #12]
 800a49e:	2a00      	cmp	r2, #0
 800a4a0:	db01      	blt.n	800a4a6 <_svfiprintf_r+0xfa>
 800a4a2:	9207      	str	r2, [sp, #28]
 800a4a4:	e004      	b.n	800a4b0 <_svfiprintf_r+0x104>
 800a4a6:	4252      	negs	r2, r2
 800a4a8:	f043 0302 	orr.w	r3, r3, #2
 800a4ac:	9207      	str	r2, [sp, #28]
 800a4ae:	9304      	str	r3, [sp, #16]
 800a4b0:	783b      	ldrb	r3, [r7, #0]
 800a4b2:	2b2e      	cmp	r3, #46	; 0x2e
 800a4b4:	d10c      	bne.n	800a4d0 <_svfiprintf_r+0x124>
 800a4b6:	787b      	ldrb	r3, [r7, #1]
 800a4b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a4ba:	d133      	bne.n	800a524 <_svfiprintf_r+0x178>
 800a4bc:	9b03      	ldr	r3, [sp, #12]
 800a4be:	3702      	adds	r7, #2
 800a4c0:	1d1a      	adds	r2, r3, #4
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	9203      	str	r2, [sp, #12]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	bfb8      	it	lt
 800a4ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4ce:	9305      	str	r3, [sp, #20]
 800a4d0:	4d2e      	ldr	r5, [pc, #184]	; (800a58c <_svfiprintf_r+0x1e0>)
 800a4d2:	2203      	movs	r2, #3
 800a4d4:	7839      	ldrb	r1, [r7, #0]
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	f000 fd82 	bl	800afe0 <memchr>
 800a4dc:	b138      	cbz	r0, 800a4ee <_svfiprintf_r+0x142>
 800a4de:	2340      	movs	r3, #64	; 0x40
 800a4e0:	1b40      	subs	r0, r0, r5
 800a4e2:	fa03 f000 	lsl.w	r0, r3, r0
 800a4e6:	9b04      	ldr	r3, [sp, #16]
 800a4e8:	3701      	adds	r7, #1
 800a4ea:	4303      	orrs	r3, r0
 800a4ec:	9304      	str	r3, [sp, #16]
 800a4ee:	7839      	ldrb	r1, [r7, #0]
 800a4f0:	2206      	movs	r2, #6
 800a4f2:	4827      	ldr	r0, [pc, #156]	; (800a590 <_svfiprintf_r+0x1e4>)
 800a4f4:	1c7e      	adds	r6, r7, #1
 800a4f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4fa:	f000 fd71 	bl	800afe0 <memchr>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d038      	beq.n	800a574 <_svfiprintf_r+0x1c8>
 800a502:	4b24      	ldr	r3, [pc, #144]	; (800a594 <_svfiprintf_r+0x1e8>)
 800a504:	bb13      	cbnz	r3, 800a54c <_svfiprintf_r+0x1a0>
 800a506:	9b03      	ldr	r3, [sp, #12]
 800a508:	3307      	adds	r3, #7
 800a50a:	f023 0307 	bic.w	r3, r3, #7
 800a50e:	3308      	adds	r3, #8
 800a510:	9303      	str	r3, [sp, #12]
 800a512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a514:	444b      	add	r3, r9
 800a516:	9309      	str	r3, [sp, #36]	; 0x24
 800a518:	e76d      	b.n	800a3f6 <_svfiprintf_r+0x4a>
 800a51a:	fb05 3202 	mla	r2, r5, r2, r3
 800a51e:	2001      	movs	r0, #1
 800a520:	460f      	mov	r7, r1
 800a522:	e7a6      	b.n	800a472 <_svfiprintf_r+0xc6>
 800a524:	2300      	movs	r3, #0
 800a526:	250a      	movs	r5, #10
 800a528:	4619      	mov	r1, r3
 800a52a:	3701      	adds	r7, #1
 800a52c:	9305      	str	r3, [sp, #20]
 800a52e:	4638      	mov	r0, r7
 800a530:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a534:	3a30      	subs	r2, #48	; 0x30
 800a536:	2a09      	cmp	r2, #9
 800a538:	d903      	bls.n	800a542 <_svfiprintf_r+0x196>
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d0c8      	beq.n	800a4d0 <_svfiprintf_r+0x124>
 800a53e:	9105      	str	r1, [sp, #20]
 800a540:	e7c6      	b.n	800a4d0 <_svfiprintf_r+0x124>
 800a542:	fb05 2101 	mla	r1, r5, r1, r2
 800a546:	2301      	movs	r3, #1
 800a548:	4607      	mov	r7, r0
 800a54a:	e7f0      	b.n	800a52e <_svfiprintf_r+0x182>
 800a54c:	ab03      	add	r3, sp, #12
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	4622      	mov	r2, r4
 800a552:	4b11      	ldr	r3, [pc, #68]	; (800a598 <_svfiprintf_r+0x1ec>)
 800a554:	a904      	add	r1, sp, #16
 800a556:	4640      	mov	r0, r8
 800a558:	f3af 8000 	nop.w
 800a55c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a560:	4681      	mov	r9, r0
 800a562:	d1d6      	bne.n	800a512 <_svfiprintf_r+0x166>
 800a564:	89a3      	ldrh	r3, [r4, #12]
 800a566:	065b      	lsls	r3, r3, #25
 800a568:	f53f af35 	bmi.w	800a3d6 <_svfiprintf_r+0x2a>
 800a56c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a56e:	b01d      	add	sp, #116	; 0x74
 800a570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a574:	ab03      	add	r3, sp, #12
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	4622      	mov	r2, r4
 800a57a:	4b07      	ldr	r3, [pc, #28]	; (800a598 <_svfiprintf_r+0x1ec>)
 800a57c:	a904      	add	r1, sp, #16
 800a57e:	4640      	mov	r0, r8
 800a580:	f000 f9c0 	bl	800a904 <_printf_i>
 800a584:	e7ea      	b.n	800a55c <_svfiprintf_r+0x1b0>
 800a586:	bf00      	nop
 800a588:	0800cac0 	.word	0x0800cac0
 800a58c:	0800cac6 	.word	0x0800cac6
 800a590:	0800caca 	.word	0x0800caca
 800a594:	00000000 	.word	0x00000000
 800a598:	0800a2f9 	.word	0x0800a2f9

0800a59c <__sfputc_r>:
 800a59c:	6893      	ldr	r3, [r2, #8]
 800a59e:	b410      	push	{r4}
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	6093      	str	r3, [r2, #8]
 800a5a6:	da07      	bge.n	800a5b8 <__sfputc_r+0x1c>
 800a5a8:	6994      	ldr	r4, [r2, #24]
 800a5aa:	42a3      	cmp	r3, r4
 800a5ac:	db01      	blt.n	800a5b2 <__sfputc_r+0x16>
 800a5ae:	290a      	cmp	r1, #10
 800a5b0:	d102      	bne.n	800a5b8 <__sfputc_r+0x1c>
 800a5b2:	bc10      	pop	{r4}
 800a5b4:	f000 bb0c 	b.w	800abd0 <__swbuf_r>
 800a5b8:	6813      	ldr	r3, [r2, #0]
 800a5ba:	1c58      	adds	r0, r3, #1
 800a5bc:	6010      	str	r0, [r2, #0]
 800a5be:	7019      	strb	r1, [r3, #0]
 800a5c0:	4608      	mov	r0, r1
 800a5c2:	bc10      	pop	{r4}
 800a5c4:	4770      	bx	lr

0800a5c6 <__sfputs_r>:
 800a5c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c8:	4606      	mov	r6, r0
 800a5ca:	460f      	mov	r7, r1
 800a5cc:	4614      	mov	r4, r2
 800a5ce:	18d5      	adds	r5, r2, r3
 800a5d0:	42ac      	cmp	r4, r5
 800a5d2:	d101      	bne.n	800a5d8 <__sfputs_r+0x12>
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	e007      	b.n	800a5e8 <__sfputs_r+0x22>
 800a5d8:	463a      	mov	r2, r7
 800a5da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5de:	4630      	mov	r0, r6
 800a5e0:	f7ff ffdc 	bl	800a59c <__sfputc_r>
 800a5e4:	1c43      	adds	r3, r0, #1
 800a5e6:	d1f3      	bne.n	800a5d0 <__sfputs_r+0xa>
 800a5e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5ec <_vfiprintf_r>:
 800a5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f0:	460c      	mov	r4, r1
 800a5f2:	b09d      	sub	sp, #116	; 0x74
 800a5f4:	4617      	mov	r7, r2
 800a5f6:	461d      	mov	r5, r3
 800a5f8:	4606      	mov	r6, r0
 800a5fa:	b118      	cbz	r0, 800a604 <_vfiprintf_r+0x18>
 800a5fc:	6983      	ldr	r3, [r0, #24]
 800a5fe:	b90b      	cbnz	r3, 800a604 <_vfiprintf_r+0x18>
 800a600:	f7ff fd42 	bl	800a088 <__sinit>
 800a604:	4b7c      	ldr	r3, [pc, #496]	; (800a7f8 <_vfiprintf_r+0x20c>)
 800a606:	429c      	cmp	r4, r3
 800a608:	d158      	bne.n	800a6bc <_vfiprintf_r+0xd0>
 800a60a:	6874      	ldr	r4, [r6, #4]
 800a60c:	89a3      	ldrh	r3, [r4, #12]
 800a60e:	0718      	lsls	r0, r3, #28
 800a610:	d55e      	bpl.n	800a6d0 <_vfiprintf_r+0xe4>
 800a612:	6923      	ldr	r3, [r4, #16]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d05b      	beq.n	800a6d0 <_vfiprintf_r+0xe4>
 800a618:	2300      	movs	r3, #0
 800a61a:	9309      	str	r3, [sp, #36]	; 0x24
 800a61c:	2320      	movs	r3, #32
 800a61e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a622:	2330      	movs	r3, #48	; 0x30
 800a624:	f04f 0b01 	mov.w	fp, #1
 800a628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a62c:	9503      	str	r5, [sp, #12]
 800a62e:	46b8      	mov	r8, r7
 800a630:	4645      	mov	r5, r8
 800a632:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a636:	b10b      	cbz	r3, 800a63c <_vfiprintf_r+0x50>
 800a638:	2b25      	cmp	r3, #37	; 0x25
 800a63a:	d154      	bne.n	800a6e6 <_vfiprintf_r+0xfa>
 800a63c:	ebb8 0a07 	subs.w	sl, r8, r7
 800a640:	d00b      	beq.n	800a65a <_vfiprintf_r+0x6e>
 800a642:	4653      	mov	r3, sl
 800a644:	463a      	mov	r2, r7
 800a646:	4621      	mov	r1, r4
 800a648:	4630      	mov	r0, r6
 800a64a:	f7ff ffbc 	bl	800a5c6 <__sfputs_r>
 800a64e:	3001      	adds	r0, #1
 800a650:	f000 80c2 	beq.w	800a7d8 <_vfiprintf_r+0x1ec>
 800a654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a656:	4453      	add	r3, sl
 800a658:	9309      	str	r3, [sp, #36]	; 0x24
 800a65a:	f898 3000 	ldrb.w	r3, [r8]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f000 80ba 	beq.w	800a7d8 <_vfiprintf_r+0x1ec>
 800a664:	2300      	movs	r3, #0
 800a666:	f04f 32ff 	mov.w	r2, #4294967295
 800a66a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a66e:	9304      	str	r3, [sp, #16]
 800a670:	9307      	str	r3, [sp, #28]
 800a672:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a676:	931a      	str	r3, [sp, #104]	; 0x68
 800a678:	46a8      	mov	r8, r5
 800a67a:	2205      	movs	r2, #5
 800a67c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a680:	485e      	ldr	r0, [pc, #376]	; (800a7fc <_vfiprintf_r+0x210>)
 800a682:	f000 fcad 	bl	800afe0 <memchr>
 800a686:	9b04      	ldr	r3, [sp, #16]
 800a688:	bb78      	cbnz	r0, 800a6ea <_vfiprintf_r+0xfe>
 800a68a:	06d9      	lsls	r1, r3, #27
 800a68c:	bf44      	itt	mi
 800a68e:	2220      	movmi	r2, #32
 800a690:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a694:	071a      	lsls	r2, r3, #28
 800a696:	bf44      	itt	mi
 800a698:	222b      	movmi	r2, #43	; 0x2b
 800a69a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a69e:	782a      	ldrb	r2, [r5, #0]
 800a6a0:	2a2a      	cmp	r2, #42	; 0x2a
 800a6a2:	d02a      	beq.n	800a6fa <_vfiprintf_r+0x10e>
 800a6a4:	46a8      	mov	r8, r5
 800a6a6:	2000      	movs	r0, #0
 800a6a8:	250a      	movs	r5, #10
 800a6aa:	9a07      	ldr	r2, [sp, #28]
 800a6ac:	4641      	mov	r1, r8
 800a6ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6b2:	3b30      	subs	r3, #48	; 0x30
 800a6b4:	2b09      	cmp	r3, #9
 800a6b6:	d969      	bls.n	800a78c <_vfiprintf_r+0x1a0>
 800a6b8:	b360      	cbz	r0, 800a714 <_vfiprintf_r+0x128>
 800a6ba:	e024      	b.n	800a706 <_vfiprintf_r+0x11a>
 800a6bc:	4b50      	ldr	r3, [pc, #320]	; (800a800 <_vfiprintf_r+0x214>)
 800a6be:	429c      	cmp	r4, r3
 800a6c0:	d101      	bne.n	800a6c6 <_vfiprintf_r+0xda>
 800a6c2:	68b4      	ldr	r4, [r6, #8]
 800a6c4:	e7a2      	b.n	800a60c <_vfiprintf_r+0x20>
 800a6c6:	4b4f      	ldr	r3, [pc, #316]	; (800a804 <_vfiprintf_r+0x218>)
 800a6c8:	429c      	cmp	r4, r3
 800a6ca:	bf08      	it	eq
 800a6cc:	68f4      	ldreq	r4, [r6, #12]
 800a6ce:	e79d      	b.n	800a60c <_vfiprintf_r+0x20>
 800a6d0:	4621      	mov	r1, r4
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	f000 fae0 	bl	800ac98 <__swsetup_r>
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	d09d      	beq.n	800a618 <_vfiprintf_r+0x2c>
 800a6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e0:	b01d      	add	sp, #116	; 0x74
 800a6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e6:	46a8      	mov	r8, r5
 800a6e8:	e7a2      	b.n	800a630 <_vfiprintf_r+0x44>
 800a6ea:	4a44      	ldr	r2, [pc, #272]	; (800a7fc <_vfiprintf_r+0x210>)
 800a6ec:	4645      	mov	r5, r8
 800a6ee:	1a80      	subs	r0, r0, r2
 800a6f0:	fa0b f000 	lsl.w	r0, fp, r0
 800a6f4:	4318      	orrs	r0, r3
 800a6f6:	9004      	str	r0, [sp, #16]
 800a6f8:	e7be      	b.n	800a678 <_vfiprintf_r+0x8c>
 800a6fa:	9a03      	ldr	r2, [sp, #12]
 800a6fc:	1d11      	adds	r1, r2, #4
 800a6fe:	6812      	ldr	r2, [r2, #0]
 800a700:	9103      	str	r1, [sp, #12]
 800a702:	2a00      	cmp	r2, #0
 800a704:	db01      	blt.n	800a70a <_vfiprintf_r+0x11e>
 800a706:	9207      	str	r2, [sp, #28]
 800a708:	e004      	b.n	800a714 <_vfiprintf_r+0x128>
 800a70a:	4252      	negs	r2, r2
 800a70c:	f043 0302 	orr.w	r3, r3, #2
 800a710:	9207      	str	r2, [sp, #28]
 800a712:	9304      	str	r3, [sp, #16]
 800a714:	f898 3000 	ldrb.w	r3, [r8]
 800a718:	2b2e      	cmp	r3, #46	; 0x2e
 800a71a:	d10e      	bne.n	800a73a <_vfiprintf_r+0x14e>
 800a71c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a720:	2b2a      	cmp	r3, #42	; 0x2a
 800a722:	d138      	bne.n	800a796 <_vfiprintf_r+0x1aa>
 800a724:	9b03      	ldr	r3, [sp, #12]
 800a726:	f108 0802 	add.w	r8, r8, #2
 800a72a:	1d1a      	adds	r2, r3, #4
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	9203      	str	r2, [sp, #12]
 800a730:	2b00      	cmp	r3, #0
 800a732:	bfb8      	it	lt
 800a734:	f04f 33ff 	movlt.w	r3, #4294967295
 800a738:	9305      	str	r3, [sp, #20]
 800a73a:	4d33      	ldr	r5, [pc, #204]	; (800a808 <_vfiprintf_r+0x21c>)
 800a73c:	2203      	movs	r2, #3
 800a73e:	f898 1000 	ldrb.w	r1, [r8]
 800a742:	4628      	mov	r0, r5
 800a744:	f000 fc4c 	bl	800afe0 <memchr>
 800a748:	b140      	cbz	r0, 800a75c <_vfiprintf_r+0x170>
 800a74a:	2340      	movs	r3, #64	; 0x40
 800a74c:	1b40      	subs	r0, r0, r5
 800a74e:	fa03 f000 	lsl.w	r0, r3, r0
 800a752:	9b04      	ldr	r3, [sp, #16]
 800a754:	f108 0801 	add.w	r8, r8, #1
 800a758:	4303      	orrs	r3, r0
 800a75a:	9304      	str	r3, [sp, #16]
 800a75c:	f898 1000 	ldrb.w	r1, [r8]
 800a760:	2206      	movs	r2, #6
 800a762:	482a      	ldr	r0, [pc, #168]	; (800a80c <_vfiprintf_r+0x220>)
 800a764:	f108 0701 	add.w	r7, r8, #1
 800a768:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a76c:	f000 fc38 	bl	800afe0 <memchr>
 800a770:	2800      	cmp	r0, #0
 800a772:	d037      	beq.n	800a7e4 <_vfiprintf_r+0x1f8>
 800a774:	4b26      	ldr	r3, [pc, #152]	; (800a810 <_vfiprintf_r+0x224>)
 800a776:	bb1b      	cbnz	r3, 800a7c0 <_vfiprintf_r+0x1d4>
 800a778:	9b03      	ldr	r3, [sp, #12]
 800a77a:	3307      	adds	r3, #7
 800a77c:	f023 0307 	bic.w	r3, r3, #7
 800a780:	3308      	adds	r3, #8
 800a782:	9303      	str	r3, [sp, #12]
 800a784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a786:	444b      	add	r3, r9
 800a788:	9309      	str	r3, [sp, #36]	; 0x24
 800a78a:	e750      	b.n	800a62e <_vfiprintf_r+0x42>
 800a78c:	fb05 3202 	mla	r2, r5, r2, r3
 800a790:	2001      	movs	r0, #1
 800a792:	4688      	mov	r8, r1
 800a794:	e78a      	b.n	800a6ac <_vfiprintf_r+0xc0>
 800a796:	2300      	movs	r3, #0
 800a798:	250a      	movs	r5, #10
 800a79a:	4619      	mov	r1, r3
 800a79c:	f108 0801 	add.w	r8, r8, #1
 800a7a0:	9305      	str	r3, [sp, #20]
 800a7a2:	4640      	mov	r0, r8
 800a7a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7a8:	3a30      	subs	r2, #48	; 0x30
 800a7aa:	2a09      	cmp	r2, #9
 800a7ac:	d903      	bls.n	800a7b6 <_vfiprintf_r+0x1ca>
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d0c3      	beq.n	800a73a <_vfiprintf_r+0x14e>
 800a7b2:	9105      	str	r1, [sp, #20]
 800a7b4:	e7c1      	b.n	800a73a <_vfiprintf_r+0x14e>
 800a7b6:	fb05 2101 	mla	r1, r5, r1, r2
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	4680      	mov	r8, r0
 800a7be:	e7f0      	b.n	800a7a2 <_vfiprintf_r+0x1b6>
 800a7c0:	ab03      	add	r3, sp, #12
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	4622      	mov	r2, r4
 800a7c6:	4b13      	ldr	r3, [pc, #76]	; (800a814 <_vfiprintf_r+0x228>)
 800a7c8:	a904      	add	r1, sp, #16
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	f3af 8000 	nop.w
 800a7d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a7d4:	4681      	mov	r9, r0
 800a7d6:	d1d5      	bne.n	800a784 <_vfiprintf_r+0x198>
 800a7d8:	89a3      	ldrh	r3, [r4, #12]
 800a7da:	065b      	lsls	r3, r3, #25
 800a7dc:	f53f af7e 	bmi.w	800a6dc <_vfiprintf_r+0xf0>
 800a7e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7e2:	e77d      	b.n	800a6e0 <_vfiprintf_r+0xf4>
 800a7e4:	ab03      	add	r3, sp, #12
 800a7e6:	9300      	str	r3, [sp, #0]
 800a7e8:	4622      	mov	r2, r4
 800a7ea:	4b0a      	ldr	r3, [pc, #40]	; (800a814 <_vfiprintf_r+0x228>)
 800a7ec:	a904      	add	r1, sp, #16
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	f000 f888 	bl	800a904 <_printf_i>
 800a7f4:	e7ec      	b.n	800a7d0 <_vfiprintf_r+0x1e4>
 800a7f6:	bf00      	nop
 800a7f8:	0800ca80 	.word	0x0800ca80
 800a7fc:	0800cac0 	.word	0x0800cac0
 800a800:	0800caa0 	.word	0x0800caa0
 800a804:	0800ca60 	.word	0x0800ca60
 800a808:	0800cac6 	.word	0x0800cac6
 800a80c:	0800caca 	.word	0x0800caca
 800a810:	00000000 	.word	0x00000000
 800a814:	0800a5c7 	.word	0x0800a5c7

0800a818 <_printf_common>:
 800a818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a81c:	4691      	mov	r9, r2
 800a81e:	461f      	mov	r7, r3
 800a820:	688a      	ldr	r2, [r1, #8]
 800a822:	690b      	ldr	r3, [r1, #16]
 800a824:	4606      	mov	r6, r0
 800a826:	4293      	cmp	r3, r2
 800a828:	bfb8      	it	lt
 800a82a:	4613      	movlt	r3, r2
 800a82c:	f8c9 3000 	str.w	r3, [r9]
 800a830:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a834:	460c      	mov	r4, r1
 800a836:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a83a:	b112      	cbz	r2, 800a842 <_printf_common+0x2a>
 800a83c:	3301      	adds	r3, #1
 800a83e:	f8c9 3000 	str.w	r3, [r9]
 800a842:	6823      	ldr	r3, [r4, #0]
 800a844:	0699      	lsls	r1, r3, #26
 800a846:	bf42      	ittt	mi
 800a848:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a84c:	3302      	addmi	r3, #2
 800a84e:	f8c9 3000 	strmi.w	r3, [r9]
 800a852:	6825      	ldr	r5, [r4, #0]
 800a854:	f015 0506 	ands.w	r5, r5, #6
 800a858:	d107      	bne.n	800a86a <_printf_common+0x52>
 800a85a:	f104 0a19 	add.w	sl, r4, #25
 800a85e:	68e3      	ldr	r3, [r4, #12]
 800a860:	f8d9 2000 	ldr.w	r2, [r9]
 800a864:	1a9b      	subs	r3, r3, r2
 800a866:	42ab      	cmp	r3, r5
 800a868:	dc29      	bgt.n	800a8be <_printf_common+0xa6>
 800a86a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a86e:	6822      	ldr	r2, [r4, #0]
 800a870:	3300      	adds	r3, #0
 800a872:	bf18      	it	ne
 800a874:	2301      	movne	r3, #1
 800a876:	0692      	lsls	r2, r2, #26
 800a878:	d42e      	bmi.n	800a8d8 <_printf_common+0xc0>
 800a87a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a87e:	4639      	mov	r1, r7
 800a880:	4630      	mov	r0, r6
 800a882:	47c0      	blx	r8
 800a884:	3001      	adds	r0, #1
 800a886:	d021      	beq.n	800a8cc <_printf_common+0xb4>
 800a888:	6823      	ldr	r3, [r4, #0]
 800a88a:	68e5      	ldr	r5, [r4, #12]
 800a88c:	f003 0306 	and.w	r3, r3, #6
 800a890:	2b04      	cmp	r3, #4
 800a892:	bf18      	it	ne
 800a894:	2500      	movne	r5, #0
 800a896:	f8d9 2000 	ldr.w	r2, [r9]
 800a89a:	f04f 0900 	mov.w	r9, #0
 800a89e:	bf08      	it	eq
 800a8a0:	1aad      	subeq	r5, r5, r2
 800a8a2:	68a3      	ldr	r3, [r4, #8]
 800a8a4:	6922      	ldr	r2, [r4, #16]
 800a8a6:	bf08      	it	eq
 800a8a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	bfc4      	itt	gt
 800a8b0:	1a9b      	subgt	r3, r3, r2
 800a8b2:	18ed      	addgt	r5, r5, r3
 800a8b4:	341a      	adds	r4, #26
 800a8b6:	454d      	cmp	r5, r9
 800a8b8:	d11a      	bne.n	800a8f0 <_printf_common+0xd8>
 800a8ba:	2000      	movs	r0, #0
 800a8bc:	e008      	b.n	800a8d0 <_printf_common+0xb8>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	4652      	mov	r2, sl
 800a8c2:	4639      	mov	r1, r7
 800a8c4:	4630      	mov	r0, r6
 800a8c6:	47c0      	blx	r8
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	d103      	bne.n	800a8d4 <_printf_common+0xbc>
 800a8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d4:	3501      	adds	r5, #1
 800a8d6:	e7c2      	b.n	800a85e <_printf_common+0x46>
 800a8d8:	2030      	movs	r0, #48	; 0x30
 800a8da:	18e1      	adds	r1, r4, r3
 800a8dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8e0:	1c5a      	adds	r2, r3, #1
 800a8e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8e6:	4422      	add	r2, r4
 800a8e8:	3302      	adds	r3, #2
 800a8ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8ee:	e7c4      	b.n	800a87a <_printf_common+0x62>
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	4622      	mov	r2, r4
 800a8f4:	4639      	mov	r1, r7
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	47c0      	blx	r8
 800a8fa:	3001      	adds	r0, #1
 800a8fc:	d0e6      	beq.n	800a8cc <_printf_common+0xb4>
 800a8fe:	f109 0901 	add.w	r9, r9, #1
 800a902:	e7d8      	b.n	800a8b6 <_printf_common+0x9e>

0800a904 <_printf_i>:
 800a904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a908:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a90c:	460c      	mov	r4, r1
 800a90e:	7e09      	ldrb	r1, [r1, #24]
 800a910:	b085      	sub	sp, #20
 800a912:	296e      	cmp	r1, #110	; 0x6e
 800a914:	4617      	mov	r7, r2
 800a916:	4606      	mov	r6, r0
 800a918:	4698      	mov	r8, r3
 800a91a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a91c:	f000 80b3 	beq.w	800aa86 <_printf_i+0x182>
 800a920:	d822      	bhi.n	800a968 <_printf_i+0x64>
 800a922:	2963      	cmp	r1, #99	; 0x63
 800a924:	d036      	beq.n	800a994 <_printf_i+0x90>
 800a926:	d80a      	bhi.n	800a93e <_printf_i+0x3a>
 800a928:	2900      	cmp	r1, #0
 800a92a:	f000 80b9 	beq.w	800aaa0 <_printf_i+0x19c>
 800a92e:	2958      	cmp	r1, #88	; 0x58
 800a930:	f000 8083 	beq.w	800aa3a <_printf_i+0x136>
 800a934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a938:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a93c:	e032      	b.n	800a9a4 <_printf_i+0xa0>
 800a93e:	2964      	cmp	r1, #100	; 0x64
 800a940:	d001      	beq.n	800a946 <_printf_i+0x42>
 800a942:	2969      	cmp	r1, #105	; 0x69
 800a944:	d1f6      	bne.n	800a934 <_printf_i+0x30>
 800a946:	6820      	ldr	r0, [r4, #0]
 800a948:	6813      	ldr	r3, [r2, #0]
 800a94a:	0605      	lsls	r5, r0, #24
 800a94c:	f103 0104 	add.w	r1, r3, #4
 800a950:	d52a      	bpl.n	800a9a8 <_printf_i+0xa4>
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	6011      	str	r1, [r2, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	da03      	bge.n	800a962 <_printf_i+0x5e>
 800a95a:	222d      	movs	r2, #45	; 0x2d
 800a95c:	425b      	negs	r3, r3
 800a95e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a962:	486f      	ldr	r0, [pc, #444]	; (800ab20 <_printf_i+0x21c>)
 800a964:	220a      	movs	r2, #10
 800a966:	e039      	b.n	800a9dc <_printf_i+0xd8>
 800a968:	2973      	cmp	r1, #115	; 0x73
 800a96a:	f000 809d 	beq.w	800aaa8 <_printf_i+0x1a4>
 800a96e:	d808      	bhi.n	800a982 <_printf_i+0x7e>
 800a970:	296f      	cmp	r1, #111	; 0x6f
 800a972:	d020      	beq.n	800a9b6 <_printf_i+0xb2>
 800a974:	2970      	cmp	r1, #112	; 0x70
 800a976:	d1dd      	bne.n	800a934 <_printf_i+0x30>
 800a978:	6823      	ldr	r3, [r4, #0]
 800a97a:	f043 0320 	orr.w	r3, r3, #32
 800a97e:	6023      	str	r3, [r4, #0]
 800a980:	e003      	b.n	800a98a <_printf_i+0x86>
 800a982:	2975      	cmp	r1, #117	; 0x75
 800a984:	d017      	beq.n	800a9b6 <_printf_i+0xb2>
 800a986:	2978      	cmp	r1, #120	; 0x78
 800a988:	d1d4      	bne.n	800a934 <_printf_i+0x30>
 800a98a:	2378      	movs	r3, #120	; 0x78
 800a98c:	4865      	ldr	r0, [pc, #404]	; (800ab24 <_printf_i+0x220>)
 800a98e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a992:	e055      	b.n	800aa40 <_printf_i+0x13c>
 800a994:	6813      	ldr	r3, [r2, #0]
 800a996:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a99a:	1d19      	adds	r1, r3, #4
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	6011      	str	r1, [r2, #0]
 800a9a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e08c      	b.n	800aac2 <_printf_i+0x1be>
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a9ae:	6011      	str	r1, [r2, #0]
 800a9b0:	bf18      	it	ne
 800a9b2:	b21b      	sxthne	r3, r3
 800a9b4:	e7cf      	b.n	800a956 <_printf_i+0x52>
 800a9b6:	6813      	ldr	r3, [r2, #0]
 800a9b8:	6825      	ldr	r5, [r4, #0]
 800a9ba:	1d18      	adds	r0, r3, #4
 800a9bc:	6010      	str	r0, [r2, #0]
 800a9be:	0628      	lsls	r0, r5, #24
 800a9c0:	d501      	bpl.n	800a9c6 <_printf_i+0xc2>
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	e002      	b.n	800a9cc <_printf_i+0xc8>
 800a9c6:	0668      	lsls	r0, r5, #25
 800a9c8:	d5fb      	bpl.n	800a9c2 <_printf_i+0xbe>
 800a9ca:	881b      	ldrh	r3, [r3, #0]
 800a9cc:	296f      	cmp	r1, #111	; 0x6f
 800a9ce:	bf14      	ite	ne
 800a9d0:	220a      	movne	r2, #10
 800a9d2:	2208      	moveq	r2, #8
 800a9d4:	4852      	ldr	r0, [pc, #328]	; (800ab20 <_printf_i+0x21c>)
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9dc:	6865      	ldr	r5, [r4, #4]
 800a9de:	2d00      	cmp	r5, #0
 800a9e0:	60a5      	str	r5, [r4, #8]
 800a9e2:	f2c0 8095 	blt.w	800ab10 <_printf_i+0x20c>
 800a9e6:	6821      	ldr	r1, [r4, #0]
 800a9e8:	f021 0104 	bic.w	r1, r1, #4
 800a9ec:	6021      	str	r1, [r4, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d13d      	bne.n	800aa6e <_printf_i+0x16a>
 800a9f2:	2d00      	cmp	r5, #0
 800a9f4:	f040 808e 	bne.w	800ab14 <_printf_i+0x210>
 800a9f8:	4665      	mov	r5, ip
 800a9fa:	2a08      	cmp	r2, #8
 800a9fc:	d10b      	bne.n	800aa16 <_printf_i+0x112>
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	07db      	lsls	r3, r3, #31
 800aa02:	d508      	bpl.n	800aa16 <_printf_i+0x112>
 800aa04:	6923      	ldr	r3, [r4, #16]
 800aa06:	6862      	ldr	r2, [r4, #4]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	bfde      	ittt	le
 800aa0c:	2330      	movle	r3, #48	; 0x30
 800aa0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa12:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa16:	ebac 0305 	sub.w	r3, ip, r5
 800aa1a:	6123      	str	r3, [r4, #16]
 800aa1c:	f8cd 8000 	str.w	r8, [sp]
 800aa20:	463b      	mov	r3, r7
 800aa22:	aa03      	add	r2, sp, #12
 800aa24:	4621      	mov	r1, r4
 800aa26:	4630      	mov	r0, r6
 800aa28:	f7ff fef6 	bl	800a818 <_printf_common>
 800aa2c:	3001      	adds	r0, #1
 800aa2e:	d14d      	bne.n	800aacc <_printf_i+0x1c8>
 800aa30:	f04f 30ff 	mov.w	r0, #4294967295
 800aa34:	b005      	add	sp, #20
 800aa36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa3a:	4839      	ldr	r0, [pc, #228]	; (800ab20 <_printf_i+0x21c>)
 800aa3c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800aa40:	6813      	ldr	r3, [r2, #0]
 800aa42:	6821      	ldr	r1, [r4, #0]
 800aa44:	1d1d      	adds	r5, r3, #4
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6015      	str	r5, [r2, #0]
 800aa4a:	060a      	lsls	r2, r1, #24
 800aa4c:	d50b      	bpl.n	800aa66 <_printf_i+0x162>
 800aa4e:	07ca      	lsls	r2, r1, #31
 800aa50:	bf44      	itt	mi
 800aa52:	f041 0120 	orrmi.w	r1, r1, #32
 800aa56:	6021      	strmi	r1, [r4, #0]
 800aa58:	b91b      	cbnz	r3, 800aa62 <_printf_i+0x15e>
 800aa5a:	6822      	ldr	r2, [r4, #0]
 800aa5c:	f022 0220 	bic.w	r2, r2, #32
 800aa60:	6022      	str	r2, [r4, #0]
 800aa62:	2210      	movs	r2, #16
 800aa64:	e7b7      	b.n	800a9d6 <_printf_i+0xd2>
 800aa66:	064d      	lsls	r5, r1, #25
 800aa68:	bf48      	it	mi
 800aa6a:	b29b      	uxthmi	r3, r3
 800aa6c:	e7ef      	b.n	800aa4e <_printf_i+0x14a>
 800aa6e:	4665      	mov	r5, ip
 800aa70:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa74:	fb02 3311 	mls	r3, r2, r1, r3
 800aa78:	5cc3      	ldrb	r3, [r0, r3]
 800aa7a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800aa7e:	460b      	mov	r3, r1
 800aa80:	2900      	cmp	r1, #0
 800aa82:	d1f5      	bne.n	800aa70 <_printf_i+0x16c>
 800aa84:	e7b9      	b.n	800a9fa <_printf_i+0xf6>
 800aa86:	6813      	ldr	r3, [r2, #0]
 800aa88:	6825      	ldr	r5, [r4, #0]
 800aa8a:	1d18      	adds	r0, r3, #4
 800aa8c:	6961      	ldr	r1, [r4, #20]
 800aa8e:	6010      	str	r0, [r2, #0]
 800aa90:	0628      	lsls	r0, r5, #24
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	d501      	bpl.n	800aa9a <_printf_i+0x196>
 800aa96:	6019      	str	r1, [r3, #0]
 800aa98:	e002      	b.n	800aaa0 <_printf_i+0x19c>
 800aa9a:	066a      	lsls	r2, r5, #25
 800aa9c:	d5fb      	bpl.n	800aa96 <_printf_i+0x192>
 800aa9e:	8019      	strh	r1, [r3, #0]
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	4665      	mov	r5, ip
 800aaa4:	6123      	str	r3, [r4, #16]
 800aaa6:	e7b9      	b.n	800aa1c <_printf_i+0x118>
 800aaa8:	6813      	ldr	r3, [r2, #0]
 800aaaa:	1d19      	adds	r1, r3, #4
 800aaac:	6011      	str	r1, [r2, #0]
 800aaae:	681d      	ldr	r5, [r3, #0]
 800aab0:	6862      	ldr	r2, [r4, #4]
 800aab2:	2100      	movs	r1, #0
 800aab4:	4628      	mov	r0, r5
 800aab6:	f000 fa93 	bl	800afe0 <memchr>
 800aaba:	b108      	cbz	r0, 800aac0 <_printf_i+0x1bc>
 800aabc:	1b40      	subs	r0, r0, r5
 800aabe:	6060      	str	r0, [r4, #4]
 800aac0:	6863      	ldr	r3, [r4, #4]
 800aac2:	6123      	str	r3, [r4, #16]
 800aac4:	2300      	movs	r3, #0
 800aac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaca:	e7a7      	b.n	800aa1c <_printf_i+0x118>
 800aacc:	6923      	ldr	r3, [r4, #16]
 800aace:	462a      	mov	r2, r5
 800aad0:	4639      	mov	r1, r7
 800aad2:	4630      	mov	r0, r6
 800aad4:	47c0      	blx	r8
 800aad6:	3001      	adds	r0, #1
 800aad8:	d0aa      	beq.n	800aa30 <_printf_i+0x12c>
 800aada:	6823      	ldr	r3, [r4, #0]
 800aadc:	079b      	lsls	r3, r3, #30
 800aade:	d413      	bmi.n	800ab08 <_printf_i+0x204>
 800aae0:	68e0      	ldr	r0, [r4, #12]
 800aae2:	9b03      	ldr	r3, [sp, #12]
 800aae4:	4298      	cmp	r0, r3
 800aae6:	bfb8      	it	lt
 800aae8:	4618      	movlt	r0, r3
 800aaea:	e7a3      	b.n	800aa34 <_printf_i+0x130>
 800aaec:	2301      	movs	r3, #1
 800aaee:	464a      	mov	r2, r9
 800aaf0:	4639      	mov	r1, r7
 800aaf2:	4630      	mov	r0, r6
 800aaf4:	47c0      	blx	r8
 800aaf6:	3001      	adds	r0, #1
 800aaf8:	d09a      	beq.n	800aa30 <_printf_i+0x12c>
 800aafa:	3501      	adds	r5, #1
 800aafc:	68e3      	ldr	r3, [r4, #12]
 800aafe:	9a03      	ldr	r2, [sp, #12]
 800ab00:	1a9b      	subs	r3, r3, r2
 800ab02:	42ab      	cmp	r3, r5
 800ab04:	dcf2      	bgt.n	800aaec <_printf_i+0x1e8>
 800ab06:	e7eb      	b.n	800aae0 <_printf_i+0x1dc>
 800ab08:	2500      	movs	r5, #0
 800ab0a:	f104 0919 	add.w	r9, r4, #25
 800ab0e:	e7f5      	b.n	800aafc <_printf_i+0x1f8>
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1ac      	bne.n	800aa6e <_printf_i+0x16a>
 800ab14:	7803      	ldrb	r3, [r0, #0]
 800ab16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab1e:	e76c      	b.n	800a9fa <_printf_i+0xf6>
 800ab20:	0800cad1 	.word	0x0800cad1
 800ab24:	0800cae2 	.word	0x0800cae2

0800ab28 <_sbrk_r>:
 800ab28:	b538      	push	{r3, r4, r5, lr}
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	4c05      	ldr	r4, [pc, #20]	; (800ab44 <_sbrk_r+0x1c>)
 800ab2e:	4605      	mov	r5, r0
 800ab30:	4608      	mov	r0, r1
 800ab32:	6023      	str	r3, [r4, #0]
 800ab34:	f7fc fb00 	bl	8007138 <_sbrk>
 800ab38:	1c43      	adds	r3, r0, #1
 800ab3a:	d102      	bne.n	800ab42 <_sbrk_r+0x1a>
 800ab3c:	6823      	ldr	r3, [r4, #0]
 800ab3e:	b103      	cbz	r3, 800ab42 <_sbrk_r+0x1a>
 800ab40:	602b      	str	r3, [r5, #0]
 800ab42:	bd38      	pop	{r3, r4, r5, pc}
 800ab44:	200006b8 	.word	0x200006b8

0800ab48 <__sread>:
 800ab48:	b510      	push	{r4, lr}
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab50:	f000 faa0 	bl	800b094 <_read_r>
 800ab54:	2800      	cmp	r0, #0
 800ab56:	bfab      	itete	ge
 800ab58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab5a:	89a3      	ldrhlt	r3, [r4, #12]
 800ab5c:	181b      	addge	r3, r3, r0
 800ab5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab62:	bfac      	ite	ge
 800ab64:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab66:	81a3      	strhlt	r3, [r4, #12]
 800ab68:	bd10      	pop	{r4, pc}

0800ab6a <__swrite>:
 800ab6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab6e:	461f      	mov	r7, r3
 800ab70:	898b      	ldrh	r3, [r1, #12]
 800ab72:	4605      	mov	r5, r0
 800ab74:	05db      	lsls	r3, r3, #23
 800ab76:	460c      	mov	r4, r1
 800ab78:	4616      	mov	r6, r2
 800ab7a:	d505      	bpl.n	800ab88 <__swrite+0x1e>
 800ab7c:	2302      	movs	r3, #2
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab84:	f000 f9b6 	bl	800aef4 <_lseek_r>
 800ab88:	89a3      	ldrh	r3, [r4, #12]
 800ab8a:	4632      	mov	r2, r6
 800ab8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab90:	81a3      	strh	r3, [r4, #12]
 800ab92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab96:	463b      	mov	r3, r7
 800ab98:	4628      	mov	r0, r5
 800ab9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab9e:	f000 b869 	b.w	800ac74 <_write_r>

0800aba2 <__sseek>:
 800aba2:	b510      	push	{r4, lr}
 800aba4:	460c      	mov	r4, r1
 800aba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abaa:	f000 f9a3 	bl	800aef4 <_lseek_r>
 800abae:	1c43      	adds	r3, r0, #1
 800abb0:	89a3      	ldrh	r3, [r4, #12]
 800abb2:	bf15      	itete	ne
 800abb4:	6560      	strne	r0, [r4, #84]	; 0x54
 800abb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abbe:	81a3      	strheq	r3, [r4, #12]
 800abc0:	bf18      	it	ne
 800abc2:	81a3      	strhne	r3, [r4, #12]
 800abc4:	bd10      	pop	{r4, pc}

0800abc6 <__sclose>:
 800abc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abca:	f000 b8d3 	b.w	800ad74 <_close_r>
	...

0800abd0 <__swbuf_r>:
 800abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd2:	460e      	mov	r6, r1
 800abd4:	4614      	mov	r4, r2
 800abd6:	4605      	mov	r5, r0
 800abd8:	b118      	cbz	r0, 800abe2 <__swbuf_r+0x12>
 800abda:	6983      	ldr	r3, [r0, #24]
 800abdc:	b90b      	cbnz	r3, 800abe2 <__swbuf_r+0x12>
 800abde:	f7ff fa53 	bl	800a088 <__sinit>
 800abe2:	4b21      	ldr	r3, [pc, #132]	; (800ac68 <__swbuf_r+0x98>)
 800abe4:	429c      	cmp	r4, r3
 800abe6:	d12a      	bne.n	800ac3e <__swbuf_r+0x6e>
 800abe8:	686c      	ldr	r4, [r5, #4]
 800abea:	69a3      	ldr	r3, [r4, #24]
 800abec:	60a3      	str	r3, [r4, #8]
 800abee:	89a3      	ldrh	r3, [r4, #12]
 800abf0:	071a      	lsls	r2, r3, #28
 800abf2:	d52e      	bpl.n	800ac52 <__swbuf_r+0x82>
 800abf4:	6923      	ldr	r3, [r4, #16]
 800abf6:	b363      	cbz	r3, 800ac52 <__swbuf_r+0x82>
 800abf8:	6923      	ldr	r3, [r4, #16]
 800abfa:	6820      	ldr	r0, [r4, #0]
 800abfc:	b2f6      	uxtb	r6, r6
 800abfe:	1ac0      	subs	r0, r0, r3
 800ac00:	6963      	ldr	r3, [r4, #20]
 800ac02:	4637      	mov	r7, r6
 800ac04:	4283      	cmp	r3, r0
 800ac06:	dc04      	bgt.n	800ac12 <__swbuf_r+0x42>
 800ac08:	4621      	mov	r1, r4
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	f000 f948 	bl	800aea0 <_fflush_r>
 800ac10:	bb28      	cbnz	r0, 800ac5e <__swbuf_r+0x8e>
 800ac12:	68a3      	ldr	r3, [r4, #8]
 800ac14:	3001      	adds	r0, #1
 800ac16:	3b01      	subs	r3, #1
 800ac18:	60a3      	str	r3, [r4, #8]
 800ac1a:	6823      	ldr	r3, [r4, #0]
 800ac1c:	1c5a      	adds	r2, r3, #1
 800ac1e:	6022      	str	r2, [r4, #0]
 800ac20:	701e      	strb	r6, [r3, #0]
 800ac22:	6963      	ldr	r3, [r4, #20]
 800ac24:	4283      	cmp	r3, r0
 800ac26:	d004      	beq.n	800ac32 <__swbuf_r+0x62>
 800ac28:	89a3      	ldrh	r3, [r4, #12]
 800ac2a:	07db      	lsls	r3, r3, #31
 800ac2c:	d519      	bpl.n	800ac62 <__swbuf_r+0x92>
 800ac2e:	2e0a      	cmp	r6, #10
 800ac30:	d117      	bne.n	800ac62 <__swbuf_r+0x92>
 800ac32:	4621      	mov	r1, r4
 800ac34:	4628      	mov	r0, r5
 800ac36:	f000 f933 	bl	800aea0 <_fflush_r>
 800ac3a:	b190      	cbz	r0, 800ac62 <__swbuf_r+0x92>
 800ac3c:	e00f      	b.n	800ac5e <__swbuf_r+0x8e>
 800ac3e:	4b0b      	ldr	r3, [pc, #44]	; (800ac6c <__swbuf_r+0x9c>)
 800ac40:	429c      	cmp	r4, r3
 800ac42:	d101      	bne.n	800ac48 <__swbuf_r+0x78>
 800ac44:	68ac      	ldr	r4, [r5, #8]
 800ac46:	e7d0      	b.n	800abea <__swbuf_r+0x1a>
 800ac48:	4b09      	ldr	r3, [pc, #36]	; (800ac70 <__swbuf_r+0xa0>)
 800ac4a:	429c      	cmp	r4, r3
 800ac4c:	bf08      	it	eq
 800ac4e:	68ec      	ldreq	r4, [r5, #12]
 800ac50:	e7cb      	b.n	800abea <__swbuf_r+0x1a>
 800ac52:	4621      	mov	r1, r4
 800ac54:	4628      	mov	r0, r5
 800ac56:	f000 f81f 	bl	800ac98 <__swsetup_r>
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	d0cc      	beq.n	800abf8 <__swbuf_r+0x28>
 800ac5e:	f04f 37ff 	mov.w	r7, #4294967295
 800ac62:	4638      	mov	r0, r7
 800ac64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac66:	bf00      	nop
 800ac68:	0800ca80 	.word	0x0800ca80
 800ac6c:	0800caa0 	.word	0x0800caa0
 800ac70:	0800ca60 	.word	0x0800ca60

0800ac74 <_write_r>:
 800ac74:	b538      	push	{r3, r4, r5, lr}
 800ac76:	4605      	mov	r5, r0
 800ac78:	4608      	mov	r0, r1
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	4c05      	ldr	r4, [pc, #20]	; (800ac94 <_write_r+0x20>)
 800ac80:	6022      	str	r2, [r4, #0]
 800ac82:	461a      	mov	r2, r3
 800ac84:	f7fc fa0b 	bl	800709e <_write>
 800ac88:	1c43      	adds	r3, r0, #1
 800ac8a:	d102      	bne.n	800ac92 <_write_r+0x1e>
 800ac8c:	6823      	ldr	r3, [r4, #0]
 800ac8e:	b103      	cbz	r3, 800ac92 <_write_r+0x1e>
 800ac90:	602b      	str	r3, [r5, #0]
 800ac92:	bd38      	pop	{r3, r4, r5, pc}
 800ac94:	200006b8 	.word	0x200006b8

0800ac98 <__swsetup_r>:
 800ac98:	4b32      	ldr	r3, [pc, #200]	; (800ad64 <__swsetup_r+0xcc>)
 800ac9a:	b570      	push	{r4, r5, r6, lr}
 800ac9c:	681d      	ldr	r5, [r3, #0]
 800ac9e:	4606      	mov	r6, r0
 800aca0:	460c      	mov	r4, r1
 800aca2:	b125      	cbz	r5, 800acae <__swsetup_r+0x16>
 800aca4:	69ab      	ldr	r3, [r5, #24]
 800aca6:	b913      	cbnz	r3, 800acae <__swsetup_r+0x16>
 800aca8:	4628      	mov	r0, r5
 800acaa:	f7ff f9ed 	bl	800a088 <__sinit>
 800acae:	4b2e      	ldr	r3, [pc, #184]	; (800ad68 <__swsetup_r+0xd0>)
 800acb0:	429c      	cmp	r4, r3
 800acb2:	d10f      	bne.n	800acd4 <__swsetup_r+0x3c>
 800acb4:	686c      	ldr	r4, [r5, #4]
 800acb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acba:	b29a      	uxth	r2, r3
 800acbc:	0715      	lsls	r5, r2, #28
 800acbe:	d42c      	bmi.n	800ad1a <__swsetup_r+0x82>
 800acc0:	06d0      	lsls	r0, r2, #27
 800acc2:	d411      	bmi.n	800ace8 <__swsetup_r+0x50>
 800acc4:	2209      	movs	r2, #9
 800acc6:	6032      	str	r2, [r6, #0]
 800acc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800accc:	81a3      	strh	r3, [r4, #12]
 800acce:	f04f 30ff 	mov.w	r0, #4294967295
 800acd2:	e03e      	b.n	800ad52 <__swsetup_r+0xba>
 800acd4:	4b25      	ldr	r3, [pc, #148]	; (800ad6c <__swsetup_r+0xd4>)
 800acd6:	429c      	cmp	r4, r3
 800acd8:	d101      	bne.n	800acde <__swsetup_r+0x46>
 800acda:	68ac      	ldr	r4, [r5, #8]
 800acdc:	e7eb      	b.n	800acb6 <__swsetup_r+0x1e>
 800acde:	4b24      	ldr	r3, [pc, #144]	; (800ad70 <__swsetup_r+0xd8>)
 800ace0:	429c      	cmp	r4, r3
 800ace2:	bf08      	it	eq
 800ace4:	68ec      	ldreq	r4, [r5, #12]
 800ace6:	e7e6      	b.n	800acb6 <__swsetup_r+0x1e>
 800ace8:	0751      	lsls	r1, r2, #29
 800acea:	d512      	bpl.n	800ad12 <__swsetup_r+0x7a>
 800acec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acee:	b141      	cbz	r1, 800ad02 <__swsetup_r+0x6a>
 800acf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acf4:	4299      	cmp	r1, r3
 800acf6:	d002      	beq.n	800acfe <__swsetup_r+0x66>
 800acf8:	4630      	mov	r0, r6
 800acfa:	f7ff fa57 	bl	800a1ac <_free_r>
 800acfe:	2300      	movs	r3, #0
 800ad00:	6363      	str	r3, [r4, #52]	; 0x34
 800ad02:	89a3      	ldrh	r3, [r4, #12]
 800ad04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad08:	81a3      	strh	r3, [r4, #12]
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	6063      	str	r3, [r4, #4]
 800ad0e:	6923      	ldr	r3, [r4, #16]
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	89a3      	ldrh	r3, [r4, #12]
 800ad14:	f043 0308 	orr.w	r3, r3, #8
 800ad18:	81a3      	strh	r3, [r4, #12]
 800ad1a:	6923      	ldr	r3, [r4, #16]
 800ad1c:	b94b      	cbnz	r3, 800ad32 <__swsetup_r+0x9a>
 800ad1e:	89a3      	ldrh	r3, [r4, #12]
 800ad20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad28:	d003      	beq.n	800ad32 <__swsetup_r+0x9a>
 800ad2a:	4621      	mov	r1, r4
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	f000 f917 	bl	800af60 <__smakebuf_r>
 800ad32:	89a2      	ldrh	r2, [r4, #12]
 800ad34:	f012 0301 	ands.w	r3, r2, #1
 800ad38:	d00c      	beq.n	800ad54 <__swsetup_r+0xbc>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	60a3      	str	r3, [r4, #8]
 800ad3e:	6963      	ldr	r3, [r4, #20]
 800ad40:	425b      	negs	r3, r3
 800ad42:	61a3      	str	r3, [r4, #24]
 800ad44:	6923      	ldr	r3, [r4, #16]
 800ad46:	b953      	cbnz	r3, 800ad5e <__swsetup_r+0xc6>
 800ad48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad4c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ad50:	d1ba      	bne.n	800acc8 <__swsetup_r+0x30>
 800ad52:	bd70      	pop	{r4, r5, r6, pc}
 800ad54:	0792      	lsls	r2, r2, #30
 800ad56:	bf58      	it	pl
 800ad58:	6963      	ldrpl	r3, [r4, #20]
 800ad5a:	60a3      	str	r3, [r4, #8]
 800ad5c:	e7f2      	b.n	800ad44 <__swsetup_r+0xac>
 800ad5e:	2000      	movs	r0, #0
 800ad60:	e7f7      	b.n	800ad52 <__swsetup_r+0xba>
 800ad62:	bf00      	nop
 800ad64:	20000014 	.word	0x20000014
 800ad68:	0800ca80 	.word	0x0800ca80
 800ad6c:	0800caa0 	.word	0x0800caa0
 800ad70:	0800ca60 	.word	0x0800ca60

0800ad74 <_close_r>:
 800ad74:	b538      	push	{r3, r4, r5, lr}
 800ad76:	2300      	movs	r3, #0
 800ad78:	4c05      	ldr	r4, [pc, #20]	; (800ad90 <_close_r+0x1c>)
 800ad7a:	4605      	mov	r5, r0
 800ad7c:	4608      	mov	r0, r1
 800ad7e:	6023      	str	r3, [r4, #0]
 800ad80:	f7fc f9a9 	bl	80070d6 <_close>
 800ad84:	1c43      	adds	r3, r0, #1
 800ad86:	d102      	bne.n	800ad8e <_close_r+0x1a>
 800ad88:	6823      	ldr	r3, [r4, #0]
 800ad8a:	b103      	cbz	r3, 800ad8e <_close_r+0x1a>
 800ad8c:	602b      	str	r3, [r5, #0]
 800ad8e:	bd38      	pop	{r3, r4, r5, pc}
 800ad90:	200006b8 	.word	0x200006b8

0800ad94 <__sflush_r>:
 800ad94:	898a      	ldrh	r2, [r1, #12]
 800ad96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad9a:	4605      	mov	r5, r0
 800ad9c:	0710      	lsls	r0, r2, #28
 800ad9e:	460c      	mov	r4, r1
 800ada0:	d458      	bmi.n	800ae54 <__sflush_r+0xc0>
 800ada2:	684b      	ldr	r3, [r1, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	dc05      	bgt.n	800adb4 <__sflush_r+0x20>
 800ada8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800adaa:	2b00      	cmp	r3, #0
 800adac:	dc02      	bgt.n	800adb4 <__sflush_r+0x20>
 800adae:	2000      	movs	r0, #0
 800adb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adb6:	2e00      	cmp	r6, #0
 800adb8:	d0f9      	beq.n	800adae <__sflush_r+0x1a>
 800adba:	2300      	movs	r3, #0
 800adbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800adc0:	682f      	ldr	r7, [r5, #0]
 800adc2:	6a21      	ldr	r1, [r4, #32]
 800adc4:	602b      	str	r3, [r5, #0]
 800adc6:	d032      	beq.n	800ae2e <__sflush_r+0x9a>
 800adc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800adca:	89a3      	ldrh	r3, [r4, #12]
 800adcc:	075a      	lsls	r2, r3, #29
 800adce:	d505      	bpl.n	800addc <__sflush_r+0x48>
 800add0:	6863      	ldr	r3, [r4, #4]
 800add2:	1ac0      	subs	r0, r0, r3
 800add4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800add6:	b10b      	cbz	r3, 800addc <__sflush_r+0x48>
 800add8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adda:	1ac0      	subs	r0, r0, r3
 800addc:	2300      	movs	r3, #0
 800adde:	4602      	mov	r2, r0
 800ade0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ade2:	6a21      	ldr	r1, [r4, #32]
 800ade4:	4628      	mov	r0, r5
 800ade6:	47b0      	blx	r6
 800ade8:	1c43      	adds	r3, r0, #1
 800adea:	89a3      	ldrh	r3, [r4, #12]
 800adec:	d106      	bne.n	800adfc <__sflush_r+0x68>
 800adee:	6829      	ldr	r1, [r5, #0]
 800adf0:	291d      	cmp	r1, #29
 800adf2:	d848      	bhi.n	800ae86 <__sflush_r+0xf2>
 800adf4:	4a29      	ldr	r2, [pc, #164]	; (800ae9c <__sflush_r+0x108>)
 800adf6:	40ca      	lsrs	r2, r1
 800adf8:	07d6      	lsls	r6, r2, #31
 800adfa:	d544      	bpl.n	800ae86 <__sflush_r+0xf2>
 800adfc:	2200      	movs	r2, #0
 800adfe:	6062      	str	r2, [r4, #4]
 800ae00:	6922      	ldr	r2, [r4, #16]
 800ae02:	04d9      	lsls	r1, r3, #19
 800ae04:	6022      	str	r2, [r4, #0]
 800ae06:	d504      	bpl.n	800ae12 <__sflush_r+0x7e>
 800ae08:	1c42      	adds	r2, r0, #1
 800ae0a:	d101      	bne.n	800ae10 <__sflush_r+0x7c>
 800ae0c:	682b      	ldr	r3, [r5, #0]
 800ae0e:	b903      	cbnz	r3, 800ae12 <__sflush_r+0x7e>
 800ae10:	6560      	str	r0, [r4, #84]	; 0x54
 800ae12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae14:	602f      	str	r7, [r5, #0]
 800ae16:	2900      	cmp	r1, #0
 800ae18:	d0c9      	beq.n	800adae <__sflush_r+0x1a>
 800ae1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae1e:	4299      	cmp	r1, r3
 800ae20:	d002      	beq.n	800ae28 <__sflush_r+0x94>
 800ae22:	4628      	mov	r0, r5
 800ae24:	f7ff f9c2 	bl	800a1ac <_free_r>
 800ae28:	2000      	movs	r0, #0
 800ae2a:	6360      	str	r0, [r4, #52]	; 0x34
 800ae2c:	e7c0      	b.n	800adb0 <__sflush_r+0x1c>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	4628      	mov	r0, r5
 800ae32:	47b0      	blx	r6
 800ae34:	1c41      	adds	r1, r0, #1
 800ae36:	d1c8      	bne.n	800adca <__sflush_r+0x36>
 800ae38:	682b      	ldr	r3, [r5, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d0c5      	beq.n	800adca <__sflush_r+0x36>
 800ae3e:	2b1d      	cmp	r3, #29
 800ae40:	d001      	beq.n	800ae46 <__sflush_r+0xb2>
 800ae42:	2b16      	cmp	r3, #22
 800ae44:	d101      	bne.n	800ae4a <__sflush_r+0xb6>
 800ae46:	602f      	str	r7, [r5, #0]
 800ae48:	e7b1      	b.n	800adae <__sflush_r+0x1a>
 800ae4a:	89a3      	ldrh	r3, [r4, #12]
 800ae4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae50:	81a3      	strh	r3, [r4, #12]
 800ae52:	e7ad      	b.n	800adb0 <__sflush_r+0x1c>
 800ae54:	690f      	ldr	r7, [r1, #16]
 800ae56:	2f00      	cmp	r7, #0
 800ae58:	d0a9      	beq.n	800adae <__sflush_r+0x1a>
 800ae5a:	0793      	lsls	r3, r2, #30
 800ae5c:	bf18      	it	ne
 800ae5e:	2300      	movne	r3, #0
 800ae60:	680e      	ldr	r6, [r1, #0]
 800ae62:	bf08      	it	eq
 800ae64:	694b      	ldreq	r3, [r1, #20]
 800ae66:	eba6 0807 	sub.w	r8, r6, r7
 800ae6a:	600f      	str	r7, [r1, #0]
 800ae6c:	608b      	str	r3, [r1, #8]
 800ae6e:	f1b8 0f00 	cmp.w	r8, #0
 800ae72:	dd9c      	ble.n	800adae <__sflush_r+0x1a>
 800ae74:	4643      	mov	r3, r8
 800ae76:	463a      	mov	r2, r7
 800ae78:	6a21      	ldr	r1, [r4, #32]
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae7e:	47b0      	blx	r6
 800ae80:	2800      	cmp	r0, #0
 800ae82:	dc06      	bgt.n	800ae92 <__sflush_r+0xfe>
 800ae84:	89a3      	ldrh	r3, [r4, #12]
 800ae86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae8a:	81a3      	strh	r3, [r4, #12]
 800ae8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae90:	e78e      	b.n	800adb0 <__sflush_r+0x1c>
 800ae92:	4407      	add	r7, r0
 800ae94:	eba8 0800 	sub.w	r8, r8, r0
 800ae98:	e7e9      	b.n	800ae6e <__sflush_r+0xda>
 800ae9a:	bf00      	nop
 800ae9c:	20400001 	.word	0x20400001

0800aea0 <_fflush_r>:
 800aea0:	b538      	push	{r3, r4, r5, lr}
 800aea2:	690b      	ldr	r3, [r1, #16]
 800aea4:	4605      	mov	r5, r0
 800aea6:	460c      	mov	r4, r1
 800aea8:	b1db      	cbz	r3, 800aee2 <_fflush_r+0x42>
 800aeaa:	b118      	cbz	r0, 800aeb4 <_fflush_r+0x14>
 800aeac:	6983      	ldr	r3, [r0, #24]
 800aeae:	b90b      	cbnz	r3, 800aeb4 <_fflush_r+0x14>
 800aeb0:	f7ff f8ea 	bl	800a088 <__sinit>
 800aeb4:	4b0c      	ldr	r3, [pc, #48]	; (800aee8 <_fflush_r+0x48>)
 800aeb6:	429c      	cmp	r4, r3
 800aeb8:	d109      	bne.n	800aece <_fflush_r+0x2e>
 800aeba:	686c      	ldr	r4, [r5, #4]
 800aebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aec0:	b17b      	cbz	r3, 800aee2 <_fflush_r+0x42>
 800aec2:	4621      	mov	r1, r4
 800aec4:	4628      	mov	r0, r5
 800aec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aeca:	f7ff bf63 	b.w	800ad94 <__sflush_r>
 800aece:	4b07      	ldr	r3, [pc, #28]	; (800aeec <_fflush_r+0x4c>)
 800aed0:	429c      	cmp	r4, r3
 800aed2:	d101      	bne.n	800aed8 <_fflush_r+0x38>
 800aed4:	68ac      	ldr	r4, [r5, #8]
 800aed6:	e7f1      	b.n	800aebc <_fflush_r+0x1c>
 800aed8:	4b05      	ldr	r3, [pc, #20]	; (800aef0 <_fflush_r+0x50>)
 800aeda:	429c      	cmp	r4, r3
 800aedc:	bf08      	it	eq
 800aede:	68ec      	ldreq	r4, [r5, #12]
 800aee0:	e7ec      	b.n	800aebc <_fflush_r+0x1c>
 800aee2:	2000      	movs	r0, #0
 800aee4:	bd38      	pop	{r3, r4, r5, pc}
 800aee6:	bf00      	nop
 800aee8:	0800ca80 	.word	0x0800ca80
 800aeec:	0800caa0 	.word	0x0800caa0
 800aef0:	0800ca60 	.word	0x0800ca60

0800aef4 <_lseek_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	4605      	mov	r5, r0
 800aef8:	4608      	mov	r0, r1
 800aefa:	4611      	mov	r1, r2
 800aefc:	2200      	movs	r2, #0
 800aefe:	4c05      	ldr	r4, [pc, #20]	; (800af14 <_lseek_r+0x20>)
 800af00:	6022      	str	r2, [r4, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	f7fc f90b 	bl	800711e <_lseek>
 800af08:	1c43      	adds	r3, r0, #1
 800af0a:	d102      	bne.n	800af12 <_lseek_r+0x1e>
 800af0c:	6823      	ldr	r3, [r4, #0]
 800af0e:	b103      	cbz	r3, 800af12 <_lseek_r+0x1e>
 800af10:	602b      	str	r3, [r5, #0]
 800af12:	bd38      	pop	{r3, r4, r5, pc}
 800af14:	200006b8 	.word	0x200006b8

0800af18 <__swhatbuf_r>:
 800af18:	b570      	push	{r4, r5, r6, lr}
 800af1a:	460e      	mov	r6, r1
 800af1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af20:	b096      	sub	sp, #88	; 0x58
 800af22:	2900      	cmp	r1, #0
 800af24:	4614      	mov	r4, r2
 800af26:	461d      	mov	r5, r3
 800af28:	da07      	bge.n	800af3a <__swhatbuf_r+0x22>
 800af2a:	2300      	movs	r3, #0
 800af2c:	602b      	str	r3, [r5, #0]
 800af2e:	89b3      	ldrh	r3, [r6, #12]
 800af30:	061a      	lsls	r2, r3, #24
 800af32:	d410      	bmi.n	800af56 <__swhatbuf_r+0x3e>
 800af34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af38:	e00e      	b.n	800af58 <__swhatbuf_r+0x40>
 800af3a:	466a      	mov	r2, sp
 800af3c:	f000 f8bc 	bl	800b0b8 <_fstat_r>
 800af40:	2800      	cmp	r0, #0
 800af42:	dbf2      	blt.n	800af2a <__swhatbuf_r+0x12>
 800af44:	9a01      	ldr	r2, [sp, #4]
 800af46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af4e:	425a      	negs	r2, r3
 800af50:	415a      	adcs	r2, r3
 800af52:	602a      	str	r2, [r5, #0]
 800af54:	e7ee      	b.n	800af34 <__swhatbuf_r+0x1c>
 800af56:	2340      	movs	r3, #64	; 0x40
 800af58:	2000      	movs	r0, #0
 800af5a:	6023      	str	r3, [r4, #0]
 800af5c:	b016      	add	sp, #88	; 0x58
 800af5e:	bd70      	pop	{r4, r5, r6, pc}

0800af60 <__smakebuf_r>:
 800af60:	898b      	ldrh	r3, [r1, #12]
 800af62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af64:	079d      	lsls	r5, r3, #30
 800af66:	4606      	mov	r6, r0
 800af68:	460c      	mov	r4, r1
 800af6a:	d507      	bpl.n	800af7c <__smakebuf_r+0x1c>
 800af6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af70:	6023      	str	r3, [r4, #0]
 800af72:	6123      	str	r3, [r4, #16]
 800af74:	2301      	movs	r3, #1
 800af76:	6163      	str	r3, [r4, #20]
 800af78:	b002      	add	sp, #8
 800af7a:	bd70      	pop	{r4, r5, r6, pc}
 800af7c:	ab01      	add	r3, sp, #4
 800af7e:	466a      	mov	r2, sp
 800af80:	f7ff ffca 	bl	800af18 <__swhatbuf_r>
 800af84:	9900      	ldr	r1, [sp, #0]
 800af86:	4605      	mov	r5, r0
 800af88:	4630      	mov	r0, r6
 800af8a:	f7ff f95b 	bl	800a244 <_malloc_r>
 800af8e:	b948      	cbnz	r0, 800afa4 <__smakebuf_r+0x44>
 800af90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af94:	059a      	lsls	r2, r3, #22
 800af96:	d4ef      	bmi.n	800af78 <__smakebuf_r+0x18>
 800af98:	f023 0303 	bic.w	r3, r3, #3
 800af9c:	f043 0302 	orr.w	r3, r3, #2
 800afa0:	81a3      	strh	r3, [r4, #12]
 800afa2:	e7e3      	b.n	800af6c <__smakebuf_r+0xc>
 800afa4:	4b0d      	ldr	r3, [pc, #52]	; (800afdc <__smakebuf_r+0x7c>)
 800afa6:	62b3      	str	r3, [r6, #40]	; 0x28
 800afa8:	89a3      	ldrh	r3, [r4, #12]
 800afaa:	6020      	str	r0, [r4, #0]
 800afac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afb0:	81a3      	strh	r3, [r4, #12]
 800afb2:	9b00      	ldr	r3, [sp, #0]
 800afb4:	6120      	str	r0, [r4, #16]
 800afb6:	6163      	str	r3, [r4, #20]
 800afb8:	9b01      	ldr	r3, [sp, #4]
 800afba:	b15b      	cbz	r3, 800afd4 <__smakebuf_r+0x74>
 800afbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afc0:	4630      	mov	r0, r6
 800afc2:	f000 f88b 	bl	800b0dc <_isatty_r>
 800afc6:	b128      	cbz	r0, 800afd4 <__smakebuf_r+0x74>
 800afc8:	89a3      	ldrh	r3, [r4, #12]
 800afca:	f023 0303 	bic.w	r3, r3, #3
 800afce:	f043 0301 	orr.w	r3, r3, #1
 800afd2:	81a3      	strh	r3, [r4, #12]
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	431d      	orrs	r5, r3
 800afd8:	81a5      	strh	r5, [r4, #12]
 800afda:	e7cd      	b.n	800af78 <__smakebuf_r+0x18>
 800afdc:	0800a051 	.word	0x0800a051

0800afe0 <memchr>:
 800afe0:	b510      	push	{r4, lr}
 800afe2:	b2c9      	uxtb	r1, r1
 800afe4:	4402      	add	r2, r0
 800afe6:	4290      	cmp	r0, r2
 800afe8:	4603      	mov	r3, r0
 800afea:	d101      	bne.n	800aff0 <memchr+0x10>
 800afec:	2300      	movs	r3, #0
 800afee:	e003      	b.n	800aff8 <memchr+0x18>
 800aff0:	781c      	ldrb	r4, [r3, #0]
 800aff2:	3001      	adds	r0, #1
 800aff4:	428c      	cmp	r4, r1
 800aff6:	d1f6      	bne.n	800afe6 <memchr+0x6>
 800aff8:	4618      	mov	r0, r3
 800affa:	bd10      	pop	{r4, pc}

0800affc <memcpy>:
 800affc:	b510      	push	{r4, lr}
 800affe:	1e43      	subs	r3, r0, #1
 800b000:	440a      	add	r2, r1
 800b002:	4291      	cmp	r1, r2
 800b004:	d100      	bne.n	800b008 <memcpy+0xc>
 800b006:	bd10      	pop	{r4, pc}
 800b008:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b00c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b010:	e7f7      	b.n	800b002 <memcpy+0x6>

0800b012 <memmove>:
 800b012:	4288      	cmp	r0, r1
 800b014:	b510      	push	{r4, lr}
 800b016:	eb01 0302 	add.w	r3, r1, r2
 800b01a:	d807      	bhi.n	800b02c <memmove+0x1a>
 800b01c:	1e42      	subs	r2, r0, #1
 800b01e:	4299      	cmp	r1, r3
 800b020:	d00a      	beq.n	800b038 <memmove+0x26>
 800b022:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b026:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b02a:	e7f8      	b.n	800b01e <memmove+0xc>
 800b02c:	4283      	cmp	r3, r0
 800b02e:	d9f5      	bls.n	800b01c <memmove+0xa>
 800b030:	1881      	adds	r1, r0, r2
 800b032:	1ad2      	subs	r2, r2, r3
 800b034:	42d3      	cmn	r3, r2
 800b036:	d100      	bne.n	800b03a <memmove+0x28>
 800b038:	bd10      	pop	{r4, pc}
 800b03a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b03e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b042:	e7f7      	b.n	800b034 <memmove+0x22>

0800b044 <__malloc_lock>:
 800b044:	4770      	bx	lr

0800b046 <__malloc_unlock>:
 800b046:	4770      	bx	lr

0800b048 <_realloc_r>:
 800b048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04a:	4607      	mov	r7, r0
 800b04c:	4614      	mov	r4, r2
 800b04e:	460e      	mov	r6, r1
 800b050:	b921      	cbnz	r1, 800b05c <_realloc_r+0x14>
 800b052:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b056:	4611      	mov	r1, r2
 800b058:	f7ff b8f4 	b.w	800a244 <_malloc_r>
 800b05c:	b922      	cbnz	r2, 800b068 <_realloc_r+0x20>
 800b05e:	f7ff f8a5 	bl	800a1ac <_free_r>
 800b062:	4625      	mov	r5, r4
 800b064:	4628      	mov	r0, r5
 800b066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b068:	f000 f848 	bl	800b0fc <_malloc_usable_size_r>
 800b06c:	42a0      	cmp	r0, r4
 800b06e:	d20f      	bcs.n	800b090 <_realloc_r+0x48>
 800b070:	4621      	mov	r1, r4
 800b072:	4638      	mov	r0, r7
 800b074:	f7ff f8e6 	bl	800a244 <_malloc_r>
 800b078:	4605      	mov	r5, r0
 800b07a:	2800      	cmp	r0, #0
 800b07c:	d0f2      	beq.n	800b064 <_realloc_r+0x1c>
 800b07e:	4631      	mov	r1, r6
 800b080:	4622      	mov	r2, r4
 800b082:	f7ff ffbb 	bl	800affc <memcpy>
 800b086:	4631      	mov	r1, r6
 800b088:	4638      	mov	r0, r7
 800b08a:	f7ff f88f 	bl	800a1ac <_free_r>
 800b08e:	e7e9      	b.n	800b064 <_realloc_r+0x1c>
 800b090:	4635      	mov	r5, r6
 800b092:	e7e7      	b.n	800b064 <_realloc_r+0x1c>

0800b094 <_read_r>:
 800b094:	b538      	push	{r3, r4, r5, lr}
 800b096:	4605      	mov	r5, r0
 800b098:	4608      	mov	r0, r1
 800b09a:	4611      	mov	r1, r2
 800b09c:	2200      	movs	r2, #0
 800b09e:	4c05      	ldr	r4, [pc, #20]	; (800b0b4 <_read_r+0x20>)
 800b0a0:	6022      	str	r2, [r4, #0]
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	f7fb ffde 	bl	8007064 <_read>
 800b0a8:	1c43      	adds	r3, r0, #1
 800b0aa:	d102      	bne.n	800b0b2 <_read_r+0x1e>
 800b0ac:	6823      	ldr	r3, [r4, #0]
 800b0ae:	b103      	cbz	r3, 800b0b2 <_read_r+0x1e>
 800b0b0:	602b      	str	r3, [r5, #0]
 800b0b2:	bd38      	pop	{r3, r4, r5, pc}
 800b0b4:	200006b8 	.word	0x200006b8

0800b0b8 <_fstat_r>:
 800b0b8:	b538      	push	{r3, r4, r5, lr}
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	4c06      	ldr	r4, [pc, #24]	; (800b0d8 <_fstat_r+0x20>)
 800b0be:	4605      	mov	r5, r0
 800b0c0:	4608      	mov	r0, r1
 800b0c2:	4611      	mov	r1, r2
 800b0c4:	6023      	str	r3, [r4, #0]
 800b0c6:	f7fc f811 	bl	80070ec <_fstat>
 800b0ca:	1c43      	adds	r3, r0, #1
 800b0cc:	d102      	bne.n	800b0d4 <_fstat_r+0x1c>
 800b0ce:	6823      	ldr	r3, [r4, #0]
 800b0d0:	b103      	cbz	r3, 800b0d4 <_fstat_r+0x1c>
 800b0d2:	602b      	str	r3, [r5, #0]
 800b0d4:	bd38      	pop	{r3, r4, r5, pc}
 800b0d6:	bf00      	nop
 800b0d8:	200006b8 	.word	0x200006b8

0800b0dc <_isatty_r>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	2300      	movs	r3, #0
 800b0e0:	4c05      	ldr	r4, [pc, #20]	; (800b0f8 <_isatty_r+0x1c>)
 800b0e2:	4605      	mov	r5, r0
 800b0e4:	4608      	mov	r0, r1
 800b0e6:	6023      	str	r3, [r4, #0]
 800b0e8:	f7fc f80f 	bl	800710a <_isatty>
 800b0ec:	1c43      	adds	r3, r0, #1
 800b0ee:	d102      	bne.n	800b0f6 <_isatty_r+0x1a>
 800b0f0:	6823      	ldr	r3, [r4, #0]
 800b0f2:	b103      	cbz	r3, 800b0f6 <_isatty_r+0x1a>
 800b0f4:	602b      	str	r3, [r5, #0]
 800b0f6:	bd38      	pop	{r3, r4, r5, pc}
 800b0f8:	200006b8 	.word	0x200006b8

0800b0fc <_malloc_usable_size_r>:
 800b0fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b100:	1f18      	subs	r0, r3, #4
 800b102:	2b00      	cmp	r3, #0
 800b104:	bfbc      	itt	lt
 800b106:	580b      	ldrlt	r3, [r1, r0]
 800b108:	18c0      	addlt	r0, r0, r3
 800b10a:	4770      	bx	lr

0800b10c <_init>:
 800b10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b10e:	bf00      	nop
 800b110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b112:	bc08      	pop	{r3}
 800b114:	469e      	mov	lr, r3
 800b116:	4770      	bx	lr

0800b118 <_fini>:
 800b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11a:	bf00      	nop
 800b11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b11e:	bc08      	pop	{r3}
 800b120:	469e      	mov	lr, r3
 800b122:	4770      	bx	lr
